<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gouya&#39;s Blog</title>
  <subtitle>人丑就要多读书</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://peromage.github.io/"/>
  <updated>2017-04-08T00:53:53.000Z</updated>
  <id>https://peromage.github.io/</id>
  
  <author>
    <name>Gouya</name>
    <email>peromage@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git 中的 Subtree 和 Submodule</title>
    <link href="https://peromage.github.io/2017/0407/Subtree-and-Submodule-in-Git/"/>
    <id>https://peromage.github.io/2017/0407/Subtree-and-Submodule-in-Git/</id>
    <published>2017-04-08T00:53:53.000Z</published>
    <updated>2017-04-08T00:53:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近弄自己的博客，涉及到了版本库嵌套的问题。记下来也算是给自己一个备忘。  </p>
<h1 id="为什么有这样的需求"><a href="#为什么有这样的需求" class="headerlink" title="为什么有这样的需求"></a>为什么有这样的需求</h1><p>版本库嵌套很好理解，就是在一个 Git 仓库里面包含了其他的 Git 仓库。通常有这样的需求往往涉及到协同开发。比如这里有一个插件单独的 Git 仓库姑且叫“Plugin”。现在我创建了一个自己的项目，其中需要用到这个“Plugin”插件。通常比较笨的办法就是把插件库源码拖下来，复制到自己的项目里。但是这样当插件库更新的时候，插件源码更新往往比较麻烦。而且如果在使用的过程中修改了插件的源码，也不便于插件单独的版本控制，更别说为插件库贡献代码了。但如果插件单独以 Git 仓库存在于我的项目目录中，以上的问题就解决了。  </p>
<p>在 Git 里面提供了两种方式实现上述需求，那就是 Subtree 和 Submodule。  </p>
<h1 id="Submodule"><a href="#Submodule" class="headerlink" title="Submodule"></a>Submodule</h1><p>Submodule 是 Git 里面最早提供的一种方法。顾名思义“子模块”。  </p>
<h2 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h2><p>执行<br><code>git submodule add &lt;repo&gt; &lt;module_path&gt;</code>  </p>
<p>此时运行 <code>git status</code> 可以看到子模块对应的文件夹和一个叫做 <em>.gitmodules</em> 文件被添加进了暂存区。其中<em>.gitmodules</em>是用于记录子模块相关信息的。之后主项目里面的操作照常提交就可以了。  </p>
<h2 id="修改子模块"><a href="#修改子模块" class="headerlink" title="修改子模块"></a>修改子模块</h2><p>但如果在开发的途中修改了子模块的代码，需要单独到子模块对应的根目录里面进行子模块单独的提交操作。在主项目里面虽然可以看到子模块有变更，但是无法看到具体的更改操作，而是将其看作一个模块整体。一旦子模块产生了新的提交，主项目里面可以看到子模块的 HEAD 变化，从而主项目也应当产生一个新的提交以记录对应关系。<br>换句话说，主项目就是靠着记录子模块 HEAD 值来判断依赖的。<strong>子模块的代码最后将不会进入主项目的版本库里面（只有 HEAD 值）</strong>  </p>
<p>现在子模块有了新的提交，为了将服务器上的代码更新，我们只需要进入子模块对应的更目录执行 push 操作就可以了。  </p>
<h2 id="更新子模块"><a href="#更新子模块" class="headerlink" title="更新子模块"></a>更新子模块</h2><p>此时子模块上游有了新的代码，我们需要将其整合到当前的项目中。有两种方法。 </p>
<p>在主项目根目录下运行<br><code>git submodule foreach git pull</code>  </p>
<p>或者切换到子模块的根目录下面<br><code>git pull</code></p>
<h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><p>克隆主项目的时候子模块并不会拉取到本地，如果进入对应的目录会发现是空的。<br>此时应当<br><code>git submodule init</code><br>保持最新<br><code>git submodule update</code>  </p>
<p>或者可以直接一条命令搞定<br><code>git clone --recursive &lt;repo&gt;</code></p>
<h2 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h2><p>Git 中没有提供直接删除的命令，需要手动完成删除操作。  </p>
<p>反向初始化子模块<br><code>git submodule deinit --force &lt;module_path&gt;</code><br>或者直接删掉 <em>.git/config</em> 里相关信息  </p>
<p>移除子模块<br><code>git rm &lt;module_path&gt;</code>  </p>
<p>如果暂存区还有<br><code>git rm --cached &lt;module_path&gt;</code>  </p>
<h2 id="子模块的坑"><a href="#子模块的坑" class="headerlink" title="子模块的坑"></a>子模块的坑</h2><h3 id="提交的坑"><a href="#提交的坑" class="headerlink" title="提交的坑"></a>提交的坑</h3><p>假设有 A B 两个人同时在开发一个项目，这个项目里面也包含了一个子模块。此时 A 修改了业务代码，同时修改了一个子模块里面的一个 bug 。A 将这次修改提交，主项目的提交里面指向了子模块新的 HEAD1 ，然后把主项目的版本库 push 到了服务器，但是没有 push 子模块。B 此时 pull 了主项目，然后 update 子模块，被告知找不到子模块的 HEAD1 。因为指向 HEAD1 的提交还在 A 本地机器上。<br>这就是子模块提交的坑。在多个模块存在的时候操作非常繁琐。  </p>
<h3 id="初始化的坑"><a href="#初始化的坑" class="headerlink" title="初始化的坑"></a>初始化的坑</h3><p>在执行 <code>git submodule init</code>， <code>git submodule update</code> 之后，此时修改子模块可能出现 HEAD 处于游离状态的的提示。如果不注意极有可能出现丢失提交的可能。<br>解决办法，在以上两条命令之后执行一次检出<br><code>git checkout &lt;branch&gt;</code>  </p>
<h1 id="Subtree"><a href="#Subtree" class="headerlink" title="Subtree"></a>Subtree</h1><h2 id="添加子项目"><a href="#添加子项目" class="headerlink" title="添加子项目"></a>添加子项目</h2><p>首先添加子项目对应的远程服务器<br><code>git remote add &lt;subrepo_name&gt; &lt;subrepo_remote&gt;</code>  </p>
<p>拉取一下<br><code>git fetch &lt;subrepo_name&gt;</code>  </p>
<p>添加子项目到父项目里面<br><code>git subtree add --squash --prefix=&lt;subrepo_path&gt; &lt;subrepo_name&gt; &lt;branch&gt;</code><br>参数 <em>–squash</em> 作用在于合并子项目所有提交为一个，并 merge 到父项目的历史中，这样只会出现两个提交记录，避免子项目的提交历史污染父项目。更多讨论可以看<a href="http://www.fwolf.com/blog/post/246" target="_blank" rel="external"><strong>这里</strong></a>。  </p>
<h2 id="修改子项目"><a href="#修改子项目" class="headerlink" title="修改子项目"></a>修改子项目</h2><p>添加完毕之后照常修改提交各种操作，父项目能够跟踪子项目里面的所有变更。子项目被当做一个正常的子文件夹处理。  </p>
<p>如果现在修改了子项目里的一个 bug 并且想要反馈给上游，可以这样操作<br><code>git subtree push --prefix=&lt;subrepo_path&gt; &lt;subrepo_name&gt; &lt;bug_fixed&gt;</code><br>这个操作可以将父项目里所有涉及子项目修改的提交检出。这样在远程仓库里面会出现一个叫做 <em>bug_fixed</em> 的分支。</p>
<p>或者也可以这样操作<br><code>git subtree split --prefix=&lt;subrepo_path&gt; --branch &lt;new_branch_name&gt;</code><br>这个操作跟上面一样将父项目里所有涉及子项目修改的提交检出，并且把子项目的根文件夹设为整个项目的根文件夹，然后检出为父项目的一个新的分支。  </p>
<p>然后推送给上游<br><code>git push &lt;subrepo_remote&gt; &lt;new_branch_name&gt;:&lt;bug_fixed&gt;</code>  </p>
<p>之后删除对应本地分支就可以了。  </p>
<h2 id="更新子项目"><a href="#更新子项目" class="headerlink" title="更新子项目"></a>更新子项目</h2><p>拉取非常方便<br><code>git subtree pull --prefix=&lt;subrepo_path&gt; &lt;subrepo_name&gt; &lt;branch&gt;</code>  </p>
<h2 id="删除子项目"><a href="#删除子项目" class="headerlink" title="删除子项目"></a>删除子项目</h2><p>因为子项目在父项目里面就是被当做一个普通的文件夹处理的，所以直接移除文件夹并提交就可以了。  </p>
<h1 id="Submodule-vs-Subtree"><a href="#Submodule-vs-Subtree" class="headerlink" title="Submodule vs. Subtree"></a>Submodule vs. Subtree</h1><p>Git 官方推荐使用新的 Subtree ，事实证明的确比 Submodule 方便不少。Subtree 不会产生额外的文件，而且子项目的代码包含在父项目里面，不会出现前面提到的坑的问题。具体应用上的对比可以参考<a href="https://gist.github.com/kvnsmth/4688345" target="_blank" rel="external"><strong>这篇文章</strong></a>。Subtree 对于代码迭代较快的项目尤为适合。</p>
<p>但也不是说 Submodule 一无是处， Submodule 在我感觉最大的意义在于可以隔离子项目的业务代码，并且记录严格的依赖关系。对于一些子模块更新较慢的项目还是比较适合的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近弄自己的博客，涉及到了版本库嵌套的问题。记下来也算是给自己一个备忘。  &lt;/p&gt;
&lt;h1 id=&quot;为什么有这样的需求&quot;&gt;&lt;a href=&quot;#为什么有这样的需求&quot; class=&quot;headerlink&quot; title=&quot;为什么有这样的需求&quot;&gt;&lt;/a&gt;为什么有这样的需求&lt;/
    
    </summary>
    
      <category term="Git" scheme="https://peromage.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://peromage.github.io/tags/Git/"/>
    
      <category term="Subtree" scheme="https://peromage.github.io/tags/Subtree/"/>
    
      <category term="Submodule" scheme="https://peromage.github.io/tags/Submodule/"/>
    
      <category term="Teamwork" scheme="https://peromage.github.io/tags/Teamwork/"/>
    
  </entry>
  
  <entry>
    <title>Windows + Linux 双系统引导手记</title>
    <link href="https://peromage.github.io/2017/0405/Windows-Linux-Dual-Systems-Boot/"/>
    <id>https://peromage.github.io/2017/0405/Windows-Linux-Dual-Systems-Boot/</id>
    <published>2017-04-05T23:26:41.000Z</published>
    <updated>2017-04-05T23:26:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-情况简述"><a href="#0x00-情况简述" class="headerlink" title="0x00 情况简述"></a>0x00 情况简述</h1><p>由于开发需要 Linux 环境，所以将老的那台笔记本改造成了双系统。<br>这台电脑的基本情况是这样的，64GB 固态硬盘 + 720GB 机械硬盘（实际可用空间有折损，这里为了表示方便），Windows 10 已经安装到了固态硬盘上。由于主板较老，只能支持 BIOS。巨硬又说过 Windows 只能支持 BIOS + MBR，所以第一块主位（Master）上的固态硬盘就只能采用 MBR 分区表，分成了两个区，500MB 用作启动分区，剩下的部分全部划给了系统分区。<br>但是 Linux 表示没有巨硬这种尿性，所以为什么不使用更先进的 GPT 分区表？因此从位（Slave）上的机械硬盘被我分成了这个样子：<br><strong>10MB BIOS 启动分区（No File System） + 500MB /boot 启动挂载点（EXT4） + 100GB / 根挂载点（EXT4） +  199.5GB /home 用户目录挂载点（EXT4） + 420GB Windows 数据分区（NTFS）</strong>。<br>BIOS 启动分区 1MB 足以，我只是考虑到后续扩展问题。之后在第二块硬盘上安装了 Arch Linux。  </p>
<h1 id="0x01-有啥好折腾的？"><a href="#0x01-有啥好折腾的？" class="headerlink" title="0x01 有啥好折腾的？"></a>0x01 有啥好折腾的？</h1><p>双系统安装好以后相安无事，BIOS 默认从主位固态硬盘启动。也就是说开机不进行任何操作的话，默认进入的是 Windows 10。只有在开机的时候使用 BIOS 的 Fast Boot 功能，选择从第二块硬盘启动才能进入 Arch Linux。换句话说两个系统彼此都是透明的。<br>但是作为一个强迫症和完美主义者，万一我想进入 Linux，但是开机的时候错过了，岂不是要重启一次才行？或者万一我又反悔想进入 Windows 又要重启一次？这怎么能忍，所以才有了这次的折腾……</p>
<h1 id="0x02-在-GRUB-中添加引导菜单"><a href="#0x02-在-GRUB-中添加引导菜单" class="headerlink" title="0x02 在 GRUB 中添加引导菜单"></a>0x02 在 GRUB 中添加引导菜单</h1><p>对于 GRUB （注：这里所说的 GRUB 指的是 GRUB 2 而不是 GRUB Legacy） 引导的 Linux 来说，切换到 Windows 的 <em>bootmgr</em> 是一件很容易的事情，最新版的 GRUB 可以直接启动 <em>bootmgr</em> 而不需要之前的 chainloading 模式。<br>进入 Arch Linux，以 root 权限编辑 <strong><em>/etc/grub.d/40_custom</em></strong> ，加入以下菜单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">menuentry &quot;Switch to Microsoft Boot Manager&quot; &#123;</div><div class="line">    insmod part_msdos</div><div class="line">    insmod ntfs</div><div class="line">    insmod search_fs_uuid</div><div class="line">    insmod ntldr     </div><div class="line">    search --fs-uuid --set=root  69B235F6749E84CE</div><div class="line">    ntldr /bootmgr</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><code>insmod</code> 是用于加载必要的模块以便 GRUB 识别并正确启动 Windows。值得注意的是，<code>search</code> 一行指定的 UUID 与 Linux 下 <strong><code>lsblk -f</code></strong> 看到的 UUID 是不一样的，需要使用 <strong><code>sudo grub-probe --target=fs_uuid -d /dev/sda1</code></strong> 来获取 GRUB 下对应的分区 UUID。这个例子中，Windows 启动分区是 <em>sda1</em>。UUID 是唯一的，勿照搬。  </p>
<p>当然也可以使用传统的 chainloading 模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">menuentry &quot;Switch to Microsoft Boot Manager&quot; &#123;</div><div class="line">    insmod part_msdos</div><div class="line">    insmod ntfs</div><div class="line">    insmod search_fs_uuid  </div><div class="line">    search --fs-uuid --set=root  69B235F6749E84CE</div><div class="line">    chainloader +1</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>保存以后，执行 <strong><code>sudo grub-mkconfig -o /boot/grub/grub.cfg</code></strong> ，以便更新启动菜单。<br>不推荐直接编辑 <strong><em>/boot/grub/grub.cfg</em></strong>，因为上述命令会覆盖这个文件，不便于自定义菜单的管理。<br>这样就可以直接跳转到 <em>bootmgr</em>，让它去启动 Windows。  </p>
<h1 id="0x03-BCD-寻思"><a href="#0x03-BCD-寻思" class="headerlink" title="0x03 BCD 寻思"></a>0x03 BCD 寻思</h1><p>BCD 是Windows Vista 之后使用的一种启动管理器。有个非常蛋疼的问题就在于，BCD 并不支持 EXT4 分区格式，所以没有办法读到 GRUB。查阅了相关资料，给出的解决办法就是，将 <strong><em>/boot</em></strong> 分区格式化成 FAT32 的文件系统。难道我还得再折腾一次文件系统？直觉告诉我一定还有其他的办法。<br>既然 BCD 没办法直接读 EXT4 分区里面的东西，我们可以曲线救国。BCD 里面提供了一种实模式启动的方式，允许读取一个包含了启动代码的文件。所以一种解决办法就是 <strong>BCD → MBR → VBR → Bootloader</strong>。由于 GPT 磁盘的第一个扇区被划分成了 Protective MBR，用于兼容 BIOS，所以在 Linux 使用：<br><strong><code>sudo dd if=/dev/sdb of=/mnt/reserved/grub.bin bs=512 count=1</code></strong><br>可以将第二块硬盘的第一扇区里面的启动代码导出到一个文件，然后使用 BCD 加载这个文件就可以启动 GRUB了。<br>果真如此？<br>事实是，这种方法可行，但是并不适用我的情况，因为这是建立在 Windows 和 Linux 安装在同一块硬盘上的情形。<em>grub.bin</em> 并不能够跨分区寻找 VBR。难道只能作罢？肯定不可能，不然就没有这篇文章了。<br>查阅了若干文档之后，得知 GRUB 提供了一个 叫做 <em>lnxboot.img</em> 文件，可以将 GRUB 启动阶段模拟成一个可以启动的 Linux 内核，然后挂载 <em>core.img</em> 里面必要的模块，从而顺利启动 GRUB。那么将之前的思路修改成 <strong>BCD → VBR → Bootloader</strong> 就行了，即既然 MBR 不能跨分区以及识别 GPT，那么我们就换成一个可以胜任的不就行了。  </p>
<h1 id="0x04-制作启动镜像"><a href="#0x04-制作启动镜像" class="headerlink" title="0x04 制作启动镜像"></a>0x04 制作启动镜像</h1><p>进入 Arch Linux。虽然在 <strong><em>/boot/grub/i386-pc/</em></strong> 目录下有一个用于启动的 <em>core.img</em> 文件，这个文件里面指定的模块路径是相对路径，使用它启动依然会显示错误，需要指定绝对路径以保证万无一失。那么我们就来手动生成一个，顺便集成一些我们需要的模块。<br>注意，启动镜像稍后会被放在 Windows 的启动分区下面（BCD 的启动分区），所以还需要知道模块所在分区的位置。在 GRUB 中表示磁盘的方式有所不同，如 <em>(hd0,msdos1)</em> 表示第一块磁盘，使用 MBR 分区表，第一个分区； <em>(hd1,gpt2)</em>  表示第二块磁盘，使用 GPT分区表，第二个分区。括号不可省，磁盘和分区的起始数字不一样。</p>
<p>使用  <code>grub-probe</code> 来获取 <strong><em>/boot</em></strong> 分区信息。这个例子得到的是 <em>hd1,gpt2</em>：<br><strong><code>sudo grub-probe --target=bios_hints /boot</code></strong>  </p>
<p>生成 <em>core.img</em>：<br><strong><code>sudo grub-mkimage --output=/tmp/core.img --prefix=\(hd1,gpt2\)/grub --format=i386-pc biosdisk part_msdos part_gpt ext2</code></strong><br>注意像我这样 <strong><em>/boot</em></strong> 单独分区，prefix 就不需要写成 <strong><em>\(hd1,gpt2\)/boot/grub</em></strong>，毕竟已经在 <strong><em>/boot</em></strong> 里面了嘛。默认没有 GPT 支持，所以还需要添加 GPT 模块。</p>
<p>生成启动镜像：<br>按照 GRUB 的帮助文档，<em>lnxboot.img</em> 需要放在 <em>core.img</em> 之前，由 <em>lnxboot.img</em> 来加载 <em>core.img</em>。所幸 BCD 可以一次读取大于一个扇区（512B）的内容，所以将这两个文件合并一下即可：<br><strong><code>sudo cat /usr/lib/grub/i386-pc/lnxboot.img /tmp/core.img &gt; /tmp/grub4bcd.img</code></strong>  </p>
<p>然后将 <em>grub4bcd.img</em> 放到 Windows 启动分区根目录下面就可以了。注意内核默认只能以只读模式挂载 NFTS 文件系统，需要安装扩展包才能读写：<br><strong><code>sudo pacman -S ntfs-3g</code></strong><br>然后挂载（安装了上述扩展包之后甚至不用指定参数）：<br><strong><code>sudo mount /dev/sda1 /mnt/reserved</code></strong>  </p>
<p>现在就可以顺利地将启动镜像复制到 Windows 启动分区下面了。</p>
<h1 id="0x05-在-BCD-中添加引导菜单"><a href="#0x05-在-BCD-中添加引导菜单" class="headerlink" title="0x05 在 BCD 中添加引导菜单"></a>0x05 在 BCD 中添加引导菜单</h1><p>重启进入 Windows 10。以管理员权限打开命令行。  </p>
<p>添加入口：<br><strong><code>bcdedit /create /d &quot;Switch to GRUB&quot; /application bootsector</code></strong><br>会返回一串 UUID，复制下来。之后 UUID 的地方我用 <strong>{ID}</strong> 表示，用刚才得到的替换即可。  </p>
<p>设置启动分区：<br><strong><code>bcdedit /set {ID} device boot</code></strong>  </p>
<p>设置启动文件：<br><strong><code>Bcdedit /set {ID} path /grub4bcd.img</code></strong>  </p>
<p>将入口添加进启动菜单：<br><strong><code>bcdedit /displayorder {ID} /addlast</code></strong>  </p>
<p>关闭 Metro 启动菜单（不关闭的话切换时会重启，建议关闭）：<br><strong><code>bcdedit /set {default} bootmenupolicy legacy</code></strong></p>
<p>最后关闭 Windows 10 的 Hybrid 开机功能，否则可能会导致 Windows 丢失数据：<br><strong><code>powercfg /h off</code></strong>  </p>
<h1 id="0x06-后记"><a href="#0x06-后记" class="headerlink" title="0x06 后记"></a>0x06 后记</h1><p>现在终于可以愉快地切换两个引导菜单了。其实使用 GRUB 来管理两个系统是较为简单的办法。<br>更为简单的办法是，先装 Windows 然后装 Ubuntu，后者会自动搞定这些麻烦事。╮(╯_╰)╭  </p>
<h1 id="0x07-参考资料"><a href="#0x07-参考资料" class="headerlink" title="0x07 参考资料"></a>0x07 参考资料</h1><p><em><a href="https://www.gnu.org/software/grub/manual/grub.html#Images" target="_blank" rel="external">https://www.gnu.org/software/grub/manual/grub.html#Images</a></em><br><em><a href="http://askubuntu.com/questions/180033/how-to-add-different-drive-ubuntu-to-bcd-manually" target="_blank" rel="external">http://askubuntu.com/questions/180033/how-to-add-different-drive-ubuntu-to-bcd-manually</a></em><br><em><a href="https://wiki.archlinux.org/index.php/Talk:Dual_boot_with_Windows" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Talk:Dual_boot_with_Windows</a></em><br><em><a href="https://wiki.archlinux.org/index.php/Dual_boot_with_Windows" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Dual_boot_with_Windows</a></em>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-情况简述&quot;&gt;&lt;a href=&quot;#0x00-情况简述&quot; class=&quot;headerlink&quot; title=&quot;0x00 情况简述&quot;&gt;&lt;/a&gt;0x00 情况简述&lt;/h1&gt;&lt;p&gt;由于开发需要 Linux 环境，所以将老的那台笔记本改造成了双系统。&lt;br&gt;这台电脑
    
    </summary>
    
      <category term="Fixit" scheme="https://peromage.github.io/categories/Fixit/"/>
    
    
      <category term="多系统" scheme="https://peromage.github.io/tags/%E5%A4%9A%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="引导" scheme="https://peromage.github.io/tags/%E5%BC%95%E5%AF%BC/"/>
    
      <category term="Windows" scheme="https://peromage.github.io/tags/Windows/"/>
    
      <category term="Linux" scheme="https://peromage.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
