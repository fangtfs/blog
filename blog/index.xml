<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Fang</title><link>https://peromage.github.io/blog/</link><description>Recent content in Blogs on Fang</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://peromage.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Initialize std::array at Compile Time</title><link>https://peromage.github.io/blog/initialize-std-array-at-compile-time/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/initialize-std-array-at-compile-time/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>I&amp;rsquo;ve been working on optimization for some C++ code recently. One of the part is to initialize some data at compile time. Consider we have a C style enum definition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">enum&lt;/span> &lt;span class="nc">Foo&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">AAA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BBB&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CCC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">Foo_t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We want to have an array of the enum with undefined initial values &lt;code>999&lt;/code> because by default initialization the values would be &lt;code>0&lt;/code>&amp;rsquo;s. However, &lt;code>std::array&lt;/code> can only be initialized by initializer list, which is said:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Partial initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">constexpr&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Foo_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Foo_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">999&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Foo_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">999&lt;/span>&lt;span class="p">)};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Results in int equivalent: {999, 999, 0, 0, 0}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If there are a hundred of elements then you have to write all of them down in the list.&lt;/p>
&lt;p>You can, of course, initialize it in a loop but this sacrifices runtime performance.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Runtime initialization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Foo_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nl">i&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Foo_t&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">999&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Results in int equivalent: {999, 999, 999, 999, 999}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="generating-code-by-templates">Generating code by templates&lt;/h2>
&lt;p>We can use recursive deduction of templates to generate our code. There is a limit that you can only do 1024 times of recursion but in my case it&amp;rsquo;s enough.&lt;/p>
&lt;p>The idea is to count the size to zero and use variadic argument to increase the number of arguments on each recursion. Finally the size of the array will be passed to the bottom and the variadic argument gets expanded.&lt;/p>
&lt;p>It&amp;rsquo;s a pretty simple trick.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">ARR_IMPL&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ARR_IMPL&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">M&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span>&lt;span class="p">...&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">ARR_IMPL&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">U&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">999&lt;/span>&lt;span class="p">)...};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">ARR&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ARR_IMPL&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">N&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">N&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">array1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ARR&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Foo_t&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="n">array2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ARR&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Foo_t&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// array1 results in int equivalent: {999, 999, 999, 999, 999}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// array2 results in int equivalent: {999, 999, 999, 999, 999, ...}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Moving From Vim to Emacs</title><link>https://peromage.github.io/blog/moving-from-vim-to-emacs/</link><pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/moving-from-vim-to-emacs/</guid><description>&lt;p>YouTube has been pushing me a lot Emacs related contents. This is weird since mostly I watch Vim videos only. But probably this is also a great opportunity to try Emacs again.&lt;/p>
&lt;p>I have tried Emacs half year ago. I looked a lot Elisp programming fundamentals and tried a few Emacs configurations from others including Doom Emacs. However, it didn&amp;rsquo;t last long since I found that I didn&amp;rsquo;t have enough time to configure this Emacs setup as good as the &lt;a class="link" href="https://github.com/peromage/rice.vim" target="_blank" rel="noopener"
>Vim setup&lt;/a> that I was using. Also using other&amp;rsquo;s configurations makes things complicated for me. They have too many packages included and I don&amp;rsquo;t know what they are.&lt;/p>
&lt;p>After watching a bunch of Emacs videos I decided to pick it up this time, with vanilla Emacs starting from scratch. The reason why I make my mind this time is because I found Emacs can perfectly and elegantly solve some problems that pain my ass:&lt;/p>
&lt;ul>
&lt;li>More convenient package management.&lt;/li>
&lt;li>High quality packages.&lt;/li>
&lt;li>Easier file management in shell environment within the editor (Dired)&lt;/li>
&lt;li>No third party dependencies like Node.js and Python. The two major plugs that I&amp;rsquo;m using in Vim are &lt;a class="link" href="https://github.com/neoclide/coc.nvim" target="_blank" rel="noopener"
>Coc&lt;/a> and &lt;a class="link" href="https://github.com/Yggdroot/LeaderF" target="_blank" rel="noopener"
>Leaderf&lt;/a>. They require Node.js and Python to work. Since Elisp is power enough, Emacs can handle this easily by itself.&lt;/li>
&lt;li>Server-client architecture. I can even replace Tmux with Emacs now. NeoVim has the similar concept but it cannot match what Emacs has.&lt;/li>
&lt;li>Graphical interface in X mode. This makes Emacs be able to display rich contents.&lt;/li>
&lt;li>Org mode. It looks great to organize to-do list and take notes without switching to other applications.&lt;/li>
&lt;li>Evil mode. No need to worry about missing Vim&amp;rsquo;s features.&lt;/li>
&lt;li>Magit. Looks way better and nicer than fugitive.&lt;/li>
&lt;li>Elisp. Elisp is fun 😉.&lt;/li>
&lt;/ul>
&lt;p>The migration is going slowly. Right now my main setup is still Vim + Tmux. There is a little curve learning from vanilla edition of Emacs, but It&amp;rsquo;s not a big deal compared with the first time when I started learning Vim 🙂.&lt;/p>
&lt;p>In the end, dont&amp;rsquo;t give me wrong. Vim and Emacs both are great text editor. For me, Vim is more like a spirit, a concept. Once you&amp;rsquo;ve learned its high-efficiency key maps, you can use it everywhere. Even though I switch to Emacs I still use Vim mode together with Emacs&amp;rsquo; powerful extendability. Why not?&lt;/p></description></item><item><title>Windows + Linux 双系统引导手记</title><link>https://peromage.github.io/blog/windows-linux%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E6%89%8B%E8%AE%B0/</link><pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/windows-linux%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E6%89%8B%E8%AE%B0/</guid><description>&lt;h2 id="0x00-情况简述">0x00 情况简述&lt;/h2>
&lt;p>由于开发需要 Linux 环境，所以将老的那台笔记本改造成了双系统。
这台电脑的基本情况是这样的，64GB 固态硬盘 + 720GB 机械硬盘（实际可用空间有折损，这里为了表示方便），Windows 10 已经安装到了固态硬盘上。由于主板较老，只能支持 BIOS。巨硬又说过 Windows 只能支持 BIOS + MBR，所以第一块主位（Master）上的固态硬盘就只能采用 MBR 分区表，分成了两个区，500MB 用作启动分区，剩下的部分全部划给了系统分区。
但是 Linux 表示没有巨硬这种尿性，所以为什么不使用更先进的 GPT 分区表？因此从位（Slave）上的机械硬盘被我分成了这个样子：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>大小&lt;/th>
&lt;th>挂载点&lt;/th>
&lt;th>文件系统&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>10 MB&lt;/td>
&lt;td>None&lt;/td>
&lt;td>No File System&lt;/td>
&lt;td>BIOS 启动分区&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>500 MB&lt;/td>
&lt;td>/boot&lt;/td>
&lt;td>EXT4&lt;/td>
&lt;td>引导&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>100 GB&lt;/td>
&lt;td>/&lt;/td>
&lt;td>EXT4&lt;/td>
&lt;td>系统&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>199.5GB&lt;/td>
&lt;td>/home&lt;/td>
&lt;td>EXT4&lt;/td>
&lt;td>用户&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>420 GB&lt;/td>
&lt;td>None&lt;/td>
&lt;td>NTFS&lt;/td>
&lt;td>Windows 数据&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>BIOS 启动分区 1MB 足以，我只是考虑到后续扩展问题。之后在第二块硬盘上安装了 Arch Linux。&lt;/p>
&lt;h2 id="0x01-有啥好折腾的">0x01 有啥好折腾的？&lt;/h2>
&lt;p>双系统安装好以后相安无事，BIOS 默认从主位固态硬盘启动。也就是说开机不进行任何操作的话，默认进入的是 Windows 10。只有在开机的时候使用 BIOS 的 Fast Boot 功能，选择从第二块硬盘启动才能进入 Arch Linux。换句话说两个系统彼此都是透明的。
但是作为一个强迫症和完美主义者，万一我想进入 Linux，但是开机的时候错过了，岂不是要重启一次才行？或者万一我又反悔想进入 Windows 又要重启一次？这怎么能忍，所以才有了这次的折腾……&lt;/p>
&lt;h2 id="0x02-在-grub-中添加引导菜单">0x02 在 GRUB 中添加引导菜单&lt;/h2>
&lt;p>对于 GRUB （注：这里所说的 GRUB 指的是 GRUB 2 而不是 GRUB Legacy） 引导的 Linux 来说，切换到 Windows 的 &lt;code>bootmgr&lt;/code> 是一件很容易的事情，最新版的 GRUB 可以直接启动 &lt;code>bootmgr&lt;/code> 而不需要之前的 chainloading 模式。
进入 Arch Linux，以 root 权限编辑 &lt;code>/etc/grub.d/40_custom&lt;/code> ，加入以下菜单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Switch to Microsoft Boot Manager&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">insmod part_msdos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">insmod ntfs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">insmod search_fs_uuid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">insmod ntldr&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --fs-uuid --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root 69B235F6749E84CE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> ntldr /bootmgr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> }&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>insmod&lt;/code> 是用于加载必要的模块以便 GRUB 识别并正确启动 Windows。值得注意的是， &lt;code>search&lt;/code> 一行指定的 UUID 与 Linux 下 &lt;code>lsblk -f&lt;/code> 看到的 UUID 是不一样的，需要使用&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo grub-probe --target&lt;span class="o">=&lt;/span>fs_uuid -d /dev/sda1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来获取 GRUB 下对应的分区 UUID。这个例子中，Windows 启动分区是 &lt;code>sda1&lt;/code> 。UUID 是唯一的，勿照搬。&lt;/p>
&lt;p>当然也可以使用传统的 chainloading 模式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Switch to Microsoft Boot Manager&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">insmod part_msdos&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">insmod ntfs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">insmod search_fs_uuid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --fs-uuid --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root 69B235F6749E84CE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> chainloader +1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> }&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存以后，执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以便更新启动菜单。&lt;/p>
&lt;p>不推荐直接编辑 &lt;code>/boot/grub/grub.cfg&lt;/code> ，因为上述命令会覆盖这个文件，不便于自定义菜单的管理。
这样就可以直接跳转到 &lt;code>bootmgr&lt;/code> ，让它去启动 Windows。&lt;/p>
&lt;h2 id="0x03-bcd-寻思">0x03 BCD 寻思&lt;/h2>
&lt;p>BCD 是Windows Vista 之后使用的一种启动管理器。有个非常蛋疼的问题就在于，BCD 并不支持 EXT4 分区格式，所以没有办法读到 GRUB。查阅了相关资料，给出的解决办法就是，将 &lt;code>/boot&lt;/code> 分区格式化成 FAT32 的文件系统。难道我还得再折腾一次文件系统？直觉告诉我一定还有其他的办法。
既然 BCD 没办法直接读 EXT4 分区里面的东西，我们可以曲线救国。BCD 里面提供了一种实模式启动的方式，允许读取一个包含了启动代码的文件。所以一种解决办法就是 &lt;code>BCD → MBR → VBR → Bootloader&lt;/code> 。由于 GPT 磁盘的第一个扇区被划分成了 Protective MBR，用于兼容 BIOS，所以在 Linux 使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/sdb &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/mnt/reserved/grub.bin &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">512&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以将第二块硬盘的第一扇区里面的启动代码导出到一个文件，然后使用 BCD 加载这个文件就可以启动 GRUB了。
果真如此？
事实是，这种方法可行，但是并不适用我的情况，因为这是建立在 Windows 和 Linux 安装在同一块硬盘上的情形。 &lt;code>grub.bin&lt;/code> 并不能够跨分区寻找 VBR。难道只能作罢？肯定不可能，不然就没有这篇文章了。
查阅了若干文档之后，得知 GRUB 提供了一个 叫做 &lt;code>lnxboot.img&lt;/code> 文件，可以将 GRUB 启动阶段模拟成一个可以启动的 Linux 内核，然后挂载 &lt;code>core.img&lt;/code> 里面必要的模块，从而顺利启动 GRUB。那么将之前的思路修改成 &lt;code>BCD → VBR → Bootloader&lt;/code> 就行了，即既然 MBR 不能跨分区以及识别 GPT，那么我们就换成一个可以胜任的不就行了。&lt;/p>
&lt;h2 id="0x04-制作启动镜像">0x04 制作启动镜像&lt;/h2>
&lt;p>进入 Arch Linux。虽然在 &lt;code>/boot/grub/i386-pc/&lt;/code> 目录下有一个用于启动的 &lt;code>core.img&lt;/code> 文件，这个文件里面指定的模块路径是相对路径，使用它启动依然会显示错误，需要指定绝对路径以保证万无一失。那么我们就来手动生成一个，顺便集成一些我们需要的模块。
注意，启动镜像稍后会被放在 Windows 的启动分区下面（BCD 的启动分区），所以还需要知道模块所在分区的位置。在 GRUB 中表示磁盘的方式有所不同，如 &lt;code>(hd0,msdos1)&lt;/code> 表示第一块磁盘，使用 MBR 分区表，第一个分区。 &lt;code>(hd1,gpt2)&lt;/code> 表示第二块磁盘，使用 GPT分区表，第二个分区。括号不可省，磁盘和分区的起始数字不一样。&lt;/p>
&lt;p>使用 &lt;code>grub-probe&lt;/code> 来获取 &lt;code>/boot&lt;/code> 分区信息。这个例子得到的是 &lt;code>hd1,gpt2&lt;/code> ：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo grub-probe --target&lt;span class="o">=&lt;/span>bios_hints /boot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>生成 &lt;code>core.img&lt;/code> ：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo grub-mkimage --output&lt;span class="o">=&lt;/span>/tmp/core.img --prefix&lt;span class="o">=&lt;/span>&lt;span class="se">\(&lt;/span>hd1,gpt2&lt;span class="se">\)&lt;/span>/grub --format&lt;span class="o">=&lt;/span>i386-pc biosdisk part_msdos part_gpt ext2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意像我这样 &lt;code>/boot&lt;/code> 单独分区，prefix 就不需要写成 &lt;code>\\(hd1,gpt2\\)/boot/grub&lt;/code> ，毕竟已经在 &lt;code>/boot&lt;/code> 里面了嘛。默认没有 GPT 支持，所以还需要添加 GPT 模块。&lt;/p>
&lt;p>生成启动镜像：
按照 GRUB 的帮助文档， &lt;code>lnxboot.img&lt;/code> 需要放在 &lt;code>core.img&lt;/code> 之前，由 &lt;code>lnxboot.img&lt;/code> 来加载 &lt;code>core.img&lt;/code> 。所幸 BCD 可以一次读取大于一个扇区（512B）的内容，所以将这两个文件合并一下即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo cat /usr/lib/grub/i386-pc/lnxboot.img /tmp/core.img &amp;gt; /tmp/grub4bcd.img
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后将 &lt;code>grub4bcd.img&lt;/code> 放到 Windows 启动分区根目录下面就可以了。注意内核默认只能以只读模式挂载 NFTS 文件系统，需要安装扩展包才能读写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo pacman -S ntfs-3g
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后挂载（安装了上述扩展包之后甚至不用指定参数）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo mount /dev/sda1 /mnt/reserved
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在就可以顺利地将启动镜像复制到 Windows 启动分区下面了。&lt;/p>
&lt;h2 id="0x05-在-bcd-中添加引导菜单">0x05 在 BCD 中添加引导菜单&lt;/h2>
&lt;p>重启进入 Windows 10。以管理员权限打开命令行。&lt;/p>
&lt;p>添加入口：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /create /d &lt;span class="s2">&amp;#34;Switch to GRUB&amp;#34;&lt;/span> /application bootsector
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>会返回一串 UUID，复制下来。之后 UUID 的地方我用 &lt;code>{ID}&lt;/code> 表示，用刚才得到的替换即可。&lt;/p>
&lt;p>设置启动分区：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /set &lt;span class="o">{&lt;/span>ID&lt;span class="o">}&lt;/span> device boot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置启动文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /set &lt;span class="o">{&lt;/span>ID&lt;span class="o">}&lt;/span> path /grub4bcd.img
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将入口添加进启动菜单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /displayorder &lt;span class="o">{&lt;/span>ID&lt;span class="o">}&lt;/span> /addlast
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关闭 Metro 启动菜单（不关闭的话切换时会重启，建议关闭）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /set &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span> bootmenupolicy legacy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后关闭 Windows 10 的 Hybrid 开机功能，否则可能会导致 Windows 丢失数据：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; powercfg /h off
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="0x06-后记">0x06 后记&lt;/h2>
&lt;p>现在终于可以愉快地切换两个引导菜单了。其实使用 GRUB 来管理两个系统是较为简单的办法。
更为简单的办法是，先装 Windows 然后装 Ubuntu，后者会自动搞定这些麻烦事。╮(╯_╰)╭&lt;/p>
&lt;h2 id="0x07-参考资料">0x07 参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.gnu.org/software/grub/manual/grub.html#Images" target="_blank" rel="noopener"
>https://www.gnu.org/software/grub/manual/grub.html#Images&lt;/a>
&lt;a class="link" href="http://askubuntu.com/questions/180033/how-to-add-different-drive-ubuntu-to-bcd-manually" target="_blank" rel="noopener"
>http://askubuntu.com/questions/180033/how-to-add-different-drive-ubuntu-to-bcd-manually&lt;/a>
&lt;a class="link" href="https://wiki.archlinux.org/index.php/Talk:Dual_boot_with_Windows" target="_blank" rel="noopener"
>https://wiki.archlinux.org/index.php/Talk:Dual_boot_with_Windows&lt;/a>
&lt;a class="link" href="https://wiki.archlinux.org/index.php/Dual_boot_with_Windows" target="_blank" rel="noopener"
>https://wiki.archlinux.org/index.php/Dual_boot_with_Windows&lt;/a>&lt;/p></description></item><item><title>Git 中的 Subtree 和 Submodule</title><link>https://peromage.github.io/blog/git%E4%B8%AD%E7%9A%84subtree%E5%92%8Csubmodule/</link><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/git%E4%B8%AD%E7%9A%84subtree%E5%92%8Csubmodule/</guid><description>&lt;p>因为最近弄自己的博客，涉及到了版本库嵌套的问题。记下来也算是给自己一个备忘。&lt;/p>
&lt;h2 id="为什么有这样的需求">为什么有这样的需求&lt;/h2>
&lt;p>版本库嵌套很好理解，就是在一个 Git 仓库里面包含了其他的 Git 仓库。通常有这样的需求往往涉及到协同开发。比如这里有一个插件单独的 Git 仓库姑且叫“Plugin”。现在我创建了一个自己的项目，其中需要用到这个“Plugin”插件。通常比较笨的办法就是把插件库源码拖下来，复制到自己的项目里。但是这样当插件库更新的时候，插件源码更新往往比较麻烦。而且如果在使用的过程中修改了插件的源码，也不便于插件单独的版本控制，更别说为插件库贡献代码了。但如果插件单独以 Git 仓库存在于我的项目目录中，以上的问题就解决了。&lt;/p>
&lt;p>在 Git 里面提供了两种方式实现上述需求，那就是 Subtree 和 Submodule。&lt;/p>
&lt;h2 id="submodule">Submodule&lt;/h2>
&lt;p>Submodule 是 Git 里面最早提供的一种方法。顾名思义“子模块”。&lt;/p>
&lt;h3 id="添加子模块">添加子模块&lt;/h3>
&lt;p>执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git submodule add &amp;lt;repo&amp;gt; &amp;lt;module_path&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时运行 &lt;code>git status&lt;/code> 可以看到子模块对应的文件夹和一个叫做 &lt;code>.gitmodules&lt;/code> 文件被添加进了暂存区。其中 &lt;code>.gitmodules&lt;/code> 是用于记录子模块相关信息的。之后主项目里面的操作照常提交就可以了。&lt;/p>
&lt;h3 id="修改子模块">修改子模块&lt;/h3>
&lt;p>但如果在开发的途中修改了子模块的代码，需要单独到子模块对应的根目录里面进行子模块单独的提交操作。在主项目里面虽然可以看到子模块有变更，但是无法看到具体的更改操作，而是将其看作一个模块整体。一旦子模块产生了新的提交，主项目里面可以看到子模块的 HEAD 变化，从而主项目也应当产生一个新的提交以记录对应关系。
换句话说，主项目就是靠着记录子模块 HEAD 值来判断依赖的。子模块的代码最后将不会进入主项目的版本库里面（只有 HEAD 值）。&lt;/p>
&lt;p>现在子模块有了新的提交，为了将服务器上的代码更新，我们只需要进入子模块对应的更目录执行 push 操作就可以了。&lt;/p>
&lt;h3 id="更新子模块">更新子模块&lt;/h3>
&lt;p>此时子模块上游有了新的代码，我们需要将其整合到当前的项目中。有两种方法。&lt;/p>
&lt;p>在主项目根目录下运行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git submodule foreach git pull
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者切换到子模块的根目录下面&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git pull
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="克隆项目">克隆项目&lt;/h3>
&lt;p>克隆主项目的时候子模块并不会拉取到本地，如果进入对应的目录会发现是空的。
此时应当&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git submodule init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保持最新&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git submodule update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者可以直接一条命令搞定&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git clone --recursive &amp;lt;repo&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除子模块">删除子模块&lt;/h3>
&lt;p>Git 中没有提供直接删除的命令，需要手动完成删除操作。&lt;/p>
&lt;p>反向初始化子模块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git submodule deinit --force &amp;lt;module_path&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者直接删掉 &lt;code>.git/config&lt;/code> 里相关信息&lt;/p>
&lt;p>移除子模块&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git rm &amp;lt;module_path&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果暂存区还有&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git rm --cached &amp;lt;module_path&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="子模块的坑">子模块的坑&lt;/h3>
&lt;h4 id="提交的坑">提交的坑&lt;/h4>
&lt;p>假设有 A B 两个人同时在开发一个项目，这个项目里面也包含了一个子模块。此时 A 修改了业务代码，同时修改了一个子模块里面的一个 bug 。A 将这次修改提交，主项目的提交里面指向了子模块新的 HEAD1 ，然后把主项目的版本库 push 到了服务器，但是没有 push 子模块。B 此时 pull 了主项目，然后 update 子模块，被告知找不到子模块的 HEAD1 。因为指向 HEAD1 的提交还在 A 本地机器上。
这就是子模块提交的坑。在多个模块存在的时候操作非常繁琐。&lt;/p>
&lt;h4 id="初始化的坑">初始化的坑&lt;/h4>
&lt;p>在执行 &lt;code>git submodule init&lt;/code> ， &lt;code>git submodule update&lt;/code> 之后，此时修改子模块可能出现 HEAD 处于游离状态的的提示。如果不注意极有可能出现丢失提交的可能。
解决办法，在以上两条命令之后执行一次检出&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git checkout &amp;lt;branch&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="subtree">Subtree&lt;/h2>
&lt;h3 id="添加子项目">添加子项目&lt;/h3>
&lt;p>首先添加子项目对应的远程服务器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git remote add &amp;lt;subrepo_name&amp;gt; &amp;lt;subrepo_remote&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>拉取一下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git fetch &amp;lt;subrepo_name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加子项目到父项目里面&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git subtree add --squash --prefix&lt;span class="o">=&lt;/span>&amp;lt;subrepo_path&amp;gt; &amp;lt;subrepo_name&amp;gt; &amp;lt;branch&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参数 &lt;code>--squash&lt;/code> 作用在于合并子项目所有提交为一个，并 merge 到父项目的历史中，这样只会出现两个提交记录，避免子项目的提交历史污染父项目。更多讨论可以看&lt;a class="link" href="http://www.fwolf.com/blog/post/246" target="_blank" rel="noopener"
>这里&lt;/a>。&lt;/p>
&lt;h3 id="修改子项目">修改子项目&lt;/h3>
&lt;p>添加完毕之后照常修改提交各种操作，父项目能够跟踪子项目里面的所有变更。子项目被当做一个正常的子文件夹处理。&lt;/p>
&lt;p>如果现在修改了子项目里的一个 bug 并且想要反馈给上游，可以这样操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git subtree push --prefix&lt;span class="o">=&lt;/span>&amp;lt;subrepo_path&amp;gt; &amp;lt;subrepo_name&amp;gt; &amp;lt;bug_fixed&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个操作可以将父项目里所有涉及子项目修改的提交检出。这样在远程仓库里面会出现一个叫做 &lt;em>bug_fixed&lt;/em> 的分支。&lt;/p>
&lt;p>或者也可以这样操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git subtree split --prefix&lt;span class="o">=&lt;/span>&amp;lt;subrepo_path&amp;gt; --branch &amp;lt;new_branch_name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个操作跟上面一样将父项目里所有涉及子项目修改的提交检出，并且把子项目的根文件夹设为整个项目的根文件夹，然后检出为父项目的一个新的分支。&lt;/p>
&lt;p>然后推送给上游&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git push &amp;lt;subrepo_remote&amp;gt; &amp;lt;new_branch_name&amp;gt;:&amp;lt;bug_fixed&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>之后删除对应本地分支就可以了。&lt;/p>
&lt;h3 id="更新子项目">更新子项目&lt;/h3>
&lt;p>拉取非常方便&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git subtree pull --prefix&lt;span class="o">=&lt;/span>&amp;lt;subrepo_path&amp;gt; &amp;lt;subrepo_name&amp;gt; &amp;lt;branch&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除子项目">删除子项目&lt;/h3>
&lt;p>因为子项目在父项目里面就是被当做一个普通的文件夹处理的，所以直接移除文件夹并提交就可以了。&lt;/p>
&lt;h2 id="submodule-vs-dot-subtree">Submodule vs. Subtree&lt;/h2>
&lt;p>Git 官方推荐使用新的 Subtree ，事实证明的确比 Submodule 方便不少。Subtree 不会产生额外的文件，而且子项目的代码包含在父项目里面，不会出现前面提到的坑的问题。具体应用上的对比可以参考&lt;a class="link" href="https://gist.github.com/kvnsmth/4688345" target="_blank" rel="noopener"
>这篇文章&lt;/a>。Subtree 对于代码迭代较快的项目尤为适合。&lt;/p>
&lt;p>但也不是说 Submodule 一无是处， Submodule 在我感觉最大的意义在于可以隔离子项目的业务代码，并且记录严格的依赖关系。对于一些子模块更新较慢的项目还是比较适合的。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a class="link" href="https://gist.github.com/kvnsmth/4688345" target="_blank" rel="noopener"
>subtree_usage&lt;/a>
&lt;a class="link" href="http://www.fwolf.com/blog/post/246" target="_blank" rel="noopener"
>subtree_squash&lt;/a>&lt;/p></description></item><item><title>Dual-booting Windows VHD and Native Linux on a BIOS+GPT PC</title><link>https://peromage.github.io/blog/dual-booting-windows-vhd-and-native-linux-on-a-bios-gpt-pc/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/dual-booting-windows-vhd-and-native-linux-on-a-bios-gpt-pc/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>Previously I wrote a post for this dual-boot scenario. It is a little outdated. In the past year I mostly worked in the Linux environment on my old laptop, so the Windows seems not to be a necessity which occupies a dedicated partition. However, sometimes it is still needed. That is why I started thinking to improve this setup even further.&lt;/p>
&lt;p>Starting from Windows 7, Windows supports boots from a VHD file which makes it so much easier to manage. Also you are able to create differencing disks which are pretty much like snapshots.&lt;/p>
&lt;p>For this new configuration, my plan is to use BIOS + GPT disk table + Native Linux + Native Windows booting from VHD + GRUB as the bootloader.&lt;/p>
&lt;h2 id="partitioning">Partitioning&lt;/h2>
&lt;p>To make GPT works with BIOS. It is required to have a small partition &lt;a class="link" href="https://wiki.archlinux.org/title/GRUB" target="_blank" rel="noopener"
>flagged&lt;/a> with &lt;code>EF02&lt;/code>.&lt;/p>
&lt;p>The partition scheme looks like this:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Device&lt;/th>
&lt;th>Start&lt;/th>
&lt;th>End&lt;/th>
&lt;th>Sectors&lt;/th>
&lt;th>Size&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>/dev/sda1&lt;/td>
&lt;td>34&lt;/td>
&lt;td>2047&lt;/td>
&lt;td>2014&lt;/td>
&lt;td>1007K&lt;/td>
&lt;td>BIOS Boot&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda2&lt;/td>
&lt;td>2048&lt;/td>
&lt;td>1026047&lt;/td>
&lt;td>1024000&lt;/td>
&lt;td>500M&lt;/td>
&lt;td>EFI System&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda3&lt;/td>
&lt;td>1026048&lt;/td>
&lt;td>206546943&lt;/td>
&lt;td>205520896&lt;/td>
&lt;td>98G&lt;/td>
&lt;td>Linux Filesystem&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda4&lt;/td>
&lt;td>206546944&lt;/td>
&lt;td>835692543&lt;/td>
&lt;td>629145600&lt;/td>
&lt;td>300G&lt;/td>
&lt;td>Linux Filesystem&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda5&lt;/td>
&lt;td>835692544&lt;/td>
&lt;td>1465149134&lt;/td>
&lt;td>629456591&lt;/td>
&lt;td>300.1G&lt;/td>
&lt;td>Microsoft Basic Data&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="installing-linux">Installing Linux&lt;/h2>
&lt;p>Any Linux distro would work. I chose Manjaro KDE this time because I found that the Pop OS made my laptop really hot sometimes (Yeah KDE is prettier).&lt;/p>
&lt;p>This part should be easy. The GRUB files is going into that EFI partition. For details, check &lt;a class="link" href="https://wiki.archlinux.org/title/GRUB" target="_blank" rel="noopener"
>GRUB wiki&lt;/a>.&lt;/p>
&lt;h2 id="preparing-to-install-windows">Preparing to Install Windows&lt;/h2>
&lt;p>I&amp;rsquo;m not going to use the standard Windwos installer since I want to install it into a VHD file. To make it work we need a Windows PE environment.&lt;/p>
&lt;h3 id="preparing-images">Preparing Images&lt;/h3>
&lt;p>Any Windows PE (Windows 7 and above) would work. The PE ISO image is going to &lt;code>/boot/wepe.iso&lt;/code>.&lt;/p>
&lt;p>Also a Windows ISO image is needed. For example a Windows 7 ISO named &lt;code>windows7.iso&lt;/code> will be put in the Windows data partition.&lt;/p>
&lt;h3 id="adding-windows-pe-to-grub">Adding Windows PE to GRUB&lt;/h3>
&lt;p>Boot into Linux. Download Windows PE ISO file and move it to the EFI partition (EXT4 partitions might be problematic).&lt;/p>
&lt;p>To load this ISO image, &lt;code>memdisk&lt;/code> tool from &lt;code>syslinux&lt;/code> is required. Steps as below on Arch based distro:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Installing syslinux&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo pacman -S syslinux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copying memdisk to the boot partition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo cp /usr/lib/syslinux/bios/memdisk /boot/memdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Adding Windows PE entry to GRUB. 1DB1-9C31 is the boot partition&amp;#39;s UUID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/grub.d/40_custom
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">menuentry &amp;#34;WePE x64&amp;#34; {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> search --set=root --no-floppy --fs-uuid 1DB1-9C31
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> linux16 /memdisk iso ro
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> initrd16 /wepe.iso
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Updating GRUB entries&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="installing-windows-to-a-vhd-file">Installing Windows to a VHD File&lt;/h2>
&lt;p>After adding Windows PE to the bootloader entries, it is time to switch the working environment.&lt;/p>
&lt;p>Restart the PC, then keep pression &lt;code>shift&lt;/code> key until the GRUB menu shows up. Now navigate to the Windows PE entry and get in there.&lt;/p>
&lt;h3 id="creating-a-vhd-file-for-windows">Creating a VHD File for Windows&lt;/h3>
&lt;p>To create a VHD file, open a command line window and enter &lt;code>diskpart&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a VHD file assuming the NTFS data partition is assigned with D:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\w&lt;/span>indows7.vhd &lt;span class="nv">maximum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">64000&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>fixed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="k">select&lt;/span> vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; attach vdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Disk table type doesn&amp;#39;t matter but using MBR for better compatibility&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; convert mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create the system partition and assign it with C:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create partition primary
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; format &lt;span class="nv">fs&lt;/span>&lt;span class="o">=&lt;/span>ntfs quick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; assign &lt;span class="nv">letter&lt;/span>&lt;span class="o">=&lt;/span>c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the Windows image can be dumped into this VHD file.&lt;/p>
&lt;h3 id="extracting-windows-image">Extracting Windows Image&lt;/h3>
&lt;p>Mount the Windows ISO image to &lt;code>E:&lt;/code> volume and open a command line window&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get the image index. For example the desired version&amp;#39;s index is 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; dism /get-wiminfo /wimfile&lt;span class="o">=&lt;/span>e:&lt;span class="se">\s&lt;/span>ources&lt;span class="se">\i&lt;/span>nstall.wim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Extract the image. Where E: is the Windows ISO and C: is the VHD file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; dism /apply-image /imagefile:e:&lt;span class="se">\s&lt;/span>ources&lt;span class="se">\i&lt;/span>nstall.wim /index:1 /applydir:c:&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="fixing-the-windows-bootloader">Fixing the Windows Bootloader&lt;/h2>
&lt;p>Stay in Windows PE. Don&amp;rsquo;t restart the PC. We still need to fix the bootloader for Windows.&lt;/p>
&lt;p>Normally Windows cannot be booted with a GPT+MBR setup. And also loading the whole Windows VHD file through &lt;code>memdisk&lt;/code> is not possible because it&amp;rsquo;s too large to load into memory. To fix the boot issue a bridge is needed between Windows and GRUB.&lt;/p>
&lt;p>Luckily &lt;a class="link" href="http://reboot.pro/index.php?showtopic=19516&amp;amp;page=2&amp;amp;#entry184489" target="_blank" rel="noopener"
>a small VHD image&lt;/a> can still be loaded by &lt;code>memdisk&lt;/code>.&lt;/p>
&lt;p>The idea is: GRUB -&amp;gt; MS Bootmgr VHD -&amp;gt; Windows VHD&lt;/p>
&lt;h3 id="creating-a-dedicated-bootloader-image-for-windows">Creating a Dedicated Bootloader Image for Windows&lt;/h3>
&lt;p>It is same with the process creating a VHD file for Windows system but this time it is a smaller file (32 MB).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a small bootmgr VHD file in the data partition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\b&lt;/span>ootmgr.vhd &lt;span class="nv">maximum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">32&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>fixed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="k">select&lt;/span> vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\b&lt;/span>ootmgr.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; attach vdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; convert mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create partition primary
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; format &lt;span class="nv">fs&lt;/span>&lt;span class="o">=&lt;/span>ntfs quick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; assign &lt;span class="nv">letter&lt;/span>&lt;span class="o">=&lt;/span>f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the &lt;code>bootmgr&lt;/code> VHD is mounted at &lt;code>F:&lt;/code>. Then write the boot record and create boot configuration files.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bootsect /nt60 f: /mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; bcdboot c:&lt;span class="se">\W&lt;/span>indows /l en-us /s f: /f bios
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fixing-the-bcd-entry">Fixing the BCD Entry&lt;/h3>
&lt;p>At this point it should be working according to the &lt;a class="link" href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/boot-to-vhd--native-boot--add-a-virtual-hard-disk-to-the-boot-menu" target="_blank" rel="noopener"
>Microsoft&amp;rsquo;s document&lt;/a>. In fact it is not.&lt;/p>
&lt;p>Let&amp;rsquo;s check the BCD entries, in a command window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /store f:&lt;span class="se">\B&lt;/span>oot&lt;span class="se">\B&lt;/span>CD /enum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows Boot Manager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">identifier &lt;span class="o">{&lt;/span>bootmgr&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">device &lt;span class="nv">partition&lt;/span>&lt;span class="o">=&lt;/span>F:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description Windows Boot Manager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locale en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inherit &lt;span class="o">{&lt;/span>globalsettings&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">default &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resumeobject &lt;span class="o">{&lt;/span>fcd67427-e033-11eb-8826-cdf90e3873d0&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">displayorder &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">toolsdisplayorder &lt;span class="o">{&lt;/span>memdiag&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timeout &lt;span class="m">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows Boot Loader
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">identifier &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">device &lt;span class="nv">partition&lt;/span>&lt;span class="o">=&lt;/span>C:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">path &lt;span class="se">\W&lt;/span>indows&lt;span class="se">\s&lt;/span>ystem32&lt;span class="se">\w&lt;/span>inload.exe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description Windows &lt;span class="m">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locale en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inherit &lt;span class="o">{&lt;/span>bootloadersettings&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">osdevice &lt;span class="nv">partition&lt;/span>&lt;span class="o">=&lt;/span>C:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemroot &lt;span class="se">\W&lt;/span>indows
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resumeobject &lt;span class="o">{&lt;/span>fcd67427-e033-11eb-8826-cdf90e3873d0&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nx OptIn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">detecthal Yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>device&lt;/code> and &lt;code>osdevice&lt;/code> seems to be right but once the Windows VHD is unmounted it becomes &lt;code>unknown&lt;/code>. According to this &lt;a class="link" href="http://www.mistyprojects.co.uk/documents/BCDEdit/files/device.htm" target="_blank" rel="noopener"
>BCDEdit notes&lt;/a>, BCD entry records the partition&amp;rsquo;s information such as UUID to find the correct partition during bootup. In this case the partition can&amp;rsquo;t be found until the VHD file is mounted. But this VHD file is not mounted automatically.&lt;/p>
&lt;p>Thus we need to correct this and let &lt;code>Bootmgr&lt;/code> locate the VHD file properly.&lt;/p>
&lt;p>In a command line window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># The identifier must match the one which is showing above&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /store C:&lt;span class="se">\B&lt;/span>oot&lt;span class="se">\B&lt;/span>CD /set &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span> device &lt;span class="nv">vhd&lt;/span>&lt;span class="o">=[&lt;/span>D:&lt;span class="o">]&lt;/span>&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /store C:&lt;span class="se">\B&lt;/span>oot&lt;span class="se">\B&lt;/span>CD /set &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span> osdevice &lt;span class="nv">vhd&lt;/span>&lt;span class="o">=[&lt;/span>D:&lt;span class="o">]&lt;/span>&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we check the BCD entry again it doesn&amp;rsquo;t change. But if we unmount the Windows VHD it will become:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /store f:&lt;span class="se">\B&lt;/span>oot&lt;span class="se">\B&lt;/span>CD /enum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows Boot Manager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">identifier &lt;span class="o">{&lt;/span>bootmgr&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">device &lt;span class="nv">partition&lt;/span>&lt;span class="o">=&lt;/span>E:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description Windows Boot Manager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locale en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inherit &lt;span class="o">{&lt;/span>globalsettings&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">default &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resumeobject &lt;span class="o">{&lt;/span>fcd67427-e033-11eb-8826-cdf90e3873d0&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">displayorder &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">toolsdisplayorder &lt;span class="o">{&lt;/span>memdiag&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timeout &lt;span class="m">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows Boot Loader
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">identifier &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">device &lt;span class="nv">vhd&lt;/span>&lt;span class="o">=[&lt;/span>C:&lt;span class="o">]&lt;/span>&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">path &lt;span class="se">\W&lt;/span>indows&lt;span class="se">\s&lt;/span>ystem32&lt;span class="se">\w&lt;/span>inload.exe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description Windows &lt;span class="m">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locale en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inherit &lt;span class="o">{&lt;/span>bootloadersettings&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">osdevice &lt;span class="nv">vhd&lt;/span>&lt;span class="o">=[&lt;/span>C:&lt;span class="o">]&lt;/span>&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemroot &lt;span class="se">\W&lt;/span>indows
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resumeobject &lt;span class="o">{&lt;/span>fcd67427-e033-11eb-8826-cdf90e3873d0&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nx OptIn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">detecthal Yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The volume letter doesn&amp;rsquo;t matter, it changes dynamically. Now &lt;code>bootmgr&lt;/code> is able to locate the VHD file correctly.&lt;/p>
&lt;h2 id="adding-windows-to-grub">Adding Windows to GRUB&lt;/h2>
&lt;p>Restart PC and get into Linux.&lt;/p>
&lt;p>Modify the GRUB config file to load &lt;code>bootmgr&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Adding Windows (bootmgr) entry to GRUB. 1DB1-9C31 is the boot partition&amp;#39;s UUID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/grub.d/40_custom
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">menuentry &amp;#34;Windows 7&amp;#34; {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> search --set=root --no-floppy --fs-uuid 1DB1-9C31
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> linux16 /memdisk harddisk
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> initrd16 /bootmgr.vhd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Updating GRUB entries&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can restart PC. Keep pressing &lt;code>shift&lt;/code> on bootup to go to the GRUB menu. Select Windows entry to boot Windows.&lt;/p>
&lt;h2 id="fixing-windows-initialization-error">Fixing Windows Initialization Error&lt;/h2>
&lt;p>During the first time bootup, Windows might have an error showing&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">Windows could not complete the installation. To install Windows on this computer, restart the installation.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To &lt;a class="link" href="https://www.howisolve.com/windows-could-not-complete-the-installation-solved/" target="_blank" rel="noopener"
>solve&lt;/a> this error:&lt;/p>
&lt;ol>
&lt;li>Press &lt;code>SHIFT + F10&lt;/code> to bring up the command prompt.&lt;/li>
&lt;li>Execute &lt;code>C:\windows\system32\oobe\msoobe&lt;/code>.&lt;/li>
&lt;li>Wait for a while and the setup window will show up.&lt;/li>
&lt;li>Complete the setup and restart.&lt;/li>
&lt;/ol>
&lt;h2 id="creating-a-differencing-disk">Creating a Differencing Disk&lt;/h2>
&lt;p>A differencing disk can be used for quick recoveries.&lt;/p>
&lt;p>To create it, restart into the Windows PE environment. In a command line window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Use the original VHD as base&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; move d:&lt;span class="se">\w&lt;/span>indows7.vhd d:&lt;span class="se">\w&lt;/span>indows7_base.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a differencing disk based on the original one&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># The name of the new differencing disk has to be the name that was recorded in the BCD&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; diskpart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; creat vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\w&lt;/span>indows7.vhd &lt;span class="nv">parent&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\w&lt;/span>indows7_base.vhd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then all changes made in the future will go into the differencing disk. If system goes wrong one day, simply deleting the the differencing disk and creating a new one would quickly recover from the crysis.&lt;/p>
&lt;p>&lt;strong>NOTE: After creating the differencing disk, the base VHD is not supposed to be modified.&lt;/strong>&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a class="link" href="https://wiki.archlinux.org/title/GRUB" target="_blank" rel="noopener"
>GRUB wiki&lt;/a>
&lt;a class="link" href="https://wzyboy.im/post/1049.html" target="_blank" rel="noopener"
>BIOS + GPT + GRUB + Linux + Windows 折腾笔记&lt;/a>
&lt;a class="link" href="https://rimo.site/2017/02/08/install-win7-into-vhd/" target="_blank" rel="noopener"
>在 VHD 中安装 Windows 7&lt;/a>
&lt;a class="link" href="http://reboot.pro/index.php?showtopic=19516&amp;amp;page=2&amp;amp;#entry184489" target="_blank" rel="noopener"
>Hack Bootmgr to boot Windows in BIOS to GPT&lt;/a>
&lt;a class="link" href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/boot-to-vhd--native-boot--add-a-virtual-hard-disk-to-the-boot-menu" target="_blank" rel="noopener"
>Boot to a virtual hard disk: Add a VHDX or VHD to the boot menu&lt;/a>
&lt;a class="link" href="http://www.mistyprojects.co.uk/documents/BCDEdit/files/device.htm" target="_blank" rel="noopener"
>BCDEdit notes&lt;/a>
&lt;a class="link" href="https://www.howisolve.com/windows-could-not-complete-the-installation-solved/" target="_blank" rel="noopener"
>100% Solved:Windows could not complete the installation&lt;/a>&lt;/p></description></item><item><title>Fix Metadata in Google Photo Takeout</title><link>https://peromage.github.io/blog/fix-metadata-in-google-photo-takeout/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/fix-metadata-in-google-photo-takeout/</guid><description>&lt;p>Google Photo sucks.&lt;/p>
&lt;h2 id="troubles">Troubles&lt;/h2>
&lt;p>When exporting photos from Google Photo, a bunch of JSON files come with your photos. Those JSON files contain metadata which is supposed to be stored with your photo files. If you simple import those photo files into another photo manager you will most likely not get a chronological view. Obviously, Google does on purpose so that you will not leave it easily.
However, there is a workaround that is able to merge those metadata into your photos.&lt;/p>
&lt;h2 id="restore-the-metadate">Restore the Metadate&lt;/h2>
&lt;ol>
&lt;li>Get &lt;code>exiftool&lt;/code>: &lt;a class="link" href="https://github.com/exiftool/exiftool" target="_blank" rel="noopener"
>https://github.com/exiftool/exiftool&lt;/a>&lt;/li>
&lt;li>Export your Google Photos and extract the downloaded compressed files into a folder&lt;/li>
&lt;li>Save the following content to &lt;code>fix-args.txt&lt;/code>&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Usage: exiftool -@ fix-args.txt &amp;lt;takeout_dir&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-r&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">%s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-tagsFromFile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">%d/%F.json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-ext *&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">--ext json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-overwrite_original&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-progress&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSAltitude&amp;lt;GeoDataAltitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSLatitude&amp;lt;GeoDataLatitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSLongitude&amp;lt;GeoDataLongitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-DateTimeOriginal&amp;lt;PhotoTakenTimeTimestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-ModifyDate&amp;lt;PhotoLastModifiedTimeTimestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-CreateDate&amp;lt;CreationTimeTimestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSAltitudeRef&amp;lt;GeoDataAltitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSLatitudeRef&amp;lt;GeoDataLatitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSLongitudeRef&amp;lt;GeoDataLongitude&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Execute&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ exiftool -@ fix-args.txt &amp;lt;takeout_dir&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Delete JSON files and import your photos to somewhere else&lt;/li>
&lt;/ol>
&lt;p>This argument file contains the fields that are meaningful to me. If you need to merge additional fields you can append them to the last. For details, check the man page of &lt;code>exiftool&lt;/code>.&lt;/p></description></item><item><title>Minimalist's Multi-boot USB Drive</title><link>https://peromage.github.io/blog/minimalists-multi-boot-usb-drive/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/minimalists-multi-boot-usb-drive/</guid><description>&lt;h2 id="story">Story&lt;/h2>
&lt;p>Recently I&amp;rsquo;ve realized a fact that I always have needs to keep a multi-boot USB in my pocket for either Linux or Windows installation. There are a lot tools out there already but I don&amp;rsquo;t really like them. At least, I mean, they are too flashy to me. A beautiful boot menu seems not to be attractive. What I need is just a simple and practical maybe a little ugly boot device. It should be minimalist. More importantly, it has to be easy to setup with the tools on the system already and maintainable. No funky scripts.&lt;/p>
&lt;h2 id="old-solution-clunky">Old Solution - Clunky&lt;/h2>
&lt;p>I&amp;rsquo;ve been using this solution for a very long time. Setup is pretty straight forward.&lt;/p>
&lt;p>The partition scheme used on the USB drive is like (GPT):&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Partition&lt;/th>
&lt;th>Size&lt;/th>
&lt;th>Filesystem&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>/dev/sda1&lt;/td>
&lt;td>100 GB&lt;/td>
&lt;td>NTFS&lt;/td>
&lt;td>Data partition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda2&lt;/td>
&lt;td>512 MB&lt;/td>
&lt;td>FAT&lt;/td>
&lt;td>EFI partition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda3&lt;/td>
&lt;td>1 MB&lt;/td>
&lt;td>No filesystem&lt;/td>
&lt;td>BIOS boot partition used by GRUB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda4&lt;/td>
&lt;td>8 GB&lt;/td>
&lt;td>NTFS&lt;/td>
&lt;td>Windows ISO files&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda5&lt;/td>
&lt;td>2 GB&lt;/td>
&lt;td>FAT&lt;/td>
&lt;td>Arch Linux ISO files&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>So the idea is having a big data partition at the front for better access, then installing GRUB files on the second EFI partition with both EFI and BIOS support (Implemented by the third BIOS boot partition. The partition order doesn&amp;rsquo;t matter). Finally, create dedicated partitions to contain the extracted files from installation ISOs.&lt;/p>
&lt;p>When the USB drive is plugged in, I can use grub command line to chainload the EFI file that is located in the ISO partition, or the VBR if it&amp;rsquo;s booted with legacy mode.&lt;/p>
&lt;p>Well, it&amp;rsquo;s usable but I still feel that it is too much for a small USB drive - too many partitions. If I plug the drive in for just data exchange, there would be a a bunch of partitions mounted and the notification is quite annoying. So I started thinking that there must be a simpler way to do it.&lt;/p>
&lt;h2 id="new-solution-much-better">New Solution - Much Better&lt;/h2>
&lt;h3 id="partitioning">Partitioning&lt;/h3>
&lt;p>The goal is simplicity so the new partition scheme is like this:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Partition&lt;/th>
&lt;th>Size&lt;/th>
&lt;th>Filesystem&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>/dev/sda1&lt;/td>
&lt;td>100 GB&lt;/td>
&lt;td>NTFS&lt;/td>
&lt;td>Data partition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda2&lt;/td>
&lt;td>512 MB&lt;/td>
&lt;td>FAT&lt;/td>
&lt;td>EFI partition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda3&lt;/td>
&lt;td>1 MB&lt;/td>
&lt;td>No filesystem&lt;/td>
&lt;td>BIOS boot partition used by GRUB (Optional)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The third BIOS boot partition is not really necessary since most of computers nowadays are using UEFI. If you really need the legacy compatibility, you can create one. I&amp;rsquo;ll keep it for now.&lt;/p>
&lt;h3 id="installing-grub">Installing GRUB&lt;/h3>
&lt;p>Typical GRUB insallation but install for both EFI and BIOS.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo mount /dev/sda2 /mnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo grub-install --target&lt;span class="o">=&lt;/span>x86_64-efi --efi-directory&lt;span class="o">=&lt;/span>/mnt --boot-directory&lt;span class="o">=&lt;/span>/mnt --removable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo grub-install --target&lt;span class="o">=&lt;/span>i386-pc --boot-directory&lt;span class="o">=&lt;/span>/mnt /dev/sda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Don&amp;rsquo;t forget to create a GRUB menu config file. Otherwise GRUB will boot into its command line interface (If you know what you&amp;rsquo;re doing). It&amp;rsquo;s a good idea to put a editable config file in the data partition since it will be the most used partition. However, GRUB reads the file in the EFI partition by default: &lt;code>(esp)/grub/grub.cfg&lt;/code>. We can tell GRUB to read out custom config file after that.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># (esp)/grub/grub.cfg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">configfile /boot.cfg&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thus we are done with the EFI partition. All the menu configuration will go into &lt;code>boot.cfg&lt;/code> in the data partition.&lt;/p>
&lt;h3 id="linux-installer">Linux Installer&lt;/h3>
&lt;p>Most of modern Linux distros support booting from a loop device. That is to say, we don&amp;rsquo;t have to extract the content of ISO files. Using GRUB &lt;code>loopback&lt;/code> command can easily mount a ISO and boot from there. But chainloading the EFI or VBF is not possible. Based on the &lt;a class="link" href="https://www.gnu.org/software/grub/manual/grub/grub.html#Loopback-booting" target="_blank" rel="noopener"
>GRUB manual&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>GRUB is able to read from an image (be it one of CD or HDD) stored on any of its accessible storages (refer to see loopback command). However the OS itself should be able to find its root. This usually involves running a userspace program running before the real root is discovered.&lt;/p>
&lt;/blockquote>
&lt;p>EFI bootloader usually will fail to find the root device by this method. However, we can manually load the kernel and ramdisk in which we can specify the root device by ourselves.&lt;/p>
&lt;h4 id="load-linux-iso">Load Linux ISO&lt;/h4>
&lt;p>I&amp;rsquo;m using Arch Linux here for example.&lt;/p>
&lt;ol>
&lt;li>Put the ISO file to &lt;code>(data)/images/archlinux-2022.01.01-x86_64.iso&lt;/code>.&lt;/li>
&lt;li>Mount ISO. We need to find the kernel loading parameters.&lt;/li>
&lt;li>In the file &lt;code>(arch)/syslinux/archiso_sys-linux.cfg&lt;/code> we would see&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copy to RAM boot option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">LABEL arch64ram&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">TEXT HELP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Boot the Arch Linux install medium on BIOS with Copy-to-RAM option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">It allows you to install Arch Linux or perform system maintenance.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ENDTEXT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">MENU LABEL Arch Linux install medium (x86_64, BIOS, Copy to RAM)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">LINUX /arch/boot/x86_64/vmlinuz-linux&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">INITRD /arch/boot/intel-ucode.img,/arch/boot/amd-ucode.img,/arch/boot/x86_64/initramfs-linux.img&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">APPEND archisobasedir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">arch archisolabel=ARCH_202201 copytoram&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is a &lt;code>syslinux&lt;/code> config file. Parameters after &lt;code>APPEND&lt;/code> are the ones that we&amp;rsquo;re looking for.&lt;/p>
&lt;p>Then add the following content to &lt;code>(data)/boot.cfg&lt;/code>. When copying the &lt;code>initrd&lt;/code> parameters, don&amp;rsquo;t forget to remove commas.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Archiso 202201 RAM&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> loopback loop /images/archlinux-2022.01.01-x86_64.iso
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> set root=(loop)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> linux /arch/boot/x86_64/vmlinuz-linux archisobasedir=arch archisolabel=ARCH_202201 copytoram
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> initrd /arch/boot/intel-ucode.img /arch/boot/amd-ucode.img /arch/boot/x86_64/initramfs-linux.img&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then the Linux installer is done. If we need more distros, the process is similar.&lt;/p>
&lt;h3 id="windows-installer">Windows Installer&lt;/h3>
&lt;p>I prefer to use NTFS as my data partition&amp;rsquo;s file system because it works on both Linux and Windows, and supports big files. Also I usually just keep one copy of Windows installer so for Windows, I can simply dump the ISO content to the data partition&amp;rsquo;s root. I don&amp;rsquo;t mind the extra a few folders there. Plus some of them can be safely deleted. Then chainloading from GRUB is possible.&lt;/p>
&lt;p>In &lt;code>(data)/boot.cfg&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Windows 10 Installer&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> chainloader /efi/boot/bootx64.efi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="windows-pe">Windows PE&lt;/h3>
&lt;p>Alternatively, I can directly boot from a small WinPE image and use &lt;code>dism&lt;/code> command to extract &lt;code>install.wim&lt;/code> to the target without accepting the annoying Windows partition scheme (You know what I&amp;rsquo;m talking about).&lt;/p>
&lt;p>To create a PE image we need a Windows environment and a CMD window with admin privilege.&lt;/p>
&lt;p>Create a virtual disk to contain PE files. Assigned with volume letter &lt;code>P:\&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; diskpart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>c:&lt;span class="se">\w&lt;/span>inpe.vhd &lt;span class="nv">maximum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2000&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>fixed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="k">select&lt;/span> vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>c:&lt;span class="se">\w&lt;/span>inpe.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; attach vdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; convert mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create partition primary
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; format &lt;span class="nv">fs&lt;/span>&lt;span class="o">=&lt;/span>ntfs quick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; assign &lt;span class="nv">letter&lt;/span>&lt;span class="o">=&lt;/span>p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then mount the Windows installer ISO. Assuming the assigned volume is &lt;code>G:\&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; dism /apply-image /imagefile:g:&lt;span class="se">\s&lt;/span>ources&lt;span class="se">\b&lt;/span>oot.wim /index:1 /applydir:p:&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&amp;gt; dism /image:p:&lt;span class="se">\ &lt;/span>/set-targetpath:x:&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&amp;gt; dism /image:p:&lt;span class="se">\ &lt;/span>/set-inputlocale:en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; dism /image:p:&lt;span class="se">\ &lt;/span>/set-userlocale:en-us
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Assign EFI partition with volume letter &lt;code>E:\&lt;/code>.&lt;/p>
&lt;p>Before creating the bootloader for Windows PE, we need to backup our GRUB EFI file (Windows PE bootloader will overwrite it). Rename &lt;code>E:\EFI&lt;/code> to &lt;code>E:\EFI-grub&lt;/code>.&lt;/p>
&lt;p>Create Windows PE bootloader.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdboot p:&lt;span class="se">\W&lt;/span>indows /l en-us /s e: /f uefi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then merge both &lt;code>E:\EFI&lt;/code> and &lt;code>E:\EFI-grub&lt;/code>. If it prompts overwriting &lt;code>E:\EFI\Boot\bootx64.efi&lt;/code>, confirm with yes.&lt;/p>
&lt;p>Then add following content to &lt;code>(data)/boot.cfg&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Windows PE&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> chainloader /EFI/Microsoft/Boot/bootmgfw.efi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="loading-any-iso">Loading Any ISO&lt;/h3>
&lt;p>Some ISO is capable to be loaded directly into memory. The size of the ISO file is critical. Generally it should not exceed the physical memory. This can be done by &lt;code>memdisk&lt;/code> from &lt;code>syslinux&lt;/code>.&lt;/p>
&lt;p>Copy the &lt;code>memdisk&lt;/code> into the EFI partition.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo cp /usr/lib/syslinux/bios/memdisk &lt;span class="o">(&lt;/span>esp&lt;span class="o">)&lt;/span>/memdisk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then put the following content to &lt;code>(data)/boot.cfg&lt;/code>. For example, loading a Windows PE ISO.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Windows PE ISO&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> linux16 memdisk iso ro
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> initrd16 /images/winpe.iso&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-end">The End&lt;/h2>
&lt;p>Finally I&amp;rsquo;m very satisfied with this new USB drive. Yay!&lt;/p></description></item><item><title>Setup A Gaming VM</title><link>https://peromage.github.io/blog/setup-a-gaming-vm/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/setup-a-gaming-vm/</guid><description>&lt;h2 id="before-starting">Before starting&lt;/h2>
&lt;p>First thing first. I&amp;rsquo;ve been rarely using Windows over years except for working and gaming. Linux community grows fast and there are a lot alternatives available. On the contrary, Windows gets crapy every year (Office 365 is still good IMO) so there is no reason to run this huge spyware all the time.&lt;/p>
&lt;p>Modern PCs are strong enough to run a VM. Besides most of PCs have both integrated and descret graphic cards. This setup is perfect for gaming VM which requires PCI passthrough.&lt;/p>
&lt;p>In this post, I&amp;rsquo;m not going to explain everything because the ArchWiki is clear enough already. This is just a quick guide for the setup.&lt;/p>
&lt;p>NOTE: Avoid Intel K series CPUs which usually don&amp;rsquo;t have integrated graphic card.&lt;/p>
&lt;h2 id="get-started">Get started&lt;/h2>
&lt;h3 id="identify-your-pc-is-qualified">Identify your PC is qualified&lt;/h3>
&lt;p>To get high graphic performance, your CPU and motherboard must support &lt;code>VT-d&lt;/code> and &lt;code>IOMMU&lt;/code> respectively.&lt;/p>
&lt;p>If not, you can stop here and choose the traditional way to dual-boot Linux and Windows.&lt;/p>
&lt;p>NOTE: you can check &lt;a class="link" href="https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF" target="_blank" rel="noopener"
>PCI passthrough via OVMF&lt;/a> prerequisite section for more information.&lt;/p>
&lt;h3 id="install-qemu">Install QEMU&lt;/h3>
&lt;p>I wrote a script to handle this automatically so just run &lt;a class="link" href="https://github.com/peromage/rice/blob/master/scripts/install-qemu.sh" target="_blank" rel="noopener"
>this script&lt;/a> before hands.&lt;/p>
&lt;p>NOTE: I&amp;rsquo;m using Arch Linux.&lt;/p>
&lt;h3 id="identify-discrete-graphic-card">Identify discrete graphic card&lt;/h3>
&lt;p>In a terminal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ lspci -nnk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">01:00.0 VGA compatible controller &lt;span class="o">[&lt;/span>0300&lt;span class="o">]&lt;/span>: NVIDIA Corporation GM204 &lt;span class="o">[&lt;/span>GeForce GTX 970&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>10de:13c2&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>rev a1&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Subsystem: Gigabyte Technology Co., Ltd Device &lt;span class="o">[&lt;/span>1458:367a&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Kernel driver in use: nouveau
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Kernel modules: nouveau
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">01:00.1 Audio device &lt;span class="o">[&lt;/span>0403&lt;span class="o">]&lt;/span>: NVIDIA Corporation GM204 High Definition Audio Controller &lt;span class="o">[&lt;/span>10de:0fbb&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>rev a1&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Subsystem: Gigabyte Technology Co., Ltd Device &lt;span class="o">[&lt;/span>1458:367a&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Kernel driver in use: snd_hda_intel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Kernel modules: snd_hda_intel
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Take a note of the device IDs. In this example I have a Nvidia GTX970 graphic card along with a audio controller. They belong to the same group (domain) you have to take them all.&lt;/p>
&lt;p>In this case I got &lt;code>1458:367a&lt;/code> and &lt;code>1458:367a&lt;/code>. These are the PCI devices that will be passed through to the VM. Other PCI devices can be passed too.&lt;/p>
&lt;h3 id="modify-kernel-parameter">Modify kernel parameter&lt;/h3>
&lt;p>Then we&amp;rsquo;re going to turn IOMMU on and prevent host Linux loading PCI devices that we want to pass-through to the VM.&lt;/p>
&lt;p>The kernel parameter passing could be different depending on the bootloader you use. In this example, I use &lt;code>grub&lt;/code>.&lt;/p>
&lt;p>Open &lt;code>/etc/default/grub&lt;/code> with your favorite text editor. You have to add &lt;code>intel_iommu=on&lt;/code> to the kernel parameter along with &lt;code>vfio-pci.ids=10de:13c2,10de:0fbb&lt;/code> which contains the device IDs you got from the previous step.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># /etc/default/grub&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Change this line&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">GRUB_CMDLINE_LINUX_DEFAULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;loglevel=3 quiet&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># To&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">GRUB_CMDLINE_LINUX_DEFAULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;loglevel=3 quiet intel_iommu=on vfio-pci.ids=10de:13c2,10de:0fbb&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then update the bootloader config file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The most tricky part is done. Restart the PC now.&lt;/p>
&lt;p>NOTE: You can check &lt;code>dmesg&lt;/code> after reboot to verify IOMMU is turned on successfully.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo dmesg &lt;span class="p">|&lt;/span> grep -i -e DMAR -e IOMMU
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.000000&lt;span class="o">]&lt;/span> ACPI: DMAR 0x00000000BDCB1CB0 0000B8 &lt;span class="o">(&lt;/span>v01 INTEL BDW &lt;span class="m">00000001&lt;/span> INTL 00000001&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.000000&lt;span class="o">]&lt;/span> Intel-IOMMU: enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.028879&lt;span class="o">]&lt;/span> dmar: IOMMU 0: reg_base_addr fed90000 ver 1:0 cap c0000020660462 ecap f0101a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.028883&lt;span class="o">]&lt;/span> dmar: IOMMU 1: reg_base_addr fed91000 ver 1:0 cap d2008c20660462 ecap f010da
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.028950&lt;span class="o">]&lt;/span> IOAPIC id &lt;span class="m">8&lt;/span> under DRHD base 0xfed91000 IOMMU &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.536212&lt;span class="o">]&lt;/span> DMAR: No ATSR found
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.536229&lt;span class="o">]&lt;/span> IOMMU &lt;span class="m">0&lt;/span> 0xfed90000: using Queued invalidation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.536230&lt;span class="o">]&lt;/span> IOMMU &lt;span class="m">1&lt;/span> 0xfed91000: using Queued invalidation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.536231&lt;span class="o">]&lt;/span> IOMMU: Setting RMRR:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.536241&lt;span class="o">]&lt;/span> IOMMU: Setting identity map &lt;span class="k">for&lt;/span> device 0000:00:02.0 &lt;span class="o">[&lt;/span>0xbf000000 - 0xcf1fffff&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.537490&lt;span class="o">]&lt;/span> IOMMU: Setting identity map &lt;span class="k">for&lt;/span> device 0000:00:14.0 &lt;span class="o">[&lt;/span>0xbdea8000 - 0xbdeb6fff&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.537512&lt;span class="o">]&lt;/span> IOMMU: Setting identity map &lt;span class="k">for&lt;/span> device 0000:00:1a.0 &lt;span class="o">[&lt;/span>0xbdea8000 - 0xbdeb6fff&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.537530&lt;span class="o">]&lt;/span> IOMMU: Setting identity map &lt;span class="k">for&lt;/span> device 0000:00:1d.0 &lt;span class="o">[&lt;/span>0xbdea8000 - 0xbdeb6fff&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.537543&lt;span class="o">]&lt;/span> IOMMU: Prepare 0-16MiB unity mapping &lt;span class="k">for&lt;/span> LPC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 0.537549&lt;span class="o">]&lt;/span> IOMMU: Setting identity map &lt;span class="k">for&lt;/span> device 0000:00:1f.0 &lt;span class="o">[&lt;/span>0x0 - 0xffffff&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> 2.182790&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>drm&lt;span class="o">]&lt;/span> DMAR active, disabling use of stolen memory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="install-the-vm">Install the VM&lt;/h3>
&lt;p>Open virt-manager GUI and follow the guide to setup.&lt;/p>
&lt;p>Some settings should be tweaked specifically:&lt;/p>
&lt;ul>
&lt;li>Overview: Change &lt;em>Firmware&lt;/em> to &lt;code>UEFI&lt;/code>&lt;/li>
&lt;li>CPUs:
&lt;ul>
&lt;li>Change &lt;em>vCPU allocation&lt;/em> to the maximal host CPUs. In this case, it&amp;rsquo;s &lt;code>8&lt;/code>&lt;/li>
&lt;li>Unselect &lt;em>Copy host CPU configuration&lt;/em> and change &lt;em>Model&lt;/em> to &lt;code>host-passthrough&lt;/code>&lt;/li>
&lt;li>Select &lt;em>Manually set CPU topology&lt;/em>. Change &lt;em>Sockets&lt;/em> to &lt;code>1&lt;/code>, &lt;em>Cores&lt;/em> to &lt;code>4&lt;/code>, &lt;em>Threads&lt;/em> to &lt;code>2&lt;/code> (Physical core &lt;code>4&lt;/code> * threads for each core &lt;code>2&lt;/code>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Disk: Change &lt;em>Disk bus&lt;/em> to &lt;code>VirtIO&lt;/code>&lt;/li>
&lt;li>Display Spice: You don&amp;rsquo;t really need it so remove it&lt;/li>
&lt;li>Video: Change to None&lt;/li>
&lt;li>PCI: Add your discrete graphic card as well as anything with it (audio controller etc.)&lt;/li>
&lt;li>USB: Mouse, keyboards, game controllers etc.&lt;/li>
&lt;/ul>
&lt;p>After saving the settins, the installation should start but don&amp;rsquo;t install Windows yet. Instead, force power if off. Open VM settings in XML view, add following content to prevent Nvidia driver installer discovering the VM environment.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;features&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;hyperv&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;vendor_id&lt;/span> &lt;span class="na">state=&lt;/span>&lt;span class="s">&amp;#39;on&amp;#39;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#39;1234567890ab&amp;#39;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/hyperv&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;kvm&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;hidden&lt;/span> &lt;span class="na">state=&lt;/span>&lt;span class="s">&amp;#39;on&amp;#39;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/kvm&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/features&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, this has the same effect.&lt;/p>
&lt;p>NOTE: &lt;code>win11&lt;/code> is the VM name you&amp;rsquo;ve just created.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo virshpatcher --error43 --vender-id 1234567890ab win11
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="install-virtio-drivers">Install virtio drivers&lt;/h3>
&lt;p>In the Windows VM, download the &lt;a class="link" href="https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md" target="_blank" rel="noopener"
>virtio driver&lt;/a> and install it.&lt;/p>
&lt;p>NOTE: Check &lt;a class="link" href="https://wiki.archlinux.org/title/QEMU" target="_blank" rel="noopener"
>ArchWiki QEMU&lt;/a> for more info&lt;/p>
&lt;h2 id="post-installation">Post installation&lt;/h2>
&lt;p>If you don&amp;rsquo;t want to switch monitors you can try &lt;a class="link" href="https://looking-glass.io/" target="_blank" rel="noopener"
>Looking Glass&lt;/a> which allows you redirect VM display output to a emulated monitor.&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;p>[&lt;a class="link" href="https://github.com/peromage/rice/blob/master/scripts/install-qemu.sh" target="_blank" rel="noopener"
>QEMU install script&lt;/a>
&lt;a class="link" href="https://wiki.archlinux.org/title/QEMU" target="_blank" rel="noopener"
>ArchWiki QEMU&lt;/a>
&lt;a class="link" href="https://wiki.archlinux.org/title/PCI_passthrough_via_OVMF" target="_blank" rel="noopener"
>ArchWiki OVMF&lt;/a>
&lt;a class="link" href="https://looking-glass.io/" target="_blank" rel="noopener"
>Looking Glass&lt;/a>
&lt;a class="link" href="https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md" target="_blank" rel="noopener"
>Virtio driver&lt;/a>&lt;/p></description></item><item><title>Shadowsocks Quick Setup</title><link>https://peromage.github.io/blog/shadowsocks-quick-setup/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/shadowsocks-quick-setup/</guid><description>&lt;p>This note is written for my personal convenience.&lt;/p>
&lt;h2 id="server-setup">Server Setup&lt;/h2>
&lt;h3 id="installation">Installation&lt;/h3>
&lt;p>Use system package manager to install &lt;code>shadowsocks-libev&lt;/code>. In this case, for Arch Linux it is &lt;code>pacman&lt;/code>.&lt;/p>
&lt;p>There is also a Python package which can be installed by &lt;code>pip&lt;/code> but it seems not to be maintained for a long time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo pacman -S shadowsocks-libev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="shadowsocks-server-configuration">Shadowsocks Server Configuration&lt;/h3>
&lt;p>Config file is located at &lt;code>/etc/shadowsocks/myserver.json&lt;/code>. On FreeBSD it is &lt;code>/usr/local/etc/shadowsocks/myserver.json&lt;/code>&lt;/p>
&lt;p>The file name can vary.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;server&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;0.0.0.0&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;server_port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">8388&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;mypassword&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;timeout&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;method&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;chacha20-ietf-poly1305&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;fast_open&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;workers&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;nameserver&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;8.8.8.8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note&lt;/strong>: For server, &lt;code>&amp;quot;local_address&amp;quot;: &amp;quot;127.0.0.1&amp;quot;&lt;/code> and &lt;code>&amp;quot;local_port&amp;quot;: 1080&lt;/code> would cause problems so don&amp;rsquo;t them.&lt;/p>
&lt;h3 id="start-the-server-as-a-system-service">Start the Server as A System Service&lt;/h3>
&lt;p>The server can be started in the background but it&amp;rsquo;s not persistent after reboot.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ss-server -c /etc/shadowsocks/myserver.json &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Use &lt;code>systemd&lt;/code> to make it run automatically.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: The config file name has to be placed after &lt;code>@&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo systemctl &lt;span class="nb">enable&lt;/span> shadowsocks-libev-server@myserver
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo systemctl start shadowsocks-libev-server@myserver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="client-helper">Client Helper&lt;/h2>
&lt;h3 id="ss-access-key-generation-script--bash-script">SS Access Key Generation Script (Bash Script)&lt;/h3>
&lt;p>This script will prompt you to input parameters that are in the config file to generate a base64 encoded link.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/usr/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1"># Usage: this_script.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s1">&amp;#39;Method: &amp;#39;&lt;/span> -r ss_method
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s1">&amp;#39;Password: &amp;#39;&lt;/span> -r ss_password
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s1">&amp;#39;Server IP: &amp;#39;&lt;/span> -r ss_server_ip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s1">&amp;#39;Server Port: &amp;#39;&lt;/span> -r ss_server_port
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ss://&amp;#34;&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ss_method&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ss_password&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">@&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ss_server_ip&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ss_server_port&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> base64&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ss-access-key-generation-script--javascript">SS Access Key Generation Script (JavaScript)&lt;/h3>
&lt;p>This approch requires Node.js but it can parse config file automatically.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Usage: node this_script.js &amp;lt;config_file&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">argv&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">argv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">argv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;nothing&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">config_file&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">config_json&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">config_file&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">ss_url&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;ss://&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">btoa&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">config_json&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;method&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">:&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">config_json&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;password&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">@&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">config_json&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;server&amp;#39;&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">:&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">config_json&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;server_port&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ss_url&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>SSH Over GPG Agent</title><link>https://peromage.github.io/blog/ssh-over-gpg-agent/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/ssh-over-gpg-agent/</guid><description>&lt;p>This is a quick note of &lt;code>gpg-agent&lt;/code> setup for SSH.&lt;/p>
&lt;h2 id="quick-setup">Quick Setup&lt;/h2>
&lt;ol>
&lt;li>Import your GPG authentication key.&lt;/li>
&lt;li>Enable SSH support for &lt;code>gpg-agent&lt;/code>.&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> enable-ssh-support &amp;gt;&amp;gt; &lt;span class="nv">$HOME&lt;/span>/.gnupg/gpg-agent.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Get the authentication keygrip.&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ gpg -k --with-keygrip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Add the authentication key to the keychain (replace &lt;code>KEYGRIP&lt;/code> with the value obtained from the previous step)&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> KEYGRIP &amp;gt;&amp;gt; &lt;span class="nv">$HOME&lt;/span>/.gnupg/sshcontrol
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Add the following init code to &lt;code>.bashrc&lt;/code>&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">unset&lt;/span> SSH_AGENT_PID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">SSH_AUTH_SOCK&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>gpgconf --list-dirs agent-ssh-socket&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GPG_TTY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>tty&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg-connect-agent updatestartuptty /bye &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>Kill any running &lt;code>ssh-agent&lt;/code> and &lt;code>gpg-agent&lt;/code>, and then open a new Bash session.&lt;/li>
&lt;/ol>
&lt;h2 id="misc">Misc&lt;/h2>
&lt;h3 id="export-ssh-public-keys">Export SSH Public Keys&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ gpg --export-ssh-key &amp;lt;uid/fingerprint&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>