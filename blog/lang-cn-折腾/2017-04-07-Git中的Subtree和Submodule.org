#+title: Git中的Subtree和Submodule
#+date: <2017-04-07 Fri 20:53>
#+hugo_lastmod: <2022-06-04 Sat 18:55>
#+hugo_tags: git 技术笔记
#+setupfile: ./blog.conf

因为最近弄自己的博客，涉及到了版本库嵌套的问题。记下来也算是给自己一个备忘。

* 为什么有这样的需求
版本库嵌套很好理解，就是在一个 Git 仓库里面包含了其他的 Git 仓库。通常有这样的需求往往涉及到协同开发。比如这里有一个插件单独的 Git 仓库姑且叫“Plugin”。现在我创建了一个自己的项目，其中需要用到这个“Plugin”插件。通常比较笨的办法就是把插件库源码拖下来，复制到自己的项目里。但是这样当插件库更新的时候，插件源码更新往往比较麻烦。而且如果在使用的过程中修改了插件的源码，也不便于插件单独的版本控制，更别说为插件库贡献代码了。但如果插件单独以 Git 仓库存在于我的项目目录中，以上的问题就解决了。

在 Git 里面提供了两种方式实现上述需求，那就是 Subtree 和 Submodule。

* Submodule
Submodule 是 Git 里面最早提供的一种方法。顾名思义“子模块”。

** 添加子模块
执行

#+begin_src shell
$ git submodule add <repo> <module_path>
#+end_src

此时运行 =git status= 可以看到子模块对应的文件夹和一个叫做 =.gitmodules= 文件被添加进了暂存区。其中 =.gitmodules= 是用于记录子模块相关信息的。之后主项目里面的操作照常提交就可以了。

** 修改子模块
但如果在开发的途中修改了子模块的代码，需要单独到子模块对应的根目录里面进行子模块单独的提交操作。在主项目里面虽然可以看到子模块有变更，但是无法看到具体的更改操作，而是将其看作一个模块整体。一旦子模块产生了新的提交，主项目里面可以看到子模块的 HEAD 变化，从而主项目也应当产生一个新的提交以记录对应关系。
换句话说，主项目就是靠着记录子模块 HEAD 值来判断依赖的。子模块的代码最后将不会进入主项目的版本库里面（只有 HEAD 值）。

现在子模块有了新的提交，为了将服务器上的代码更新，我们只需要进入子模块对应的更目录执行 push 操作就可以了。

** 更新子模块
此时子模块上游有了新的代码，我们需要将其整合到当前的项目中。有两种方法。

在主项目根目录下运行

#+begin_src shell
$ git submodule foreach git pull
#+end_src

或者切换到子模块的根目录下面

#+begin_src shell
$ git pull
#+end_src

** 克隆项目
克隆主项目的时候子模块并不会拉取到本地，如果进入对应的目录会发现是空的。
此时应当

#+begin_src shell
$ git submodule init
#+end_src

保持最新

#+begin_src shell
$ git submodule update
#+end_src

或者可以直接一条命令搞定

#+begin_src shell
$ git clone --recursive <repo>
#+end_src

** 删除子模块
Git 中没有提供直接删除的命令，需要手动完成删除操作。

反向初始化子模块

#+begin_src shell
$ git submodule deinit --force <module_path>
#+end_src

或者直接删掉 =.git/config= 里相关信息

移除子模块

#+begin_src shell
$ git rm <module_path>
#+end_src

如果暂存区还有

#+begin_src shell
$ git rm --cached <module_path>
#+end_src

** 子模块的坑
*** 提交的坑
假设有 A B 两个人同时在开发一个项目，这个项目里面也包含了一个子模块。此时 A 修改了业务代码，同时修改了一个子模块里面的一个 bug 。A 将这次修改提交，主项目的提交里面指向了子模块新的 HEAD1 ，然后把主项目的版本库 push 到了服务器，但是没有 push 子模块。B 此时 pull 了主项目，然后 update 子模块，被告知找不到子模块的 HEAD1 。因为指向 HEAD1 的提交还在 A 本地机器上。
这就是子模块提交的坑。在多个模块存在的时候操作非常繁琐。

*** 初始化的坑
在执行 =git submodule init= ， =git submodule update= 之后，此时修改子模块可能出现 HEAD 处于游离状态的的提示。如果不注意极有可能出现丢失提交的可能。
解决办法，在以上两条命令之后执行一次检出

#+begin_src shell
$ git checkout <branch>
#+end_src

* Subtree
** 添加子项目
首先添加子项目对应的远程服务器

#+begin_src shell
$ git remote add <subrepo_name> <subrepo_remote>
#+end_src

拉取一下

#+begin_src shell
$ git fetch <subrepo_name>
#+end_src

添加子项目到父项目里面

#+begin_src shell
$ git subtree add --squash --prefix=<subrepo_path> <subrepo_name> <branch>
#+end_src

参数 =--squash= 作用在于合并子项目所有提交为一个，并 merge 到父项目的历史中，这样只会出现两个提交记录，避免子项目的提交历史污染父项目。更多讨论可以看[[http://www.fwolf.com/blog/post/246][这里]]。

** 修改子项目
添加完毕之后照常修改提交各种操作，父项目能够跟踪子项目里面的所有变更。子项目被当做一个正常的子文件夹处理。

如果现在修改了子项目里的一个 bug 并且想要反馈给上游，可以这样操作

#+begin_src shell
$ git subtree push --prefix=<subrepo_path> <subrepo_name> <bug_fixed>
#+end_src

这个操作可以将父项目里所有涉及子项目修改的提交检出。这样在远程仓库里面会出现一个叫做 /bug_fixed/ 的分支。

或者也可以这样操作

#+begin_src shell
$ git subtree split --prefix=<subrepo_path> --branch <new_branch_name>
#+end_src

这个操作跟上面一样将父项目里所有涉及子项目修改的提交检出，并且把子项目的根文件夹设为整个项目的根文件夹，然后检出为父项目的一个新的分支。

然后推送给上游

#+begin_src shell
$ git push <subrepo_remote> <new_branch_name>:<bug_fixed>
#+end_src

之后删除对应本地分支就可以了。

** 更新子项目
拉取非常方便

#+begin_src shell
$ git subtree pull --prefix=<subrepo_path> <subrepo_name> <branch>
#+end_src

** 删除子项目
因为子项目在父项目里面就是被当做一个普通的文件夹处理的，所以直接移除文件夹并提交就可以了。

* Submodule vs. Subtree
Git 官方推荐使用新的 Subtree ，事实证明的确比 Submodule 方便不少。Subtree 不会产生额外的文件，而且子项目的代码包含在父项目里面，不会出现前面提到的坑的问题。具体应用上的对比可以参考[[https://gist.github.com/kvnsmth/4688345][这篇文章]]。Subtree 对于代码迭代较快的项目尤为适合。

但也不是说 Submodule 一无是处， Submodule 在我感觉最大的意义在于可以隔离子项目的业务代码，并且记录严格的依赖关系。对于一些子模块更新较慢的项目还是比较适合的。

* 参考
[[https://gist.github.com/kvnsmth/4688345][subtree_usage]]
[[http://www.fwolf.com/blog/post/246][subtree_squash]]
