#+title: Arch Linux on Laptop
#+date: <2022-11-08 Tue 22:45>
#+hugo_lastmod: <2022-11-22 Tue 09:45>
#+hugo_tags: arch_linux laptop
#+setupfile: ./setup.conf

I recently got my new laptop and I found that some additional tweaks need to be made for laptops.  Thus, this post is to have a record in case I forget when I have to reinstall the system.

* COMMENT Change Log
<2022-11-15 Tue 16:19> Move to KDE as the default desktop so HiDPI is not a problem anymore.
<2022-11-21 Mon 22:31> Add secure boot.
<2022-11-22 Tue 09:45> Add more description for power management.
<2022-11-26 Sat 00:29> Add TPM.  Rephrase some content.

* Some basic setup
Unlike desktop, laptops have to be secure so encrytion is a must.

Details of how-to can be found on Arch wiki.  I'm not going to go through that here.  However, I'll note down some considerations and things that need to pay attention to.

** Encryption
[[https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system][Arch wiki about encryption]] has very good examples.

In my case I use =LUKS2=.  As for the scheme, I leave EFI partition unencrypted and encrypt the whole =BTRFS= partition (See [[*Partitioning]]).  EFI partition also acts as boot partition (ramfs and kernel reside inside).  Reason to take this approach is encrypted boot partition makes things more complicated (Like you have to decrypt the partition twice. Once from bootloader and the other one from kernel).  Plus I have secure boot enabled (see [[*Secure bool]]) so unencrypted boot partition is not really a big problem.

Quick setup.

#+begin_src shell
# cryptsetup -y -v luksFormat /dev/sda2
# cryptsetup open /dev/sda2 myroot
#+end_src

A passphrase will be created to unlock the partition in slot =0=.  Since we're gonna use TPM for automatic decryption, slot =0= will be reconfigured so it can be empty for now.

To tell kernel to decrypt the disk on startup, ramfs and kernel parameters have to be updated.  I prefer using =systemd= rather than busybox provided by =udev=.  In this case =sd-encrypt= has to be added instead of =encrypt=

#+begin_src conf
# /etc/mkinitcpio.conf
...
HOOKS=(base systemd autodetect keyboard modconf block sd-encrypt filesystems fsck)
#+end_src

Then update kernel parameters to unlock and map the encrypted partition.

#+begin_src conf
# /boot/loader/entries/arch.conf
...
options rd.luks.name=51d2be03-b9a4-4d4d-bc5a-0a9dba854c1f=ffroot root=/dev/mapper/ffroot
#+end_src

Then use TPM2 to automatically decrypt on bootup.  For =PCR= see [[https://man.archlinux.org/man/systemd-cryptenroll.1][this help page]].

In order to let ramfs use TPM as the default decryption option, the TPM key has to be placed at the beginning (slot =0=), so I'm going to add my super-complicated-strong passphrase again to slot =1= and remove slot =0=, then add TPM key to slot =0= again.

#+begin_src shell
# systemd-cryptenroll /dev/sda2 --password
# systemd-cryptenroll /dev/sda2 --wipe-slot=0
# systemd-cryptenroll /dev/sda2 --tpm2-device=auto --tpm2-pcrs=0+7 --tpm2-with-pin=true
#+end_src

Alternatively you can use a more secure recovery key generated randomly instead of using your own passphrase.

#+begin_src shell
# systemd-cryptenroll /dev/sda2 --recovery-key
# systemd-cryptenroll /dev/sda2 --wipe-slot=0
# systemd-cryptenroll /dev/sda2 --tpm2-device=auto --tpm2-pcrs=0+7 --tpm2-with-pin=true
#+end_src

Note: It is important to keep at least a backup decryption method (recovery key or passphrase) when making modifications to slots.  If only TPM slot left then you probably fucked up because you can no longer add or remove key slots.  Once the boot is tampered you would not be able to recover anymore.

** Partitioning
See [[https://wiki.archlinux.org/title/Btrfs][Arch wiki about BTRFS]] to get to know how to setup =BTRFS= file system.

Using too many partitions is not good for SSD so I only have two partitions on the disk: EFI partition (also as boot) + a big partition formated with =BTRFS=.  The second partition is encrypted, which will be demonstrated in the next topic.

With =BTRFS=, I can use subvolume to achieve the similar effect like what partition does, but it is more flexible.

These subvolumes are created under the big =BTRFS='s root.

| Subvolume  | Mount Point | Note                                |
| @arch-root | /           | System root                         |
| @arch-var  | /var        | Avoid getting snapshot              |
| @home      | /home       | Separated home                      |
| @swap      | /.swap      | Swap files (no compression, no CoW) |
| @snapshot  | /.snapshot  | Snapshots                           |

Quick setup.

#+begin_src shell
# mkfs.btrfs -L ffroot /dev/mapper/ffroot
# mount /dev/mapper/ffroot /mnt
# btrfs subvolume create /mnt/@arch-root
# btrfs subvolume create /mnt/@arch-var
# btrfs subvolume create /mnt/@home
# btrfs subvolume create /mnt/@swap
# btrfs subvolume create /mnt/@snapshot
#+end_src

An example of how =fstab= is set up.

Be aware that swap subvolume should NOT be mounted with compression on.

#+begin_src conf
# <file system> <dir> <type> <options> <dump> <pass>
# /dev/mapper/myroot LABEL=FFROOT
UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6 	/ 	btrfs 	rw,noatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@arch-root 	0 	1

# /dev/nvme0n1p1 LABEL=EFI
UUID=1569-822D 	/boot 	vfat 	rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 	0 	2

# /dev/mapper/myroot LABEL=FFROOT
UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6 	/home 	btrfs 	rw,noatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@home 	0 	2

# /dev/mapper/myroot LABEL=FFROOT
UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6 	/var 	btrfs 	rw,noatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@arch-var 	0 	2

# /dev/mapper/myroot LABEL=FFROOT
UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6 	/.swap 	btrfs 	rw,noatime,ssd,space_cache=v2,subvol=/@swap 	0 	2

# Swap files
/.swap/swap-32gb.img 	none 	swap 	defaults 	0 	0
#+end_src

** Secure boot
Arch wiki has a very clear [[https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot][tutorial]] but eh.  It's too cumbersome.  I choose to use [[https://github.com/Foxboron/sbctl][sbctl]] to save my life.

The readme is very easy to follow but one thing needs to pay attention to is, =grub= doesn't work with it.  If you sign =grub='s EFI file it will fail when secure boot is enforced.  I switched to =systemd-boot= due to this reason.  And I also find that =systemd-boot= is way easier to configure.

For a quick start.

#+begin_src shell
# sbctl status
# sbctl create-keys
# sbctl enroll-keys
# sbctl status
# sbctl sign -s /efi/EFI/BOOT/BOOTX64.EFI
# sbctl sign -s /efi/EFI/systemd/systemd-bootx64.efi
# sbctl sign -s /boot/vmlinuz-linux
#+end_src

*** Use bundles (optional)
Alternatively, you can also bundle kernel image and ramdisk image together as an EFI file.

#+begin_src shell
# sbctl bundle -s -i /boot/intel-ucode.img -k /boot/vmlinuz-linux -f /boot/initramfs-linux.img -c /proc/cmdline /boot/EFI/Linux/linux.efi
# sbctl bundle -s -i /boot/intel-ucode.img -k /boot/vmlinuz-linux-zen -f /boot/initramfs-linux-zen.img -c /proc/cmdline /boot/EFI/Linux/linux-zen.efi
#+end_src

Since the bundles are registered in =sbctl='s database, the EFI files will be automatically re-generated when kernel is updated.

However, in case if kernel parameter or ramdisk is updated, run this manually to re-generate new bundles.

#+begin_src shell
# sbctl generate-bundles
#+end_src

** Hibernation
A workaround has to be made on =BTRFS= with swap files.

First swap files should *NOT* be set with CoW attribute.

Follow [[https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate#Hibernation_into_swap_file_on_Btrfs][this wiki]] to calculate swap file physical offset on =BTRFS= partition.

Then set kernel parameters.  The UUID should be the UUID of decrypted =BTRFS= partition.  Differentiate from the UUID above.

#+begin_src conf
GRUB_CMDLINE_LINUX_DEFAULT="resume=UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6 resume_offset=3420784"
#+end_src

Update ramfs.  Add =resume= hook.

#+begin_src conf
HOOKS=(base systemd autodetect keyboard modconf block sd-encrypt filesystems fsck resume)
#+end_src

** Overall kernel parameters
Kernel parameters used for the previous sections include partitioning, encryption and hibernation.

#+begin_src conf
title Arch Liunx
linux /vmlinuz-linux
initrd /intel-ucode.img
initrd /initramfs-linux.img
options loglevel=3 quiet rd.luks.name=51d2be03-b9a4-4d4d-bc5a-0a9dba854c1f=ffroot root=/dev/mapper/ffroot rootflags=subvol=@arch-root rw mem_sleep_default=deep nvme.noacpi=1 module_blacklist=hid_sensor_hub resume=UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6 resume_offset=3420784
#+end_src

* Installing Arch Linux
I have a script to handle this: https://github.com/peromage/pew/blob/master/rice/scripts/setup/arch-install.sh

* Power management
For power management, there are two options: =TLP= and =power-profiles-daemon=.

=TLP= is powerful but it needs quite a bit attention to manually manage the configuration.  And most of desktop environments don't have integration with it by default.

=power-profiles-daemon= can be used out of the box and desktop like =KDE= detects it automatically when it is installed.

Both power manager can only exist one at a time because they conflict with each other.  You can mask one of them in =systemd= though.  I don't think that's a good idea.  To avoid scratching my head and save some hair, usually I use =power-profiles-daemon=.

** TLP
My =TLP= preferences.  Not too much.  It might be a little aggressive since I want to have maximal battery life.

#+begin_src conf
# /etc/tlp.d/my-power-plan.conf
TLP_DEFAULT_MODE=AC
TLP_PERSISTENT_DEFAULT=0

CPU_SCALING_GOVERNOR_ON_AC=performance
CPU_SCALING_GOVERNOR_ON_BAT=powersave

CPU_ENERGY_PERF_POLICY_ON_AC=balance_performance
CPU_ENERGY_PERF_POLICY_ON_BAT=balance_power

CPU_MIN_PERF_ON_AC=0
CPU_MAX_PERF_ON_AC=100
CPU_MIN_PERF_ON_BAT=0
CPU_MAX_PERF_ON_BAT=20

CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0

CPU_HWP_DYN_BOOST_ON_AC=1
CPU_HWP_DYN_BOOST_ON_BAT=0

SCHED_POWERSAVE_ON_AC=0
SCHED_POWERSAVE_ON_BAT=1
#+end_src

** power-profiles-daemon
No configuration needed.  Just remember to enable the daemon service once it's installed.

* HiDPI
I previously used =XFCE= but now I've switched to KDE as the default desktop environment so HiDPI is not a problem anymore.

* Firefox scrolling with touchpad
Yuck.  Default scrolling experience on touchpad is just disgusting.  To optimize it a bit, go to =about:config= page.

Change configurations:

#+begin_example
mousewheel.acceleration.start             1
mousewheel.default.delta_multiplier_y     2
#+end_example

* Framework laptop specific
Framework laptop needs some additional tweaks.

** Ambient Light Sensor
#+begin_src bash
# pacman -S iio-sensor-proxy
#+end_src

** Fingerprint
#+begin_src bash
# pacman -S fprintd
#+end_src

** Bluetooth
#+begin_src bash
# pacman -S bluez bluez-utils
# systemctl enable --now bluetooth
#+end_src

** Touchpad Two-finger/Three-finger Click
1. Get touchpad device id

#+begin_src bash
# xinput
#+end_src

2. Add to .xinitrc

#+begin_src bash
# xinput set-prop <device> 'libinput Click Method Enabled' 0 1
#+end_src

** Brightness Keys
Add to kernel parameters:

#+begin_src conf
GRUB_CMDLINE_LINUX_DEFAULT="module_blacklist=hid_sensor_hub"
#+end_src

** Suspend Power
Add to kernel parameters:

#+begin_src conf
GRUB_CMDLINE_LINUX_DEFAULT="mem_sleep_default=deep nvme.noacpi=1"
#+end_src
