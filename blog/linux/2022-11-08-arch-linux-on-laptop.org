#+title: Arch Linux on Laptop
#+date: <2022-11-08 Tue 22:45>
#+hugo_lastmod: <2022-11-22 Tue 09:45>
#+hugo_tags: arch_linux laptop
#+setupfile: ./setup.conf

I recently got my new laptop and I found that some additional tweaks need to be made for laptops.  Thus, this post is to have a record in case I forget when I have to reinstall the system.

* COMMENT Change Log
<2022-11-15 Tue 16:19> Move to KDE as the default desktop so HiDPI is not a problem anymore.
<2022-11-21 Mon 22:31> Add secure boot.
<2022-11-22 Tue 09:45> Add more description for power management.

* Installing Arch Linux
I have a script to handle this: https://github.com/peromage/pew/blob/master/rice/scripts/setup/arch-install.sh

* Laptop disk partitioning and encryption
Unlike desktop, laptops have to be secure so encrytion is a must.

Details of how-to can be found on Arch wiki.  I'm not going to go through that here.  However, I'll note down some considerations and things that need to pay attention to.

** Partitioning
[[https://wiki.archlinux.org/title/Btrfs][Arch wiki about BTRFS]]

Using too many partitions is not good for SSD so I only have two partitions on the disk: EFI partition (also as boot) + a big partition formated with =BTRFS=.  The second partition is encrypted, which will be demonstrated in the next topic.

With =BTRFS=, I can use subvolume to achieve the similar effect like what partition does, but it is more flexible.

These subvolumes are created under the big =BTRFS='s root.

| Subvolume  | Mount Point | Note                                |
| @arch-root | /           | System root                         |
| @arch-var  | /var        | Avoid getting snapshot              |
| @home      | /home       | Separated home                      |
| @swap      | /.swap      | Swap files (no compression, no CoW) |
| @snapshot  | /.snapshot  | Snapshots                           |

An example of how =fstab= is set up.

Be aware that swap subvolume should NOT be mounted with compression on.

#+begin_src conf
# <file system> <dir> <type> <options> <dump> <pass>
# /dev/mapper/myroot LABEL=FFROOT
UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6	/         	btrfs     	rw,noatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@arch-root	0 1

# /dev/nvme0n1p1 LABEL=EFI
UUID=1569-822D 					/boot     	vfat      	rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro	0 2

# /dev/mapper/myroot LABEL=FFROOT
UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6	/home     	btrfs     	rw,noatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@home	0 2

# /dev/mapper/myroot LABEL=FFROOT
UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6	/var     	btrfs     	rw,noatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@arch-var	0 2

# /dev/mapper/myroot LABEL=FFROOT
UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6	/.swap 		btrfs     	rw,noatime,ssd,space_cache=v2,subvol=/@swap 			0 2

# Swap files
/.swap/swap-32gb.img 				none 		swap 		defaults 							0 0
#+end_src

** Encryption
[[https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system][Arch wiki about encryption]]

Use =LUKS2=.  The latest =GRUB2= has integrated the support for this new algorithm.  Why not using it?

As for the scheme, I leave EFI partition unencrypted and encrypt the whole =BTRFS= partition.  EFI partition also acts as boot partition (ramfs and kernel reside).

The reason that I don't put boot partition encrypted is that I have to decrypt twice on startup: once by =GRUB= and the other one by kernel.  Though there is a way to [[https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system#Avoiding_having_to_enter_the_passphrase_twice][setup a key file]] to avoid that, I still prefer typing password (Maybe TPM can be used).

To tell kernel to decrypt the disk on startup, ramfs and kernel parameters have to be updated.

Kernel parameters.  The UUID has to be the UUID of the partition itself (not unencrypted BTRFS partition).

#+begin_src conf
GRUB_CMDLINE_LINUX_DEFAULT="cryptdevice=UUID=51d2be03-b9a4-4d4d-bc5a-0a9dba854c1f:ffroot root=/dev/mapper/ffroot"
#+end_src

Update ramfs hooks.  =encrypt= needs to go after =udev=.

#+begin_src conf
HOOKS=(base udev autodetect modconf block filesystems keyboard fsck encrypt)
#+end_src

* Secure boot
Arch wiki has a very clear [[https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot][tutorial]] but eh.  It's too cumbersome.  I choose to use [[https://github.com/Foxboron/sbctl][sbctl]] to save my life.

The readme is very easy to follow but one thing needs to pay attention to is, =grub= doesn't work with it.  If you sign =grub='s EFI file it will fail when secure boot is enforced.  I switched to =systemd-boot= due to this reason.  And I also find that =systemd-boot= is way easier to configure.

** Use bundles (optional)
Alternatively, you can also bundle kernel image and ramdisk image together as an EFI file.

#+begin_src shell
$ sudo sbctl bundle -s -i /boot/intel-ucode.img -k /boot/vmlinuz-linux -f /boot/initramfs-linux.img -c /proc/cmdline /boot/EFI/Linux/linux.efi
$ sudo sbctl bundle -s -i /boot/intel-ucode.img -k /boot/vmlinuz-linux-zen -f /boot/initramfs-linux-zen.img -c /proc/cmdline /boot/EFI/Linux/linux-zen.efi
#+end_src

Since the bundles are registered in =sbctl='s database, the EFI files will be automatically re-generated when kernel is updated.

However, in case if kernel parameter or ramdisk is updated, run this manually to re-generate new bundles.

#+begin_src shell
$sudo sbctl generate-bundles
#+end_src

* Hibernation
A workaround has to be made on =BTRFS= with swap files.

First swap files should *NOT* be set with CoW attribute.

Follow [[https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate#Hibernation_into_swap_file_on_Btrfs][this wiki]] to calculate swap file physical offset on =BTRFS= partition.

Then set kernel parameters.  The UUID should be the UUID of decrypted =BTRFS= partition.  Differentiate from the UUID above.

#+begin_src conf
GRUB_CMDLINE_LINUX_DEFAULT="resume=UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6 resume_offset=3420784"
#+end_src

Update ramfs.  Add =resume= hook.

#+begin_src conf
HOOKS=(base udev autodetect modconf block filesystems keyboard fsck encrypt resume)
#+end_src

* Power management
For power management, there are two options: =TLP= and =power-profiles-daemon=.

=TLP= is powerful but it needs quite a bit attention to manually manage the configuration.  And most of desktop environments don't have integration with it by default.

=power-profiles-daemon= can be used out of the box and desktop like =KDE= detects it automatically when it is installed.

Both power manager can only exist one at a time because they conflict with each other.  You can mask one of them in =systemd= though.  I don't think that's a good idea.  To avoid scratching my head and save some hair, usually I use =power-profiles-daemon=.

** TLP
My =TLP= preferences.  Not too much.  It might be a little aggressive since I want to have maximal battery life.

#+begin_src conf
# /etc/tlp.d/my-power-plan.conf
TLP_DEFAULT_MODE=AC
TLP_PERSISTENT_DEFAULT=0

CPU_SCALING_GOVERNOR_ON_AC=performance
CPU_SCALING_GOVERNOR_ON_BAT=powersave

CPU_ENERGY_PERF_POLICY_ON_AC=balance_performance
CPU_ENERGY_PERF_POLICY_ON_BAT=balance_power

CPU_MIN_PERF_ON_AC=0
CPU_MAX_PERF_ON_AC=100
CPU_MIN_PERF_ON_BAT=0
CPU_MAX_PERF_ON_BAT=20

CPU_BOOST_ON_AC=1
CPU_BOOST_ON_BAT=0

CPU_HWP_DYN_BOOST_ON_AC=1
CPU_HWP_DYN_BOOST_ON_BAT=0

SCHED_POWERSAVE_ON_AC=0
SCHED_POWERSAVE_ON_BAT=1
#+end_src

** power-profiles-daemon
No configuration needed.  Just remember to enable the daemon service once it's installed.

* HiDPI
Update: I switched to KDE as the default desktop environment so HiDPI is not a problem anymore.

** XFCE - Obsolete
=XFCE= is my choice of "just works" desktop environment.  It has some issues with HiDPI out of the box so some tweaks need to be made.

[[https://wiki.archlinux.org/title/HiDPI#Xfce][Arch wiki]] has elaborated it already.

In short, update scaling:

#+begin_src shell
xfconf-query -c xsettings -p /Gdk/WindowScalingFactor -s 2
xfconf-query -c xfwm4 -p /general/theme -s Default-xhdpi
#+end_src

In =~/.xinitrc=:

#+begin_src shell
export GDK_DPI_SCALE=0.5
exec startxfce4
#+end_src

The only problem is 2x scaling sometimes is too big.  GTK doesn't have the plan to support fractional scaling, which sucks.  I might switch to a Qt-based desktop environment.

* Firefox scrolling with touchpad
Yuck.  Default scrolling experience on touchpad is just disgusting.  To optimize it a bit, go to =about:config= page.

Change configurations:

#+begin_example
mousewheel.acceleration.start             1
mousewheel.default.delta_multiplier_y     2
#+end_example

* Framework laptop specific
Framework laptop needs some additional tweaks.

** Ambient Light Sensor
#+begin_src bash
# pacman -S iio-sensor-proxy
#+end_src

** Fingerprint
#+begin_src bash
# pacman -S fprintd
#+end_src

** Bluetooth
#+begin_src bash
# pacman -S bluez bluez-utils
# systemctl enable --now bluetooth
#+end_src

** Touchpad Two-finger/Three-finger Click
1. Get touchpad device id

#+begin_src bash
# xinput
#+end_src

2. Add to .xinitrc

#+begin_src bash
# xinput set-prop <device> 'libinput Click Method Enabled' 0 1
#+end_src

** Brightness Keys
Add to kernel parameters:

#+begin_src conf
GRUB_CMDLINE_LINUX_DEFAULT="module_blacklist=hid_sensor_hub"
#+end_src

** Suspend Power
Add to kernel parameters:

#+begin_src conf
GRUB_CMDLINE_LINUX_DEFAULT="mem_sleep_default=deep nvme.noacpi=1"
#+end_src
