#+title: Moving from Arch Linux to NixOS
#+date: <2022-11-14 Mon 21:29>
#+hugo_lastmod: <2023-10-29 Sun 14:58>
#+hugo_tags: arch_linux nixos
#+setupfile: ./setup.conf

I've been learning Nix for a while and using the Nix package manager on my work desktop that runs Ubuntu.  However, I did not use the NixOS on my personal laptop because I thought I might put a lot effort after work to set it up, which I didn't really want to.  Until recent, the Arch dependencies broke again and I felt it kinda suck to fix those issues so I decided to give Nix a try.  To my suprise, the installation process is way simpler than I expected.

In this post, I'm going to put the miniaml intial setup of NixOS on my laptop.  The complete tweaks may come up a little later because I'm still playing around with it.

Note that, my setup is based on =btrfs= and =luks=. And the NixOS version used at the time writing this post is =23.05=.

* Set up partition
Since I have this set up already and I don't want to wipe my entire disk, the filesystem and encryption setup parts are skipped.  However, the Arch documents are still viable for Nix.

[[https://wiki.archlinux.org/title/btrfs][Btrfs]]

[[https://wiki.archlinux.org/title/dm-crypt/Encrypting_an_entire_system][Luks]]

#+begin_src sh
# Decrypt the disk
cryptsetup open /dev/nvme0n1p2 ffroot

# Mount btrfs root to prepare subvolumes
mount /dev/mapper/ffroot /mnt
cd /mnt

btrfs subvolume create @nixos
btrfs subvolume create @nixstore
btrfs subvolume create @home

btrfs subvolume create @swap
chattr +C @swap

btrfs subvolume create @vm
chattr +C @vm


# Mount NixOS root and other partitions
umount /mnt
mount -o subvol=@nixos,noatime,ssd,compress=zstd:3 /dev/mapper/ffroot /mnt
cd /mnt

mkdir nix
mkdir home
mkdir ffstore
mkdir ffstore/swap
mkdir ffstore/vm
mkdir boot

mount -o subvol=@nixstore,noatime,ssd,compress=zstd:3 /dev/mapper/ffroot /mnt/nix
mount -o subvol=@home,noatime,ssd,compress=zstd:3 /dev/mapper/ffroot /mnt/home
mount -o subvol=@swap,noatime,ssd,compress=zstd:3 /dev/mapper/ffroot /mnt/ffstore/swap
mount -o subvol=@vm,noatime,ssd,compress=zstd:3 /dev/mapper/ffroot /mnt/ffstore/vm
mount /dev/nvme0n1p1 /mnt/boot
#+end_src

* Initialize the system config
Just one command.  The generated config files will be located under =/etc/nixos/=.

#+begin_src sh
nixos-generate-config --root /mnt
#+end_src

* Edit the system config
For the hardware config nothing really needs to be changed.  Nix is amazing that it has all the stuff ready to go including configuring the decryption on startup!

Only two minor changes that needs to be made.  One is the subvolume mount options.  For some reasons it doesn't have all the options that we used to mount.  The other one is the swap file.

#+begin_src nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/35154f6e-27aa-49f8-b1b6-6472127cb524";
      fsType = "btrfs";
      options = [ "subvol=@nixos" "ssd" "noatime" "compress=zstd:3" ];
    };

  boot.initrd.luks.devices."ffroot".device = "/dev/disk/by-uuid/d698d7a5-125f-46ad-bc1d-47f9807afdef";

  fileSystems."/nix" =
    { device = "/dev/disk/by-uuid/35154f6e-27aa-49f8-b1b6-6472127cb524";
      fsType = "btrfs";
      options = [ "subvol=@nixstore" "ssd" "noatime" "compress=zstd:3" ];
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/35154f6e-27aa-49f8-b1b6-6472127cb524";
      fsType = "btrfs";
      options = [ "subvol=@home" "ssd" "noatime" "compress=zstd:3" ];
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/8F86-D998";
      fsType = "vfat";
    };

  fileSystems."/ffstore/swap" =
    { device = "/dev/disk/by-uuid/35154f6e-27aa-49f8-b1b6-6472127cb524";
      fsType = "btrfs";
      options = [ "subvol=@swap" "ssd" "noatime" "compress=zstd:3" ];
    };

  fileSystems."/ffstore/vm" =
    { device = "/dev/disk/by-uuid/35154f6e-27aa-49f8-b1b6-6472127cb524";
      fsType = "btrfs";
      options = [ "subvol=@vm" "ssd" "noatime" "compress=zstd:3" ];
    };

  swapDevices =
    [
      {
        device = "/ffstore/swap/swap32gb.img";
      }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp166s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src

For the system config, just enable whatever we need.

#+begin_src nix
# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running `nixos-help`).

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "potpie"; # Define your hostname.
  # Pick only one of the below networking options.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  networking.networkmanager.enable = true;  # Easiest to use and most distros use this by default.

  # Set your time zone.
  time.timeZone = "America/Detroit";

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  i18n.defaultLocale = "en_US.UTF-8";
  console = {
    font = "Lat2-Terminus16";
    # keyMap = "us";
    useXkbConfig = true; # use xkbOptions in tty.
  };

  # Enable the X11 windowing system.
  services.xserver.enable = true;


  # Enable the GNOME Desktop Environment.
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.desktopManager.gnome.enable = true;


  # Configure keymap in X11
  # services.xserver.layout = "us";
  # services.xserver.xkbOptions = "eurosign:e,caps:escape";

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound.
  sound.enable = true;
  hardware.pulseaudio.enable = true;

  # Enable touchpad support (enabled default in most desktopManager).
  services.xserver.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.fang = {
    isNormalUser = true;
    extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
    uid = 1001;
    packages = with pkgs; [
      firefox
      tree
      emacs29
      git
    ];
  };

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
    wget
    coreutils
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = true;

  # Copy the NixOS configuration file and link it from the resulting system
  # (/run/current-system/configuration.nix). This is useful in case you
  # accidentally delete configuration.nix.
  # system.copySystemConfiguration = true;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It's perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "23.05"; # Did you read the comment?

}
#+end_src

* Build the system
Finally let's build our first NixOS.

#+begin_src sh
nixos-install
#+end_src

And that's it!

It was a blast that I've never seen such an elegant way to install a system.  This is even simpler than Arch!

Next up, secure boot, hibernation, the laptop specific fixes (functional keys)... and Flakes!  It must be a lot fun.
