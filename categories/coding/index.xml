<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>coding on (->> truth seek (desire))</title><link>https://peromage.github.io/categories/coding/</link><description>Recent content in coding on (->> truth seek (desire))</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 18 Feb 2023 17:04:00 +0000</lastBuildDate><atom:link href="https://peromage.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml"/><item><title>LSP Setup for Java</title><link>https://peromage.github.io/p/lsp-setup-for-java/</link><pubDate>Sat, 18 Feb 2023 17:04:00 +0000</pubDate><guid>https://peromage.github.io/p/lsp-setup-for-java/</guid><description>Background As a Java newbie I found that Java setup is quite different from C++.
Initially I added lsp-java along with the existing lsp-mode I&amp;rsquo;ve been using. With zero configuration it seemed to work fine. Completion is well supported for Java built-in libraries. However, when I tried visiting some symbols from some other places in the project that I&amp;rsquo;m working on, say JUnit, things getting complicated.
In C++&amp;rsquo;s world, with clangd, I can easily write a compile_flags.</description></item><item><title>Use Git Worktree to Work with Multiple Checkout at the Same Time</title><link>https://peromage.github.io/p/use-git-worktree-to-work-with-multiple-checkout-at-the-same-time/</link><pubDate>Mon, 06 Jun 2022 00:30:00 +0000</pubDate><guid>https://peromage.github.io/p/use-git-worktree-to-work-with-multiple-checkout-at-the-same-time/</guid><description>Troubles When working with a complicated project where you have to compare different history versions side by side, it soon becomes frustrating frequently checking out refs.
The old stupid way is to clone multiple repos and checkout to the specific revisions. When the project is big this might be a trouble because you&amp;rsquo;re basically duplicating files.
Savior Git provides a convenience sub-command worktree to checkout a specific ref in another directory without duplicating files.</description></item><item><title>Initialize std::array at Compile Time</title><link>https://peromage.github.io/p/initialize-stdarray-at-compile-time/</link><pubDate>Wed, 16 Mar 2022 10:25:00 +0000</pubDate><guid>https://peromage.github.io/p/initialize-stdarray-at-compile-time/</guid><description>Background I&amp;rsquo;ve been working on optimization for some C++ code recently. One of the part is to initialize some data at compile time. Consider we have a C style enum definition:
typedef enum Foo { AAA = 0, BBB, CCC } Foo_t; We want to have an array of the enum with undefined initial values 999 because by default initialization the values would be 0&amp;rsquo;s. However, std::array can only be initialized by initializer list, which is said:</description></item></channel></rss>