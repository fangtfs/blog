<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on Fang's Blog</title><link>https://peromage.github.io/categories/tech/</link><description>Recent content in tech on Fang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Oct 2022 00:01:00 +0000</lastBuildDate><atom:link href="https://peromage.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Windows Rescure Quick Reference</title><link>https://peromage.github.io/p/windows-rescure-quick-reference/</link><pubDate>Wed, 19 Oct 2022 00:01:00 +0000</pubDate><guid>https://peromage.github.io/p/windows-rescure-quick-reference/</guid><description>&lt;p>Though I&amp;rsquo;ve written posts about &lt;a class="link" href="https://peromage.github.io/p/dual-booting-windows-vhd-and-native-linux-on-a-bios-gpt-pc/" >dual-booting Windows and Linux&lt;/a> and &lt;a class="link" href="https://peromage.github.io/p/minimalists-multi-boot-usb-drive/" >multi-booting a USB drive&lt;/a>, I have to go back and dig useful information out each time when I forget something.&lt;/p>
&lt;p>After breaking my dual-boot setup once again (forgot to backup boot partition), I decided to create this post for a quick reference.&lt;/p>
&lt;p>This reference assumes system is boot from UEFI and Windows is installed on a dedicated partition.&lt;/p>
&lt;h2 id="setup-a-usb-with-system-images">Setup A USB with System Images&lt;/h2>
&lt;p>Forget the previous multi-boot USB post. Use &lt;a class="link" href="https://www.ventoy.net/en/index.html" target="_blank" rel="noopener"
>Ventory&lt;/a> and it just works great.&lt;/p>
&lt;p>In this case we need a Linux and Windows ISO. For Linux, I prefer Arch. For Windows, we need a PE environment. I don&amp;rsquo;t trust those PE ISOs from other people so the best way is to download an official image from Microsoft since we just need some tools and they are included in the installation ISO already.&lt;/p>
&lt;h2 id="method-1-load-windows-from-grub">Method 1: Load Windows From GRUB&lt;/h2>
&lt;p>To prevent Windows from messing up with Linux&amp;rsquo;s bootloader, a good idea is to put Windows&amp;rsquo; bootloader in a VHD file and chainload it from GRUB.&lt;/p>
&lt;h3 id="fix-windows-s-bootloader">Fix Windows&amp;rsquo;s Bootloader&lt;/h3>
&lt;p>Boot into Windows installation ISO.&lt;/p>
&lt;p>Don&amp;rsquo;t start installing. Instead, choose &lt;code>Repair your computer&lt;/code> -&amp;gt; &lt;code>Troubleshoot&lt;/code> -&amp;gt; &lt;code>Command Prompt&lt;/code>.&lt;/p>
&lt;p>We need to create a VHD that contains Windows bootmgr. I used to create a file in 32 MB but it seems too small for the most recent bloated Windows so in case, we use 128 MB here.&lt;/p>
&lt;p>NOTE: This file will be loaded into memory so don&amp;rsquo;t make it too big.&lt;/p>
&lt;p>In diskpart, use &lt;code>list volume&lt;/code> to confirm EFI partition volume letter. Usually it will not be assigned by PE environment automatically.&lt;/p>
&lt;p>NOTE: The file can be put in Windows partition though. It requires extra setup like load NTFS module for grub and find it&amp;rsquo;s root. That&amp;rsquo;s too cumbersome.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; diskpart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; list volume
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># EFI partition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="k">select&lt;/span> volume &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; assign &lt;span class="nv">letter&lt;/span>&lt;span class="o">=&lt;/span>e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>e:&lt;span class="se">\b&lt;/span>ootmgr.vhd &lt;span class="nv">maximum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">128&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>fixed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="k">select&lt;/span> vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>e:&lt;span class="se">\b&lt;/span>ootmgr.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; attach vdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; convert mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create partition primary
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; format &lt;span class="nv">fs&lt;/span>&lt;span class="o">=&lt;/span>ntfs quick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; assign &lt;span class="nv">letter&lt;/span>&lt;span class="o">=&lt;/span>f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now the bootloader VHD is mounted at &lt;code>F:&lt;/code>. Then write the boot record and create boot configuration files.&lt;/p>
&lt;p>NOTE: Windows partition volume letter should be confirmed in &lt;code>diskpart&lt;/code> above. It&amp;rsquo;s usually assigned by PE automatically. In this case it is &lt;code>C:&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bootsect /nt60 e: /mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; bcdboot c:&lt;span class="se">\W&lt;/span>indows /l en-us /s e: /f uefi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="add-window-to-grub">Add Window to GRUB&lt;/h3>
&lt;p>Boot into Linux and confirm EFI partition UUID where you put the Windows bootloader VHD file. In command line:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ lsblk -f
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Configure GRUB menu to include Windows. Assume the EFI partition is mounted at &lt;code>/boot/efi&lt;/code> and &lt;code>memdisk&lt;/code> (got from &lt;code>syslinux&lt;/code>) is put at EFI partition&amp;rsquo;s root.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/grub.d/40_custom
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">menuentry &amp;#34;Windows 10&amp;#34; {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> search --set=root --no-floppy --fs-uuid 1DB1-9C31
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> linux16 /memdisk harddisk
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> initrd16 /bootmgr.vhd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="problem">Problem&lt;/h3>
&lt;p>I found that on Fedora &lt;code>linux16&lt;/code> and &lt;code>initrd16&lt;/code> is not available by default. A workaround must be done. If it comes in this case, I suggest to use method 2 below.&lt;/p>
&lt;h2 id="method-2-add-windows-back-to-uefi-menu">Method 2: Add Windows Back To UEFI Menu&lt;/h2>
&lt;p>This method is simpler but there is possibility that Windows is going to break Linux.&lt;/p>
&lt;h3 id="fix-windows-s-bootloader">Fix Windows&amp;rsquo;s Bootloader&lt;/h3>
&lt;p>Boot into Windows installation ISO.&lt;/p>
&lt;p>Don&amp;rsquo;t start installing. Instead, choose &lt;code>Repair your computer&lt;/code> -&amp;gt; &lt;code>Troubleshoot&lt;/code> -&amp;gt; &lt;code>Command Prompt&lt;/code>.&lt;/p>
&lt;p>In diskpart, use &lt;code>list volume&lt;/code> to confirm EFI partition volume letter. Usually it will not be assigned by PE environment automatically.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; diskpart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; list volume
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># EFI partition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="k">select&lt;/span> volume &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; assign &lt;span class="nv">letter&lt;/span>&lt;span class="o">=&lt;/span>e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Backup default UEFI entry (Linux)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; &lt;span class="nb">cd&lt;/span> /d e:&lt;span class="se">\E&lt;/span>FI
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ren BOOT linux_BOOT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Windows volume is C: confirmed from diskpart above&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; bcdboot c:&lt;span class="se">\W&lt;/span>indows /l en-us /s e: /f uefi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Restore default Linux entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ren Boot Microsoft_Boot
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; ren linux_BOOT BOOT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If you want Windows to be the default, leave it as it.&lt;/p>
&lt;p>NOTE: For Fedora it seems to be a problem to be a none-default entry when log into display manager. Not sure why. So it&amp;rsquo;d be better to restore default for Fedora.&lt;/p></description></item><item><title>Use Git Worktree to Work with Multiple Checkout at the Same Time</title><link>https://peromage.github.io/p/use-git-worktree-to-work-with-multiple-checkout-at-the-same-time/</link><pubDate>Mon, 06 Jun 2022 00:30:00 +0000</pubDate><guid>https://peromage.github.io/p/use-git-worktree-to-work-with-multiple-checkout-at-the-same-time/</guid><description>&lt;h2 id="troubles">Troubles&lt;/h2>
&lt;p>When working with a complicated project where you have to compare different history versions side by side, it soon becomes frustrating frequently checking out refs.&lt;/p>
&lt;p>The old stupid way is to clone multiple repos and checkout to the specific revisions. When the project is big this might be a trouble because you&amp;rsquo;re basically duplicating files.&lt;/p>
&lt;h2 id="savior">Savior&lt;/h2>
&lt;p>Git provides a convenience sub-command &lt;code>worktree&lt;/code> to checkout a specific ref in another directory without duplicating files.&lt;/p>
&lt;h3 id="add-a-new-checkout">Add a New Checkout&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git worktree add ../foo-ref-1 &amp;lt;ref&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Of course you can add as many checkouts as you want.&lt;/p>
&lt;h3 id="remove-a-checkout">Remove a Checkout&lt;/h3>
&lt;p>When the checkout is no longer needed, it can be deleted from this command.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git worktree remove --force ../foo-ref-1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If there are uncommitted changes git will prevent you from deleting the directory. In this case &lt;code>--force&lt;/code> flag is needed.&lt;/p></description></item><item><title>Fix Metadata in Google Photo Takeout</title><link>https://peromage.github.io/p/fix-metadata-in-google-photo-takeout/</link><pubDate>Sun, 13 Mar 2022 00:12:00 +0000</pubDate><guid>https://peromage.github.io/p/fix-metadata-in-google-photo-takeout/</guid><description>&lt;p>Google Photo sucks.&lt;/p>
&lt;h2 id="troubles">Troubles&lt;/h2>
&lt;p>When exporting photos from Google Photo, a bunch of JSON files come with your photos. Those JSON files contain metadata which is supposed to be stored with your photo files. If you simple import those photo files into another photo manager you will most likely not get a chronological view. Obviously, Google does on purpose so that you will not leave it easily.
However, there is a workaround that is able to merge those metadata into your photos.&lt;/p>
&lt;h2 id="restore-the-metadate">Restore the Metadate&lt;/h2>
&lt;ol>
&lt;li>Get &lt;code>exiftool&lt;/code>: &lt;a class="link" href="https://github.com/exiftool/exiftool" target="_blank" rel="noopener"
>https://github.com/exiftool/exiftool&lt;/a>&lt;/li>
&lt;li>Export your Google Photos and extract the downloaded compressed files into a folder&lt;/li>
&lt;li>Save the following content to &lt;code>fix-args.txt&lt;/code>&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Usage: exiftool -@ fix-args.txt &amp;lt;takeout_dir&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-r&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">%s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-tagsFromFile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">%d/%F.json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-ext *&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">--ext json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-overwrite_original&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-progress&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSAltitude&amp;lt;GeoDataAltitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSLatitude&amp;lt;GeoDataLatitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSLongitude&amp;lt;GeoDataLongitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-DateTimeOriginal&amp;lt;PhotoTakenTimeTimestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-ModifyDate&amp;lt;PhotoLastModifiedTimeTimestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-CreateDate&amp;lt;CreationTimeTimestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSAltitudeRef&amp;lt;GeoDataAltitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSLatitudeRef&amp;lt;GeoDataLatitude&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">-GPSLongitudeRef&amp;lt;GeoDataLongitude&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>Execute&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ exiftool -@ fix-args.txt &amp;lt;takeout_dir&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>Delete JSON files and import your photos to somewhere else&lt;/li>
&lt;/ol>
&lt;p>This argument file contains the fields that are meaningful to me. If you need to merge additional fields you can append them to the last. For details, check the man page of &lt;code>exiftool&lt;/code>.&lt;/p></description></item><item><title>Minimalist's Multi-boot USB Drive</title><link>https://peromage.github.io/p/minimalists-multi-boot-usb-drive/</link><pubDate>Wed, 26 Jan 2022 20:34:00 +0000</pubDate><guid>https://peromage.github.io/p/minimalists-multi-boot-usb-drive/</guid><description>&lt;h2 id="story">Story&lt;/h2>
&lt;p>Recently I&amp;rsquo;ve realized a fact that I always have needs to keep a multi-boot USB in my pocket for either Linux or Windows installation. There are a lot tools out there already but I don&amp;rsquo;t really like them. At least, I mean, they are too flashy to me. A beautiful boot menu seems not to be attractive. What I need is just a simple and practical maybe a little ugly boot device. It should be minimalist. More importantly, it has to be easy to setup with the tools on the system already and maintainable. No funky scripts.&lt;/p>
&lt;h2 id="old-solution-clunky">Old Solution - Clunky&lt;/h2>
&lt;p>I&amp;rsquo;ve been using this solution for a very long time. Setup is pretty straight forward.&lt;/p>
&lt;p>The partition scheme used on the USB drive is like (GPT):&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Partition&lt;/th>
&lt;th>Size&lt;/th>
&lt;th>Filesystem&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>/dev/sda1&lt;/td>
&lt;td>100 GB&lt;/td>
&lt;td>NTFS&lt;/td>
&lt;td>Data partition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda2&lt;/td>
&lt;td>512 MB&lt;/td>
&lt;td>FAT&lt;/td>
&lt;td>EFI partition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda3&lt;/td>
&lt;td>1 MB&lt;/td>
&lt;td>No filesystem&lt;/td>
&lt;td>BIOS boot partition used by GRUB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda4&lt;/td>
&lt;td>8 GB&lt;/td>
&lt;td>NTFS&lt;/td>
&lt;td>Windows ISO files&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda5&lt;/td>
&lt;td>2 GB&lt;/td>
&lt;td>FAT&lt;/td>
&lt;td>Arch Linux ISO files&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>So the idea is having a big data partition at the front for better access, then installing GRUB files on the second EFI partition with both EFI and BIOS support (Implemented by the third BIOS boot partition. The partition order doesn&amp;rsquo;t matter). Finally, create dedicated partitions to contain the extracted files from installation ISOs.&lt;/p>
&lt;p>When the USB drive is plugged in, I can use grub command line to chainload the EFI file that is located in the ISO partition, or the VBR if it&amp;rsquo;s booted with legacy mode.&lt;/p>
&lt;p>Well, it&amp;rsquo;s usable but I still feel that it is too much for a small USB drive - too many partitions. If I plug the drive in for just data exchange, there would be a a bunch of partitions mounted and the notification is quite annoying. So I started thinking that there must be a simpler way to do it.&lt;/p>
&lt;h2 id="new-solution-much-better">New Solution - Much Better&lt;/h2>
&lt;h3 id="partitioning">Partitioning&lt;/h3>
&lt;p>The goal is simplicity so the new partition scheme is like this:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Partition&lt;/th>
&lt;th>Size&lt;/th>
&lt;th>Filesystem&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>/dev/sda1&lt;/td>
&lt;td>100 GB&lt;/td>
&lt;td>NTFS&lt;/td>
&lt;td>Data partition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda2&lt;/td>
&lt;td>512 MB&lt;/td>
&lt;td>FAT&lt;/td>
&lt;td>EFI partition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda3&lt;/td>
&lt;td>1 MB&lt;/td>
&lt;td>No filesystem&lt;/td>
&lt;td>BIOS boot partition used by GRUB (Optional)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The third BIOS boot partition is not really necessary since most of computers nowadays are using UEFI. If you really need the legacy compatibility, you can create one. I&amp;rsquo;ll keep it for now.&lt;/p>
&lt;h3 id="installing-grub">Installing GRUB&lt;/h3>
&lt;p>Typical GRUB insallation but install for both EFI and BIOS.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo mount /dev/sda2 /mnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo grub-install --target&lt;span class="o">=&lt;/span>x86_64-efi --efi-directory&lt;span class="o">=&lt;/span>/mnt --boot-directory&lt;span class="o">=&lt;/span>/mnt --removable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo grub-install --target&lt;span class="o">=&lt;/span>i386-pc --boot-directory&lt;span class="o">=&lt;/span>/mnt /dev/sda
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Don&amp;rsquo;t forget to create a GRUB menu config file. Otherwise GRUB will boot into its command line interface (If you know what you&amp;rsquo;re doing). It&amp;rsquo;s a good idea to put a editable config file in the data partition since it will be the most used partition. However, GRUB reads the file in the EFI partition by default: &lt;code>(esp)/grub/grub.cfg&lt;/code>. We can tell GRUB to read out custom config file after that.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># (esp)/grub/grub.cfg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">configfile /boot.cfg&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Thus we are done with the EFI partition. All the menu configuration will go into &lt;code>boot.cfg&lt;/code> in the data partition.&lt;/p>
&lt;h3 id="linux-installer">Linux Installer&lt;/h3>
&lt;p>Most of modern Linux distros support booting from a loop device. That is to say, we don&amp;rsquo;t have to extract the content of ISO files. Using GRUB &lt;code>loopback&lt;/code> command can easily mount a ISO and boot from there. But chainloading the EFI or VBF is not possible. Based on the &lt;a class="link" href="https://www.gnu.org/software/grub/manual/grub/grub.html#Loopback-booting" target="_blank" rel="noopener"
>GRUB manual&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>GRUB is able to read from an image (be it one of CD or HDD) stored on any of its accessible storages (refer to see loopback command). However the OS itself should be able to find its root. This usually involves running a userspace program running before the real root is discovered.&lt;/p>
&lt;/blockquote>
&lt;p>EFI bootloader usually will fail to find the root device by this method. However, we can manually load the kernel and ramdisk in which we can specify the root device by ourselves.&lt;/p>
&lt;h4 id="load-linux-iso">Load Linux ISO&lt;/h4>
&lt;p>I&amp;rsquo;m using Arch Linux here for example.&lt;/p>
&lt;ol>
&lt;li>Put the ISO file to &lt;code>(data)/images/archlinux-2022.01.01-x86_64.iso&lt;/code>.&lt;/li>
&lt;li>Mount ISO. We need to find the kernel loading parameters.&lt;/li>
&lt;li>In the file &lt;code>(arch)/syslinux/archiso_sys-linux.cfg&lt;/code> we would see&lt;/li>
&lt;/ol>
&lt;!-- raw HTML omitted -->
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copy to RAM boot option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">LABEL arch64ram&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">TEXT HELP&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">Boot the Arch Linux install medium on BIOS with Copy-to-RAM option&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">It allows you to install Arch Linux or perform system maintenance.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">ENDTEXT&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">MENU LABEL Arch Linux install medium (x86_64, BIOS, Copy to RAM)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">LINUX /arch/boot/x86_64/vmlinuz-linux&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">INITRD /arch/boot/intel-ucode.img,/arch/boot/amd-ucode.img,/arch/boot/x86_64/initramfs-linux.img&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">APPEND archisobasedir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">arch archisolabel=ARCH_202201 copytoram&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This is a &lt;code>syslinux&lt;/code> config file. Parameters after &lt;code>APPEND&lt;/code> are the ones that we&amp;rsquo;re looking for.&lt;/p>
&lt;p>Then add the following content to &lt;code>(data)/boot.cfg&lt;/code>. When copying the &lt;code>initrd&lt;/code> parameters, don&amp;rsquo;t forget to remove commas.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Archiso 202201 RAM&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> loopback loop /images/archlinux-2022.01.01-x86_64.iso
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> set root=(loop)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> linux /arch/boot/x86_64/vmlinuz-linux archisobasedir=arch archisolabel=ARCH_202201 copytoram
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> initrd /arch/boot/intel-ucode.img /arch/boot/amd-ucode.img /arch/boot/x86_64/initramfs-linux.img&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then the Linux installer is done. If we need more distros, the process is similar.&lt;/p>
&lt;h3 id="windows-installer">Windows Installer&lt;/h3>
&lt;p>I prefer to use NTFS as my data partition&amp;rsquo;s file system because it works on both Linux and Windows, and supports big files. Also I usually just keep one copy of Windows installer so for Windows, I can simply dump the ISO content to the data partition&amp;rsquo;s root. I don&amp;rsquo;t mind the extra a few folders there. Plus some of them can be safely deleted. Then chainloading from GRUB is possible.&lt;/p>
&lt;p>In &lt;code>(data)/boot.cfg&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Windows 10 Installer&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> chainloader /efi/boot/bootx64.efi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="windows-pe">Windows PE&lt;/h3>
&lt;p>Alternatively, I can directly boot from a small WinPE image and use &lt;code>dism&lt;/code> command to extract &lt;code>install.wim&lt;/code> to the target without accepting the annoying Windows partition scheme (You know what I&amp;rsquo;m talking about).&lt;/p>
&lt;p>To create a PE image we need a Windows environment and a CMD window with admin privilege.&lt;/p>
&lt;p>Create a virtual disk to contain PE files. Assigned with volume letter &lt;code>P:\&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; diskpart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>c:&lt;span class="se">\w&lt;/span>inpe.vhd &lt;span class="nv">maximum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2000&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>fixed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="k">select&lt;/span> vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>c:&lt;span class="se">\w&lt;/span>inpe.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; attach vdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; convert mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create partition primary
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; format &lt;span class="nv">fs&lt;/span>&lt;span class="o">=&lt;/span>ntfs quick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; assign &lt;span class="nv">letter&lt;/span>&lt;span class="o">=&lt;/span>p
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then mount the Windows installer ISO. Assuming the assigned volume is &lt;code>G:\&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; dism /apply-image /imagefile:g:&lt;span class="se">\s&lt;/span>ources&lt;span class="se">\b&lt;/span>oot.wim /index:1 /applydir:p:&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&amp;gt; dism /image:p:&lt;span class="se">\ &lt;/span>/set-targetpath:x:&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span>&amp;gt; dism /image:p:&lt;span class="se">\ &lt;/span>/set-inputlocale:en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; dism /image:p:&lt;span class="se">\ &lt;/span>/set-userlocale:en-us
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Assign EFI partition with volume letter &lt;code>E:\&lt;/code>.&lt;/p>
&lt;p>Before creating the bootloader for Windows PE, we need to backup our GRUB EFI file (Windows PE bootloader will overwrite it). Rename &lt;code>E:\EFI&lt;/code> to &lt;code>E:\EFI-grub&lt;/code>.&lt;/p>
&lt;p>Create Windows PE bootloader.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdboot p:&lt;span class="se">\W&lt;/span>indows /l en-us /s e: /f uefi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then merge both &lt;code>E:\EFI&lt;/code> and &lt;code>E:\EFI-grub&lt;/code>. If it prompts overwriting &lt;code>E:\EFI\Boot\bootx64.efi&lt;/code>, confirm with yes.&lt;/p>
&lt;p>Then add following content to &lt;code>(data)/boot.cfg&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Windows PE&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> chainloader /EFI/Microsoft/Boot/bootmgfw.efi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="loading-any-iso">Loading Any ISO&lt;/h3>
&lt;p>Some ISO is capable to be loaded directly into memory. The size of the ISO file is critical. Generally it should not exceed the physical memory. This can be done by &lt;code>memdisk&lt;/code> from &lt;code>syslinux&lt;/code>.&lt;/p>
&lt;p>Copy the &lt;code>memdisk&lt;/code> into the EFI partition.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo cp /usr/lib/syslinux/bios/memdisk &lt;span class="o">(&lt;/span>esp&lt;span class="o">)&lt;/span>/memdisk
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then put the following content to &lt;code>(data)/boot.cfg&lt;/code>. For example, loading a Windows PE ISO.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cfg" data-lang="cfg">&lt;span class="line">&lt;span class="cl">&lt;span class="na">menuentry &amp;#34;Windows PE ISO&amp;#34; {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">search --set&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">root --file /boot.cfg
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> linux16 memdisk iso ro
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> initrd16 /images/winpe.iso&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="the-end">The End&lt;/h2>
&lt;p>Finally I&amp;rsquo;m very satisfied with this new USB drive. Yay!&lt;/p></description></item><item><title>Dual-booting Windows VHD and Native Linux on a BIOS+GPT PC</title><link>https://peromage.github.io/p/dual-booting-windows-vhd-and-native-linux-on-a-bios-gpt-pc/</link><pubDate>Fri, 09 Jul 2021 16:40:00 +0000</pubDate><guid>https://peromage.github.io/p/dual-booting-windows-vhd-and-native-linux-on-a-bios-gpt-pc/</guid><description>&lt;h2 id="background">Background&lt;/h2>
&lt;p>Previously I wrote a post for this dual-boot scenario. It is a little outdated. In the past year I mostly worked in the Linux environment on my old laptop, so the Windows seems not to be a necessity which occupies a dedicated partition. However, sometimes it is still needed. That is why I started thinking to improve this setup even further.&lt;/p>
&lt;p>Starting from Windows 7, Windows supports boots from a VHD file which makes it so much easier to manage. Also you are able to create differencing disks which are pretty much like snapshots.&lt;/p>
&lt;p>For this new configuration, my plan is to use BIOS + GPT disk table + Native Linux + Native Windows booting from VHD + GRUB as the bootloader.&lt;/p>
&lt;h2 id="partitioning">Partitioning&lt;/h2>
&lt;p>To make GPT works with BIOS. It is required to have a small partition &lt;a class="link" href="https://wiki.archlinux.org/title/GRUB" target="_blank" rel="noopener"
>flagged&lt;/a> with &lt;code>EF02&lt;/code>.&lt;/p>
&lt;p>The partition scheme looks like this:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Device&lt;/th>
&lt;th>Start&lt;/th>
&lt;th>End&lt;/th>
&lt;th>Sectors&lt;/th>
&lt;th>Size&lt;/th>
&lt;th>Type&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>/dev/sda1&lt;/td>
&lt;td>34&lt;/td>
&lt;td>2047&lt;/td>
&lt;td>2014&lt;/td>
&lt;td>1007K&lt;/td>
&lt;td>BIOS Boot&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda2&lt;/td>
&lt;td>2048&lt;/td>
&lt;td>1026047&lt;/td>
&lt;td>1024000&lt;/td>
&lt;td>500M&lt;/td>
&lt;td>EFI System&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda3&lt;/td>
&lt;td>1026048&lt;/td>
&lt;td>206546943&lt;/td>
&lt;td>205520896&lt;/td>
&lt;td>98G&lt;/td>
&lt;td>Linux Filesystem&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda4&lt;/td>
&lt;td>206546944&lt;/td>
&lt;td>835692543&lt;/td>
&lt;td>629145600&lt;/td>
&lt;td>300G&lt;/td>
&lt;td>Linux Filesystem&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/dev/sda5&lt;/td>
&lt;td>835692544&lt;/td>
&lt;td>1465149134&lt;/td>
&lt;td>629456591&lt;/td>
&lt;td>300.1G&lt;/td>
&lt;td>Microsoft Basic Data&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="installing-linux">Installing Linux&lt;/h2>
&lt;p>Any Linux distro would work. I chose Manjaro KDE this time because I found that the Pop OS made my laptop really hot sometimes (Yeah KDE is prettier).&lt;/p>
&lt;p>This part should be easy. The GRUB files is going into that EFI partition. For details, check &lt;a class="link" href="https://wiki.archlinux.org/title/GRUB" target="_blank" rel="noopener"
>GRUB wiki&lt;/a>.&lt;/p>
&lt;h2 id="preparing-to-install-windows">Preparing to Install Windows&lt;/h2>
&lt;p>I&amp;rsquo;m not going to use the standard Windwos installer since I want to install it into a VHD file. To make it work we need a Windows PE environment.&lt;/p>
&lt;h3 id="preparing-images">Preparing Images&lt;/h3>
&lt;p>Any Windows PE (Windows 7 and above) would work. The PE ISO image is going to &lt;code>/boot/wepe.iso&lt;/code>.&lt;/p>
&lt;p>Also a Windows ISO image is needed. For example a Windows 7 ISO named &lt;code>windows7.iso&lt;/code> will be put in the Windows data partition.&lt;/p>
&lt;h3 id="adding-windows-pe-to-grub">Adding Windows PE to GRUB&lt;/h3>
&lt;p>Boot into Linux. Download Windows PE ISO file and move it to the EFI partition (EXT4 partitions might be problematic).&lt;/p>
&lt;p>To load this ISO image, &lt;code>memdisk&lt;/code> tool from &lt;code>syslinux&lt;/code> is required. Steps as below on Arch based distro:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Installing syslinux&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo pacman -S syslinux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Copying memdisk to the boot partition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo cp /usr/lib/syslinux/bios/memdisk /boot/memdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Adding Windows PE entry to GRUB. 1DB1-9C31 is the boot partition&amp;#39;s UUID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/grub.d/40_custom
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">menuentry &amp;#34;WePE x64&amp;#34; {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> search --set=root --no-floppy --fs-uuid 1DB1-9C31
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> linux16 /memdisk iso ro
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> initrd16 /wepe.iso
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Updating GRUB entries&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="installing-windows-to-a-vhd-file">Installing Windows to a VHD File&lt;/h2>
&lt;p>After adding Windows PE to the bootloader entries, it is time to switch the working environment.&lt;/p>
&lt;p>Restart the PC, then keep pression &lt;code>shift&lt;/code> key until the GRUB menu shows up. Now navigate to the Windows PE entry and get in there.&lt;/p>
&lt;h3 id="creating-a-vhd-file-for-windows">Creating a VHD File for Windows&lt;/h3>
&lt;p>To create a VHD file, open a command line window and enter &lt;code>diskpart&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a VHD file assuming the NTFS data partition is assigned with D:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\w&lt;/span>indows7.vhd &lt;span class="nv">maximum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">64000&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>fixed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="k">select&lt;/span> vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; attach vdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Disk table type doesn&amp;#39;t matter but using MBR for better compatibility&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; convert mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create the system partition and assign it with C:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create partition primary
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; format &lt;span class="nv">fs&lt;/span>&lt;span class="o">=&lt;/span>ntfs quick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; assign &lt;span class="nv">letter&lt;/span>&lt;span class="o">=&lt;/span>c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now the Windows image can be dumped into this VHD file.&lt;/p>
&lt;h3 id="extracting-windows-image">Extracting Windows Image&lt;/h3>
&lt;p>Mount the Windows ISO image to &lt;code>E:&lt;/code> volume and open a command line window&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get the image index. For example the desired version&amp;#39;s index is 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; dism /get-wiminfo /wimfile&lt;span class="o">=&lt;/span>e:&lt;span class="se">\s&lt;/span>ources&lt;span class="se">\i&lt;/span>nstall.wim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Extract the image. Where E: is the Windows ISO and C: is the VHD file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; dism /apply-image /imagefile:e:&lt;span class="se">\s&lt;/span>ources&lt;span class="se">\i&lt;/span>nstall.wim /index:1 /applydir:c:&lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="fixing-the-windows-bootloader">Fixing the Windows Bootloader&lt;/h2>
&lt;p>Stay in Windows PE. Don&amp;rsquo;t restart the PC. We still need to fix the bootloader for Windows.&lt;/p>
&lt;p>Normally Windows cannot be booted with a GPT+MBR setup. And also loading the whole Windows VHD file through &lt;code>memdisk&lt;/code> is not possible because it&amp;rsquo;s too large to load into memory. To fix the boot issue a bridge is needed between Windows and GRUB.&lt;/p>
&lt;p>Luckily &lt;a class="link" href="http://reboot.pro/index.php?showtopic=19516&amp;amp;page=2&amp;amp;#entry184489" target="_blank" rel="noopener"
>a small VHD image&lt;/a> can still be loaded by &lt;code>memdisk&lt;/code>.&lt;/p>
&lt;p>The idea is: GRUB -&amp;gt; MS Bootmgr VHD -&amp;gt; Windows VHD&lt;/p>
&lt;h3 id="creating-a-dedicated-bootloader-image-for-windows">Creating a Dedicated Bootloader Image for Windows&lt;/h3>
&lt;p>It is same with the process creating a VHD file for Windows system but this time it is a smaller file (32 MB).&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a small bootmgr VHD file in the data partition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\b&lt;/span>ootmgr.vhd &lt;span class="nv">maximum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">32&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>fixed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="k">select&lt;/span> vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\b&lt;/span>ootmgr.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; attach vdisk
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; convert mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; create partition primary
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; format &lt;span class="nv">fs&lt;/span>&lt;span class="o">=&lt;/span>ntfs quick
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; assign &lt;span class="nv">letter&lt;/span>&lt;span class="o">=&lt;/span>f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; &lt;span class="nb">exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now the &lt;code>bootmgr&lt;/code> VHD is mounted at &lt;code>F:&lt;/code>. Then write the boot record and create boot configuration files.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bootsect /nt60 f: /mbr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; bcdboot c:&lt;span class="se">\W&lt;/span>indows /l en-us /s f: /f bios
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="fixing-the-bcd-entry">Fixing the BCD Entry&lt;/h3>
&lt;p>At this point it should be working according to the &lt;a class="link" href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/boot-to-vhd--native-boot--add-a-virtual-hard-disk-to-the-boot-menu" target="_blank" rel="noopener"
>Microsoft&amp;rsquo;s document&lt;/a>. In fact it is not.&lt;/p>
&lt;p>Let&amp;rsquo;s check the BCD entries, in a command window:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /store f:&lt;span class="se">\B&lt;/span>oot&lt;span class="se">\B&lt;/span>CD /enum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows Boot Manager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">identifier &lt;span class="o">{&lt;/span>bootmgr&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">device &lt;span class="nv">partition&lt;/span>&lt;span class="o">=&lt;/span>F:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description Windows Boot Manager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locale en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inherit &lt;span class="o">{&lt;/span>globalsettings&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">default &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resumeobject &lt;span class="o">{&lt;/span>fcd67427-e033-11eb-8826-cdf90e3873d0&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">displayorder &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">toolsdisplayorder &lt;span class="o">{&lt;/span>memdiag&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timeout &lt;span class="m">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows Boot Loader
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">identifier &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">device &lt;span class="nv">partition&lt;/span>&lt;span class="o">=&lt;/span>C:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">path &lt;span class="se">\W&lt;/span>indows&lt;span class="se">\s&lt;/span>ystem32&lt;span class="se">\w&lt;/span>inload.exe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description Windows &lt;span class="m">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locale en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inherit &lt;span class="o">{&lt;/span>bootloadersettings&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">osdevice &lt;span class="nv">partition&lt;/span>&lt;span class="o">=&lt;/span>C:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemroot &lt;span class="se">\W&lt;/span>indows
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resumeobject &lt;span class="o">{&lt;/span>fcd67427-e033-11eb-8826-cdf90e3873d0&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nx OptIn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">detecthal Yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The &lt;code>device&lt;/code> and &lt;code>osdevice&lt;/code> seems to be right but once the Windows VHD is unmounted it becomes &lt;code>unknown&lt;/code>. According to this &lt;a class="link" href="http://www.mistyprojects.co.uk/documents/BCDEdit/files/device.htm" target="_blank" rel="noopener"
>BCDEdit notes&lt;/a>, BCD entry records the partition&amp;rsquo;s information such as UUID to find the correct partition during bootup. In this case the partition can&amp;rsquo;t be found until the VHD file is mounted. But this VHD file is not mounted automatically.&lt;/p>
&lt;p>Thus we need to correct this and let &lt;code>Bootmgr&lt;/code> locate the VHD file properly.&lt;/p>
&lt;p>In a command line window:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># The identifier must match the one which is showing above&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /store C:&lt;span class="se">\B&lt;/span>oot&lt;span class="se">\B&lt;/span>CD /set &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span> device &lt;span class="nv">vhd&lt;/span>&lt;span class="o">=[&lt;/span>D:&lt;span class="o">]&lt;/span>&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /store C:&lt;span class="se">\B&lt;/span>oot&lt;span class="se">\B&lt;/span>CD /set &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span> osdevice &lt;span class="nv">vhd&lt;/span>&lt;span class="o">=[&lt;/span>D:&lt;span class="o">]&lt;/span>&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If we check the BCD entry again it doesn&amp;rsquo;t change. But if we unmount the Windows VHD it will become:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&amp;gt; bcdedit /store f:&lt;span class="se">\B&lt;/span>oot&lt;span class="se">\B&lt;/span>CD /enum
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows Boot Manager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">identifier &lt;span class="o">{&lt;/span>bootmgr&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">device &lt;span class="nv">partition&lt;/span>&lt;span class="o">=&lt;/span>E:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description Windows Boot Manager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locale en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inherit &lt;span class="o">{&lt;/span>globalsettings&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">default &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resumeobject &lt;span class="o">{&lt;/span>fcd67427-e033-11eb-8826-cdf90e3873d0&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">displayorder &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">toolsdisplayorder &lt;span class="o">{&lt;/span>memdiag&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">timeout &lt;span class="m">30&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Windows Boot Loader
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">identifier &lt;span class="o">{&lt;/span>default&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">device &lt;span class="nv">vhd&lt;/span>&lt;span class="o">=[&lt;/span>C:&lt;span class="o">]&lt;/span>&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">path &lt;span class="se">\W&lt;/span>indows&lt;span class="se">\s&lt;/span>ystem32&lt;span class="se">\w&lt;/span>inload.exe
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">description Windows &lt;span class="m">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">locale en-us
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inherit &lt;span class="o">{&lt;/span>bootloadersettings&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">osdevice &lt;span class="nv">vhd&lt;/span>&lt;span class="o">=[&lt;/span>C:&lt;span class="o">]&lt;/span>&lt;span class="se">\w&lt;/span>indows7.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemroot &lt;span class="se">\W&lt;/span>indows
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">resumeobject &lt;span class="o">{&lt;/span>fcd67427-e033-11eb-8826-cdf90e3873d0&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nx OptIn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">detecthal Yes
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The volume letter doesn&amp;rsquo;t matter, it changes dynamically. Now &lt;code>bootmgr&lt;/code> is able to locate the VHD file correctly.&lt;/p>
&lt;h2 id="adding-windows-to-grub">Adding Windows to GRUB&lt;/h2>
&lt;p>Restart PC and get into Linux.&lt;/p>
&lt;p>Modify the GRUB config file to load &lt;code>bootmgr&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Adding Windows (bootmgr) entry to GRUB. 1DB1-9C31 is the boot partition&amp;#39;s UUID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/grub.d/40_custom
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">menuentry &amp;#34;Windows 7&amp;#34; {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> search --set=root --no-floppy --fs-uuid 1DB1-9C31
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> linux16 /memdisk harddisk
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> initrd16 /bootmgr.vhd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Updating GRUB entries&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo grub-mkconfig -o /boot/grub/grub.cfg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now we can restart PC. Keep pressing &lt;code>shift&lt;/code> on bootup to go to the GRUB menu. Select Windows entry to boot Windows.&lt;/p>
&lt;h2 id="fixing-windows-initialization-error">Fixing Windows Initialization Error&lt;/h2>
&lt;p>During the first time bootup, Windows might have an error showing&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">Windows could not complete the installation. To install Windows on this computer, restart the installation.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To &lt;a class="link" href="https://www.howisolve.com/windows-could-not-complete-the-installation-solved/" target="_blank" rel="noopener"
>solve&lt;/a> this error:&lt;/p>
&lt;ol>
&lt;li>Press &lt;code>SHIFT + F10&lt;/code> to bring up the command prompt.&lt;/li>
&lt;li>Execute &lt;code>C:\windows\system32\oobe\msoobe&lt;/code>.&lt;/li>
&lt;li>Wait for a while and the setup window will show up.&lt;/li>
&lt;li>Complete the setup and restart.&lt;/li>
&lt;/ol>
&lt;h2 id="creating-a-differencing-disk">Creating a Differencing Disk&lt;/h2>
&lt;p>A differencing disk can be used for quick recoveries.&lt;/p>
&lt;p>To create it, restart into the Windows PE environment. In a command line window:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Use the original VHD as base&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; move d:&lt;span class="se">\w&lt;/span>indows7.vhd d:&lt;span class="se">\w&lt;/span>indows7_base.vhd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a differencing disk based on the original one&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># The name of the new differencing disk has to be the name that was recorded in the BCD&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt; diskpart
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DISKPART&amp;gt; creat vdisk &lt;span class="nv">file&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\w&lt;/span>indows7.vhd &lt;span class="nv">parent&lt;/span>&lt;span class="o">=&lt;/span>d:&lt;span class="se">\w&lt;/span>indows7_base.vhd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then all changes made in the future will go into the differencing disk. If system goes wrong one day, simply deleting the the differencing disk and creating a new one would quickly recover from the crysis.&lt;/p>
&lt;p>&lt;strong>NOTE: After creating the differencing disk, the base VHD is not supposed to be modified.&lt;/strong>&lt;/p>
&lt;h2 id="references">References&lt;/h2>
&lt;p>&lt;a class="link" href="https://wiki.archlinux.org/title/GRUB" target="_blank" rel="noopener"
>GRUB wiki&lt;/a>
&lt;a class="link" href="https://wzyboy.im/post/1049.html" target="_blank" rel="noopener"
>BIOS + GPT + GRUB + Linux + Windows 折腾笔记&lt;/a>
&lt;a class="link" href="https://rimo.site/2017/02/08/install-win7-into-vhd/" target="_blank" rel="noopener"
>在 VHD 中安装 Windows 7&lt;/a>
&lt;a class="link" href="http://reboot.pro/index.php?showtopic=19516&amp;amp;page=2&amp;amp;#entry184489" target="_blank" rel="noopener"
>Hack Bootmgr to boot Windows in BIOS to GPT&lt;/a>
&lt;a class="link" href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/boot-to-vhd--native-boot--add-a-virtual-hard-disk-to-the-boot-menu" target="_blank" rel="noopener"
>Boot to a virtual hard disk: Add a VHDX or VHD to the boot menu&lt;/a>
&lt;a class="link" href="http://www.mistyprojects.co.uk/documents/BCDEdit/files/device.htm" target="_blank" rel="noopener"
>BCDEdit notes&lt;/a>
&lt;a class="link" href="https://www.howisolve.com/windows-could-not-complete-the-installation-solved/" target="_blank" rel="noopener"
>100% Solved:Windows could not complete the installation&lt;/a>&lt;/p></description></item></channel></rss>