[{"categories":null,"contents":"Privacy Notice This website does not collect any data from you.\nHowever, this website is themed with Skeria which loads some external resources and scripts.\nIf you have concerns, please visit its home page for more information.\n","permalink":"https://peromage.github.io/privacy/","tags":null,"title":"Privacy"},{"categories":null,"contents":"This website and its content are licensed under the GNU General Public License v3.0.\nThis website is built with Emacs, Org Mode, Hugo, ox-hugo and Skeria. Please refer to these projects\u0026rsquo; home page for licenses.\n","permalink":"https://peromage.github.io/license/","tags":null,"title":"License"},{"categories":["emacs"],"contents":"Background I previously wrote a post about managing blog posts with ox-hugo in org mode. I used to follow the recommendation to keep posts under org subtrees. As posts grew, I found that the opening speed is quite slow even I didn\u0026rsquo;t have many pictures inserted. Although managing the entire site within one file does have some convenience, the slowness is something I can\u0026rsquo;t bear.\nAlso I feel it a little awkward when I use the subtree style management. I always worried about if the format was correct like how many empty lines between posts or if something was accidentally changed outside of the post that I was editing. And in order to maintain the subtree structure, the actual posts have to be indented (nested), which is not what I like. There are solutions for this nested editing. I used to use org-narrow-to-subtree when I was editing the post and use widen to switch the view back. But still, I always worried about the format (please forgive OCD patient).\nHowever, I want to continue using ox-hugo. It is a wonderful package indeed! Luckily, it supports file-based style.\nGlobal properties One of the benefits that subtree style brings is you can inherit properties from the parent nodes. You can put category tags on the parent node. When creating posts under it, all posts will automatically inherit the category when they get exported. Also you can set some global org settings in the header so all posts can share it.\nI want to have as much as close to this goodies when I use file-based style I created a setup.conf file as the global settings.\n# -*- mode: org; -*- # setup.conf Author. #+author: John Doe On file open. #+startup: fold #+startup: indent #+startup: logdone #+startup: logdrawer Todo states. #+seq_todo: DRAFT(d) | CREATED(c!) PUBLISHED(p!) Categories. This is mainly for subtree-based export style. #+tags: @emacs @coding @linux @tech @ramble @折腾 Posts under categories are expected to read this so the path is relative to the post files. #+hugo_base_dir: ../../hugo Default section. #+hugo_section: blog Date and time. #+hugo_auto_set_lastmod: t #+options: d:t ... When starting a new post, simple use it as the setup file. The editing experience will be consistent. If some settings needs to be overridden in this post specifically, put them before the #+setupfile directive (same settings only the first occurrence gets applied).\n# new-post.org #+startup: nofold #+setupfile: ./setup.conf ... Something needs to be noticed is, as you can see, I\u0026rsquo;ve put some descriptions in the config file. Don\u0026rsquo;t worry. Only org directives will be read when used by #+setupfile. This is great because it gives you flexibility to keep comments of those settings in case you forget in the future.\nInherit category I also want to have the ability to inherit category so I don\u0026rsquo;t need to manually type it. Indeed I sometimes forget what categories I have if I don\u0026rsquo;t write blog for a while.\nTo achieve this, I created a few subfolders as categories and put posts under them respectively. Then I created another setup.conf under each category folder with the settings.\n# emacs/setup.conf #+hugo_categories: emacs #+setupfile: ../setup.conf Don\u0026rsquo;t doubt it. #+setupfile can be used recursively! Fantastic! Now new posts under emacs category just need to include this file in their headers and they will be assigned to this category automatically during export.\nHugo pages I actually use ox-hugo in a hybrid way. For navigation pages, I continue managing them with subtrees and overriding settings if it\u0026rsquo;s different from the global with heading properties.\nExport script I used to use a shell script to export. Just realized that Emacs had script support since version 22 so I created a Elisp script for this purpose.\nSimilar solution This can also be achieved by using Emacs local variable but it will ask you to confirm if those variables are safe if you don\u0026rsquo;t persist the settings. I find it quite annoying especially used with CI. It will most likely break CI if you are not careful.\nHowever, this is more convenience than the header method when you have nested folder structures. It can calculate the Hugo base path when the variables get evaluated.\n((org-mode . ((eval . (setq org-hugo-base-dir (locate-dominating-file default-directory \u0026#34;.git\u0026#34;)))))) Be careful when using it with CI.\nFolder structure My folder structure finally looks like this.\n. ├── coding │ ├── post1.org │ ├── post2.org │ ├── post3.org │ └── setup.conf ├── emacs │ ├── post1.org │ ├── post2.org │ ├── post3.org │ └── setup.conf ├── linux │ ├── post1.org │ ├── post2.org │ ├── post3.org │ └── setup.conf ├── tech │ ├── post1.org │ ├── post2.org │ ├── post3.org │ └── setup.conf ├── setup.conf ├── hugo-pages.org └── ox-hugo-export.el Summary Now I feel it much clearer. ox-hugo is a definitely a fantastic package. It helps me manage posts in org mode and seamlessly work with Hugo with ease.\nIf you haven\u0026rsquo;t used either org mode or Hugo, I highly recommend to give them a try.\n","permalink":"https://peromage.github.io/p/file-based-blog-management-with-ox-hugo/","tags":["emacs","org","ox-hugo","hugo"],"title":"File-based Blog Management with ox-hugo"},{"categories":["emacs"],"contents":"I found that there were few posts mentioning about using lisp-data files. However, it seems to be used widely in various packages.\nEmacs manumal has a very detailed description of how to read and write lisp objects. In this post I\u0026rsquo;ll mainly demonstrate one specific use case.\nRead from file The biggest challenge is to parse file content to Lisp lists. After a quick search with describe-function, read function is able to perfectly handle it in this case.\nSuppose we have a lisp-data file named mydata with the content below.\ncat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;mydata ;;; mydata -*- lisp-data -*- ((\u0026#34;~/repo/peromage.github.io/\u0026#34;) (\u0026#34;~/.emacs.d/\u0026#34;) (\u0026#34;~/some/random/place\u0026#34;)) EOF When we read it, we should read the whole file as a string first and then pass it to read function. The easiest way is to use with-temp-buffer.\n(setq data (read (with-temp-buffer (insert-file-contents \u0026#34;mydata\u0026#34;) (buffer-string)))) (print data) (print (nth 1 data)) ((\u0026#34;~/repo/peromage.github.io/\u0026#34;) (\u0026#34;~/.emacs.d/\u0026#34;) (\u0026#34;~/some/random/place\u0026#34;)) (\u0026#34;~/.emacs.d/\u0026#34;) Write to file Opposite to read, to write to file in format that read understands, use print or prin1. Unlike princ which outputs something that human readable, like removing double quotes for string, these two functions will keep the original data format.\nSuppose there is a list that we want to save to a file.\n(setq data \u0026#39;((\u0026#34;foo\u0026#34;) (\u0026#34;bar\u0026#34;) (\u0026#34;baz\u0026#34;))) To write to a file.\n(with-temp-file \u0026#34;saved_data\u0026#34; (insert \u0026#34;;;; saved_data -*- lisp-data -*-\\n\u0026#34;) (print data (current-buffer))) Check the out file.\ncat saved_data ;;; mydata -*- lisp-data -*- ((\u0026#34;foo\u0026#34;) (\u0026#34;bar\u0026#34;) (\u0026#34;baz\u0026#34;)) Nice.\n","permalink":"https://peromage.github.io/p/use-lisp-data-files-in-emacs/","tags":["emacs","elisp"],"title":"Use lisp-data Files in Emacs"},{"categories":["linux"],"contents":"I recently got my new laptop and I found that some additional tweaks need to be made for laptops. Thus, this post is to have a record in case I forget when I have to reinstall the system.\nInstalling Arch Linux I have a script to handle this: https://github.com/peromage/pew/blob/master/rice/scripts/setup/arch-install.sh\nLaptop Disk Partitioning and Encryption Unlike desktop, laptops have to be secure so encrytion is a must.\nDetails of how-to can be found on Arch wiki. I\u0026rsquo;m not going to go through that here. However, I\u0026rsquo;ll note down some considerations and things that need to pay attention to.\nPartitioning Arch wiki about BTRFS\nUsing too many partitions is not good for SSD so I only have two partitions on the disk: EFI partition (also as boot) + a big partition formated with BTRFS. The second partition is encrypted, which will be demonstrated in the next topic.\nWith BTRFS, I can use subvolume to achieve the similar effect like what partition does, but it is more flexible.\nThese subvolumes are created under the big BTRFS\u0026rsquo;s root.\nSubvolume Mount Point Note @arch-root / System root @arch-var /var Avoid getting snapshot @home /home Separated home @swap /.swap Swap files (no compression, no CoW) @snapshot /.snapshot Snapshots An example of how fstab is set up.\nBe aware that swap subvolume should NOT be mounted with compression on.\n# \u0026lt;file system\u0026gt; \u0026lt;dir\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; # /dev/mapper/myroot LABEL=FFROOT UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6\t/ btrfs rw,noatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@arch-root\t0 1 # /dev/nvme0n1p1 LABEL=EFI UUID=1569-822D /boot vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro\t0 2 # /dev/mapper/myroot LABEL=FFROOT UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6\t/home btrfs rw,noatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@home\t0 2 # /dev/mapper/myroot LABEL=FFROOT UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6\t/var btrfs rw,noatime,compress=zstd:3,ssd,space_cache=v2,subvol=/@arch-var\t0 2 # /dev/mapper/myroot LABEL=FFROOT UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6\t/.swap btrfs rw,noatime,ssd,space_cache=v2,subvol=/@swap 0 2 # Swap files /.swap/swap-32gb.img none swap defaults 0 0 Encryption Arch wiki about encryption\nUse LUKS2. The latest GRUB2 has integrated the support for this new algorithm. Why not using it?\nAs for the scheme, I leave EFI partition unencrypted and encrypt the whole BTRFS partition. EFI partition also acts as boot partition (ramfs and kernel reside).\nThe reason that I don\u0026rsquo;t put boot partition encrypted is that I have to decrypt twice on startup: once by GRUB and the other one by kernel. Though there is a way to setup a key file to avoid that, I still prefer typing password (Maybe TPM can be used).\nTo tell kernel to decrypt the disk on startup, ramfs and kernel parameters have to be updated.\nKernel parameters. The UUID has to be the UUID of the partition itself (not unencrypted BTRFS partition).\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;cryptdevice=UUID=51d2be03-b9a4-4d4d-bc5a-0a9dba854c1f:ffroot root=/dev/mapper/ffroot\u0026#34; Update ramfs hooks. encrypt needs to go after udev.\nHOOKS=(base udev autodetect modconf block filesystems keyboard fsck encrypt) Hibernation A workaround has to be made on BTRFS with swap files.\nFirst swap files should NOT be set with CoW attribute.\nFollow this wiki to calculate swap file physical offset on BTRFS partition.\nThen set kernel parameters. The UUID should be the UUID of decrypted BTRFS partition. Differentiate from the UUID above.\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;resume=UUID=dcc33411-f4ae-46e0-ba7a-f285301b25f6 resume_offset=3420784\u0026#34; Update ramfs. Add resume hook.\nHOOKS=(base udev autodetect modconf block filesystems keyboard fsck encrypt resume) TLP My TLP preferences.\n# /etc/tlp.d/my-power-plan.conf TLP_DEFAULT_MODE=AC TLP_PERSISTENT_DEFAULT=0 CPU_SCALING_GOVERNOR_ON_AC=performance CPU_SCALING_GOVERNOR_ON_BAT=powersave CPU_ENERGY_PERF_POLICY_ON_AC=balance_performance CPU_ENERGY_PERF_POLICY_ON_BAT=balance_power CPU_MIN_PERF_ON_AC=0 CPU_MAX_PERF_ON_AC=100 CPU_MIN_PERF_ON_BAT=0 CPU_MAX_PERF_ON_BAT=20 CPU_BOOST_ON_AC=1 CPU_BOOST_ON_BAT=0 CPU_HWP_DYN_BOOST_ON_AC=1 CPU_HWP_DYN_BOOST_ON_BAT=0 SCHED_POWERSAVE_ON_AC=0 SCHED_POWERSAVE_ON_BAT=1 HiDPI Update: I switched to KDE as the default desktop environment so HiDPI is not a problem anymore.\nXFCE - Obsolete XFCE is my choice of \u0026ldquo;just works\u0026rdquo; desktop environment. It has some issues with HiDPI out of the box so some tweaks need to be made.\nArch wiki has elaborated it already.\nIn short, update scaling:\nxfconf-query -c xsettings -p /Gdk/WindowScalingFactor -s 2 xfconf-query -c xfwm4 -p /general/theme -s Default-xhdpi In ~/.xinitrc:\nexport GDK_DPI_SCALE=0.5 exec startxfce4 The only problem is 2x scaling sometimes is too big. GTK doesn\u0026rsquo;t have the plan to support fractional scaling, which sucks. I might switch to a Qt-based desktop environment.\nFirefox scrolling with touchpad Yuck. Default scrolling experience on touchpad is just disgusting. To optimize it a bit, go to about:config page.\nChange configurations:\nmousewheel.acceleration.start 1 mousewheel.default.delta_multiplier_y 2 Framework Laptop Specific Framework laptop needs some additional tweaks.\nAmbient Light Sensor # pacman -S iio-sensor-proxy Fingerprint # pacman -S fprintd Bluetooth # pacman -S bluez bluez-utils # systemctl enable --now bluetooth Touchpad Two-finger/Three-finger Click Get touchpad device id # xinput Add to .xinitrc # xinput set-prop \u0026lt;device\u0026gt; \u0026#39;libinput Click Method Enabled\u0026#39; 0 1 Brightness Keys Add to kernel parameters:\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;module_blacklist=hid_sensor_hub\u0026#34; Suspend Power Add to kernel parameters:\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;mem_sleep_default=deep nvme.noacpi=1\u0026#34; ","permalink":"https://peromage.github.io/p/arch-linux-on-laptop/","tags":["arch_linux","laptop"],"title":"Arch Linux on Laptop"},{"categories":["tech"],"contents":"Though I\u0026rsquo;ve written posts about dual-booting Windows and Linux and multi-booting a USB drive, I have to go back and dig useful information out each time when I forget something.\nAfter breaking my dual-boot setup once again (forgot to backup boot partition), I decided to create this post for a quick reference.\nThis reference assumes system is boot from UEFI and Windows is installed on a dedicated partition.\nSetup A USB With System Images Forget the previous multi-boot USB post. Use Ventory and it just works great.\nIn this case we need a Linux and Windows ISO. For Linux, I prefer Arch. For Windows, we need a PE environment. I don\u0026rsquo;t trust those PE ISOs from other people so the best way is to download an official image from Microsoft since we just need some tools and they are included in the installation ISO already.\nMethod 1: Load Windows From GRUB To prevent Windows from messing up with Linux\u0026rsquo;s bootloader, a good idea is to put Windows\u0026rsquo; bootloader in a VHD file and chainload it from GRUB.\nFix Windows\u0026rsquo;s Bootloader Boot into Windows installation ISO.\nDon\u0026rsquo;t start installing. Instead, choose Repair your computer -\u0026gt; Troubleshoot -\u0026gt; Command Prompt.\nWe need to create a VHD that contains Windows bootmgr. I used to create a file in 32 MB but it seems too small for the most recent bloated Windows so in case, we use 128 MB here.\nNOTE: This file will be loaded into memory so don\u0026rsquo;t make it too big.\nIn diskpart, use list volume to confirm EFI partition volume letter. Usually it will not be assigned by PE environment automatically.\nNOTE: The file can be put in Windows partition though. It requires extra setup like load NTFS module for grub and find it\u0026rsquo;s root. That\u0026rsquo;s too cumbersome.\n\u0026gt; diskpart DISKPART\u0026gt; list volume # EFI partition DISKPART\u0026gt; select volume 2 DISKPART\u0026gt; assign letter=e DISKPART\u0026gt; create vdisk file=e:\\bootmgr.vhd maximum=128 type=fixed DISKPART\u0026gt; select vdisk file=e:\\bootmgr.vhd DISKPART\u0026gt; attach vdisk DISKPART\u0026gt; convert mbr DISKPART\u0026gt; create partition primary DISKPART\u0026gt; format fs=ntfs quick DISKPART\u0026gt; assign letter=f DISKPART\u0026gt; exit Now the bootloader VHD is mounted at F:. Then write the boot record and create boot configuration files.\nNOTE: Windows partition volume letter should be confirmed in diskpart above. It\u0026rsquo;s usually assigned by PE automatically. In this case it is C:.\n\u0026gt; bootsect /nt60 e: /mbr \u0026gt; bcdboot c:\\Windows /l en-us /s e: /f uefi Add Window to GRUB Boot into Linux and confirm EFI partition UUID where you put the Windows bootloader VHD file. In command line:\n$ lsblk -f Configure GRUB menu to include Windows. Assume the EFI partition is mounted at /boot/efi and memdisk (got from syslinux) is put at EFI partition\u0026rsquo;s root.\n$ sudo cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;/etc/grub.d/40_custom menuentry \u0026#34;Windows 10\u0026#34; { search --set=root --no-floppy --fs-uuid 1DB1-9C31 linux16 /memdisk harddisk initrd16 /bootmgr.vhd } EOF $ sudo grub-mkconfig -o /boot/grub/grub.cfg Problem I found that on Fedora linux16 and initrd16 is not available by default. A workaround must be done. If it comes in this case, I suggest to use method 2 below.\nMethod 2: Add Windows Back To UEFI Menu This method is simpler and it takes advantage of UEFI boot menu but there is possibility that Windows is going to break Linux if Linux is the default.\nFix Windows\u0026rsquo;s Bootloader Boot into Windows installation ISO.\nDon\u0026rsquo;t start installing. Instead, choose Repair your computer -\u0026gt; Troubleshoot -\u0026gt; Command Prompt.\nIn diskpart, use list volume to confirm EFI partition volume letter. Usually it will not be assigned by PE environment automatically.\nFirst, mount EFI partition and backup Linux EFI files because Windows will overwrite the default settings :).\n\u0026gt; diskpart DISKPART\u0026gt; list volume # EFI partition DISKPART\u0026gt; select volume 2 DISKPART\u0026gt; assign letter=e DISKPART\u0026gt; exit # Backup default UEFI entry (Linux) \u0026gt; cd /d e:\\EFI \u0026gt; ren BOOT linux_BOOT Then Create Windows boot files.\n# Windows volume is C: confirmed from diskpart above \u0026gt; bcdboot c:\\Windows /l en-us /s e: /f uefi Lastly, restore Linux as the default start option. If you want Windows to be the default, leave it as it.\nNOTE: For Fedora it seems to be a problem to be a none-default entry when log into display manager. Not sure why. So it\u0026rsquo;d be better to restore default for Fedora.\n# Restore default Linux entry \u0026gt; ren Boot Microsoft_Boot \u0026gt; ren linux_BOOT BOOT ","permalink":"https://peromage.github.io/p/windows-rescure-quick-reference/","tags":["multi_boot","windows"],"title":"Windows Rescure Quick Reference"},{"categories":["linux"],"contents":"I found that every time when I try to setup VNC for remote access I always have troubles configuring it. I believe this is due to some conceptions which can be easily confusing. So this post serves both notes and reminder for myself.\nChoose a VNC Server Generally I use TigerVNC. It\u0026rsquo;s a fork of TightVNC and the performance is pretty good. Also, it\u0026rsquo;s easy to configure. However, when it comes to installation there are two types of servers: standalone and scraping.\nThe difference is:\nStandalone: It creates a new X server when the client is connected. Independent from the local X server. Scraping: It mirrors the local X server. Pretty much like screen sharing. Usually they are shipped with individual packages. To install, for example, on Ubuntu\n$ sudo apt install tigervnc-standalone-server $ sudo apt install tigervnc-scraping-server Standalone Server Configuring a standalone server is fairly easy. You would only need three things: client password, server config and server startup script. They are all located under $HOME/.vnc/.\nCreate the password file. $ vncpasswd Create the server config file ($HOME/.vnc/config). A minimal configuration is shown as following. geometry=1366x768 alwaysshared localhost Create the server startup script ($HOME/.vnc/xstartup). This is also a minimal configuration. #!/bin/sh unset DBUS_SESSION_BUS_ADDRESS vncconfig -iconic \u0026amp; dbus-launch --exit-with-session /usr/bin/gnome-session --session=ubuntu Be aware that the last line dbus-launch is important on some distros that are shipped with default desktop environment. Without it the VNC server could not be started correctly. This is because the newly launched desktop environment tries to reuse the existing D-Bus but it\u0026rsquo;s occupied by the local X server already. dbus-launch makes sure it runs in its own little world. See dbus-launch\u0026rsquo;s man page for details.\nStart the server. Make sure the display port is not used by anyone else. $ vncserver :1 Connect from the client. On the remote PC: $ ssh -L 5901:localhost:5901 -t user@ip The TCP port depends on the display port used to start the VNC server. The equation is like: TCP_PORT = 5900 + DISPLAY_PORT. Usually the :0 is taken by local X server.\nUse any VNC client to connect to localhost:5901.\nScraping Server Configuring a scraping server is slightly different from the standalone server but it\u0026rsquo;s not hard.\nCreate the password file. Same with the standalone server. $ vncpasswd Start the server. This is where it\u0026rsquo;s different from the standalone one. Since it replicates the local X server it doesn\u0026rsquo;t need the configuration. $ x0vncserver -rfbauth $HOME/.vnc/passwd Don\u0026rsquo;t forget to specify the password file or you\u0026rsquo;ll not be able to connect to it.\nConnect from the client. Same with the standalone server. On the remote PC: $ ssh -L 5900:localhost:5900 -t user@ip Local X server already uses display port :0. Then use any VNC client to connect to localhost:5900.\nSynonyms of TigerVNC I was confused by the TigerVNC since there are similar commands. It turned out they are the same.\nvncserver -\u0026gt; tigervncserver vncconfig -\u0026gt; tigervncconfig vncpasswd -\u0026gt; tigervncpasswd ","permalink":"https://peromage.github.io/p/vnc-quick-guide/","tags":["vnc","remote"],"title":"VNC Quick Guide"},{"categories":["coding"],"contents":"Troubles When working with a complicated project where you have to compare different history versions side by side, it soon becomes frustrating frequently checking out refs.\nThe old stupid way is to clone multiple repos and checkout to the specific revisions. When the project is big this might be a trouble because you\u0026rsquo;re basically duplicating files.\nSavior Git provides a convenience sub-command worktree to checkout a specific ref in another directory without duplicating files.\nAdd a New Checkout $ git worktree add ../foo-ref-1 \u0026lt;ref\u0026gt; Of course you can add as many checkouts as you want.\nRemove a Checkout When the checkout is no longer needed, it can be deleted from this command.\n$ git worktree remove --force ../foo-ref-1 If there are uncommitted changes git will prevent you from deleting the directory. In this case --force flag is needed.\n","permalink":"https://peromage.github.io/p/use-git-worktree-to-work-with-multiple-checkout-at-the-same-time/","tags":["git"],"title":"Use Git Worktree to Work with Multiple Checkout at the Same Time"},{"categories":["emacs"],"contents":"Autoloading is a neat feature in Emacs. It speeds up Emacs by lazy load the files. But it could be a little confusing if you\u0026rsquo;re switching from Vim.\nMyth - Not Working as Expected If you have used Vim you know in Vim you can put your library files to the load path variable and Vim autoloads them whenever one of the functions/variables is used. Initially I thought this is the same in Emacs but with a little effort to put the magic autoload comments before the function/variable definition. It turned out I was wrong. When I called my functions Emacs could not find them until I explicitly require them. This is obviously not my intention.\nMake It Work After carefully reading the document, I got that the magic autoload comment is just a autoload cookie that guides Emacs to generate the real autoload code. In one word, I have to define the function/variable autoload definition anyways. But with the cookies it simplifies the process.\nAdd magic comment ;;;###autoload before the desired function/variable definition. M-x update-file-autoloads command on the library file which contains the definitions that need to be autoloaded. Store that generated autoload definition file with a different name. Require that autoload definition file in the init.el. That\u0026rsquo;s the process to autoload the custom library. The downside is the update-file-autoloads command has to be called every time the library file is updated.\nAlternative way is to use package-install-from-buffer to install the library file as a package. package.el does the dirty work for you, takes care of autoload definition generation and loading automatically.\nReference https://emacs.stackexchange.com/questions/8023/how-to-use-autoload\n","permalink":"https://peromage.github.io/p/autoloading-in-emacs/","tags":["emacs","autoloading"],"title":"Autoloading in Emacs"},{"categories":["emacs"],"contents":"I\u0026rsquo;ve been using Emacs since last year but until recent I started using org-mode seriously. After spending a couple of days reading and watching all kinds of org tutorial as well as using it for documentation, I realized that people who invented this must geniuses.\nOrg document seems similar with Markdown: they are text markup format. However, Org provides far more capabilities to store metadata and greater editing experience together with Emacs\u0026rsquo; org-mode.\nMotivation I used to use Markdown to write my blog articles and use Hugo to generate static files.\nThe workflow is pretty much like:\nCreate a new Markdown with header by either snippet template from text editor or Hugo command. Write the article. Set last modified time upon finished. Commit and push then let GitHub CI to generate static files automatically. It looks typical but later on I found it was really frustrating to manage my articles:\nI always forgot to update the last modified time. Tags and categories were set in the header each file. It\u0026rsquo;s difficult check existing tags and categories and make them consistent in the new articles. For example, I always forgot whether a tag or category was capitalized or dash separated. Painful to browse. Because of those troubles I gradually lost interests writing articles until I found org-mode. So I started planning to manage my articles with it.\nChoose the Right Way By checking Hugo\u0026rsquo;s documents, I found that it supports Org backend with go-org. However it seems like just another Markdown method but in Org syntax. Apparently it doesn\u0026rsquo;t use the full Org capabilities.\nLater I found ox-hugo which is an Org backend in Emacs used for Org file export. The idea is to write articles in Org syntax with metadata and whatever you like to do in org-mode and then export to Markdown files through ox-hugo. Finally feed the Markdown files to the Hugo engine. The killer feature is that it supports exporting from subtrees, which means you can manage all my articles in one file categorize them with ease (by the first level outline). And since all the articles are in the same visible file, they can be refiled and move around with org-mode key bindings. Also all tags are visible and can be applied very easily. It gives you a lot flexibility to manage the articles in this way.\nAt the time when this article is read, it\u0026rsquo;s been written in org-mode already. I even use the same file to manage other pages of my blog like about, archives and search pages. You can checkout my original Org file here to figure out how they are defined.\nUpdate CI to Build Static Files on Pushing Since all the articles are managed by the Org file there is no point to keep the old Markdown files. I need to make GitHub CI export the Org file for me so I don\u0026rsquo;t have to do it locally.\nThe problem is to setup Emacs on the job runner. Luckily there are people doing this already by providing a GitHub action. Thanks Steve Purcell and the people who worked on this!\nNow with the Emacs setup ready, one problem left is to export from Org files to Markdown. The idea is pretty straight forward: install ox-hugo from MELPA and export through it. A simple shell command should do the job.\nemacs -nw --batch --eval \\ \u0026#39;(progn (package-initialize) (add-to-list (quote package-archives) (quote (\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;))) (package-refresh-contents) (package-install (quote ox-hugo)) (find-file \u0026#34;myblog/blog.org\u0026#34;) (org-hugo-export-wim-to-md :all))\u0026#39; After that, feed the generated Markdown files to Hugo engine. No difference from the typical Hugo workflow.\nSee here for my job runner script and workflow configuration.\nFix the Last Modified Date By doing this workflow all the files are always generated so their last modified date are constantly changed (with #+hugo_auto_set_lastmod: t in the header). ox-hugo seems not to have a proper solution to calculate the diff between changes (could be hard though). The best way to solve this is to add either a :LOGBOOK: or a EXPORT_HUGO_LASTMOD property to the subtree. Or even simpler to use TODO and DONE workflow since it generates :LOGBOOK: automatically. When any one of them specified ox-hugo will the value from it instead of generating a new date.\nSince manually changing the modification time in EXPORT_HUGO_LASTMOD sucks and it\u0026rsquo;s the same solution back in the Markdown style, this time I decided to use \u0026ldquo;Org\u0026rdquo; way to fix this problem. By looking at the document, :LOGBOOK: has the highest priority among other options and also has a synergy with todo workflow. That\u0026rsquo;s cool. I can treat my article writing like any other tasks.\nBut I don\u0026rsquo;t quite like the default keywords TODO and DONE since they doesn\u0026rsquo;t sound semantic to the articles. So I added a header to my blog Org file: #+seq_todo: DRAFT(d) | PUBLISHED(p!).\nThen I found another problem that whenever I change the state from DRAFT to PUBLISHED there is always a CLOSED time property added to the article. This is because I have (setq org-log-done 'time) in my Emacs configuration file. It duplicates :LOGBOOK: since it has already logged the transition time and I don\u0026rsquo;t want to change my Emacs configuration specific for this file. So I added another header to my blog Org file: #+startup: nologdone and also make sure the state transition records are always put into the drawer: #+startup: logdrawer.\nOkay now I should be able to start a new article with DRAFT prefix and then use C-c C-t to change it to PUBLISHED whenever I\u0026rsquo;m done writing. However things are still not going as I expected. Remember the date precedence page? The first transition to PUBLISHED state record is recognized as the creation date. Only the second or later records to PUBLISHED state will be read as the last modified date. That\u0026rsquo;s dumb. To fix this, I added a new todo item and now it\u0026rsquo;s like: #+seq_todo: DRAFT(d) | CREATED(c!) PUBLISHED(p!).\nNow my blog header is like:\n#+author: Fang Deng #+startup: show2levels #+startup: nologdone #+startup: logdrawer #+seq_todo: DRAFT(d) | CREATED(c!) PUBLISHED(p!) #+options: d:t #+hugo_base_dir: ../ #+hugo_section: blog #+hugo_auto_set_lastmod: t Don\u0026rsquo;t forget the #+options: d:t. ox-hugo will not export :LOGBOOK: without it.\nFinally a sweet snippet file to save my life.\n# -*- mode: snippet -*- # name: Hugo new article # key: hugonew # -- ** DRAFT ${1:TITLE} :PROPERTIES: :EXPORT_FILE_NAME: ${1:$(replace-regexp-in-string \u0026#34;[^A-Za-z0-9._-]\u0026#34; \u0026#34;\u0026#34; (replace-regexp-in-string \u0026#34; \u0026#34; \u0026#34;-\u0026#34; (downcase yas-text)))} :END: :LOGBOOK: - State \u0026#34;CREATED\u0026#34; from [`(string-trim (format-time-string (cdr org-time-stamp-formats)) \u0026#34;\u0026lt;\u0026#34; \u0026#34;\u0026gt;\u0026#34;)`] :END: $0 Now a new article will come with its creation time. Whenever the article is done, C-c C-t to mark it PUBLISHED which will be the last modified time. If the article is modified in the future, simply C-c C-t again to add another PUBLISHED state and the last modified time will be refreshed on export. Now I have a neat log book to record my changes. No more manually editing suckers!\n","permalink":"https://peromage.github.io/p/use-org-mode-to-manage-my-blog/","tags":["emacs","org","markdown","hugo","ox_hugo"],"title":"Use Org Mode to Manage My Blog"},{"categories":null,"contents":"Me Hi there. This is Fang.\nI\u0026rsquo;m currently a C++ developer working with one of the well-known automotive companies.\nI have hair. A lot.\nEmacser. Former Vimmer.\nOh most importantly, happy wife happy life. :)\nContact Email: fang(at)saffyyre.com\nGithub: https://github.com/peromage\n","permalink":"https://peromage.github.io/about/","tags":null,"title":"About"},{"categories":null,"contents":"","permalink":"https://peromage.github.io/search/","tags":null,"title":"Search"},{"categories":["coding"],"contents":"Background I\u0026rsquo;ve been working on optimization for some C++ code recently. One of the part is to initialize some data at compile time. Consider we have a C style enum definition:\ntypedef enum Foo { AAA = 0, BBB, CCC } Foo_t; We want to have an array of the enum with undefined initial values 999 because by default initialization the values would be 0\u0026rsquo;s. However, std::array can only be initialized by initializer list, which is said:\n// Partial initialization constexpr std::array\u0026lt;Foo_t, 5\u0026gt; array {static_cast\u0026lt;Foo_t\u0026gt;(999), static_cast\u0026lt;Foo_t\u0026gt;(999)}; // Results in int equivalent: {999, 999, 0, 0, 0} If there are a hundred of elements then you have to write all of them down in the list.\nYou can, of course, initialize it in a loop but this sacrifices runtime performance.\n// Runtime initialization std::array\u0026lt;Foo_t, 5\u0026gt; array {}; for (auto\u0026amp; i : array) { i = static_cast\u0026lt;Foo_t\u0026gt;(999); } // Results in int equivalent: {999, 999, 999, 999, 999} Generating code by templates We can use recursive deduction of templates to generate our code. There is a limit that you can only do 1024 times of recursion but in my case it\u0026rsquo;s enough.\nThe idea is to count the size to zero and use variadic argument to increase the number of arguments on each recursion. Finally the size of the array will be passed to the bottom and the variadic argument gets expanded.\nIt\u0026rsquo;s a pretty simple trick.\ntemplate\u0026lt;std::size_t N, std::size_t M, typename T, typename... U\u0026gt; struct ARR_IMPL { static constexpr auto arr = ARR_IMPL\u0026lt;N, M-1, T, T, U...\u0026gt;::arr; }; template\u0026lt;std::size_t N, typename T, typename... U\u0026gt; struct ARR_IMPL\u0026lt;N, 0, T, U...\u0026gt; { static constexpr std::array\u0026lt;T, N\u0026gt; arr {static_cast\u0026lt;U\u0026gt;(999)...}; }; template\u0026lt;std::size_t N, typename T\u0026gt; struct ARR { static constexpr auto arr = ARR_IMPL\u0026lt;N, N-1, T, T\u0026gt;::arr; }; constexpr auto array1 = ARR\u0026lt;5, Foo_t\u0026gt;::arr; constexpr auto array2 = ARR\u0026lt;100, Foo_t\u0026gt;::arr; // array1 results in int equivalent: {999, 999, 999, 999, 999} // array2 results in int equivalent: {999, 999, 999, 999, 999, ...} ","permalink":"https://peromage.github.io/p/initialize-stdarray-at-compile-time/","tags":["cpp","meta_programming"],"title":"Initialize std::array at Compile Time"},{"categories":["linux"],"contents":"Before starting First thing first. I\u0026rsquo;ve been rarely using Windows over years except for working and gaming. Linux community grows fast and there are a lot alternatives available. On the contrary, Windows gets crapy every year (Office 365 is still good IMO) so there is no reason to run this huge spyware all the time.\nModern PCs are strong enough to run a VM. Besides most of PCs have both integrated and descret graphic cards. This setup is perfect for gaming VM which requires PCI passthrough.\nIn this post, I\u0026rsquo;m not going to explain everything because the ArchWiki is clear enough already. This is just a quick guide for the setup.\nNOTE: Avoid Intel K series CPUs which usually don\u0026rsquo;t have integrated graphic card.\nGet started Identify your PC is qualified To get high graphic performance, your CPU and motherboard must support VT-d and IOMMU respectively.\nIf not, you can stop here and choose the traditional way to dual-boot Linux and Windows.\nNOTE: you can check PCI passthrough via OVMF prerequisite section for more information.\nInstall QEMU I wrote a script to handle this automatically so just run this script before hands.\nNOTE: I\u0026rsquo;m using Arch Linux.\nIdentify discrete graphic card In a terminal:\n$ lspci -nnk 01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GM204 [GeForce GTX 970] [10de:13c2] (rev a1) Subsystem: Gigabyte Technology Co., Ltd Device [1458:367a] Kernel driver in use: nouveau Kernel modules: nouveau 01:00.1 Audio device [0403]: NVIDIA Corporation GM204 High Definition Audio Controller [10de:0fbb] (rev a1) Subsystem: Gigabyte Technology Co., Ltd Device [1458:367a] Kernel driver in use: snd_hda_intel Kernel modules: snd_hda_intel Take a note of the device IDs. In this example I have a Nvidia GTX970 graphic card along with a audio controller. They belong to the same group (domain) you have to take them all.\nIn this case I got 1458:367a and 1458:367a. These are the PCI devices that will be passed through to the VM. Other PCI devices can be passed too.\nModify kernel parameter Then we\u0026rsquo;re going to turn IOMMU on and prevent host Linux loading PCI devices that we want to pass-through to the VM.\nThe kernel parameter passing could be different depending on the bootloader you use. In this example, I use grub.\nOpen /etc/default/grub with your favorite text editor. You have to add intel_iommu=on to the kernel parameter along with vfio-pci.ids=10de:13c2,10de:0fbb which contains the device IDs you got from the previous step.\n# /etc/default/grub # Change this line GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;loglevel=3 quiet\u0026#34; # To GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;loglevel=3 quiet intel_iommu=on vfio-pci.ids=10de:13c2,10de:0fbb\u0026#34; Then update the bootloader config file.\n$ sudo grub-mkconfig -o /boot/grub/grub.cfg The most tricky part is done. Restart the PC now.\nNOTE: You can check dmesg after reboot to verify IOMMU is turned on successfully.\n$ sudo dmesg | grep -i -e DMAR -e IOMMU [ 0.000000] ACPI: DMAR 0x00000000BDCB1CB0 0000B8 (v01 INTEL BDW 00000001 INTL 00000001) [ 0.000000] Intel-IOMMU: enabled [ 0.028879] dmar: IOMMU 0: reg_base_addr fed90000 ver 1:0 cap c0000020660462 ecap f0101a [ 0.028883] dmar: IOMMU 1: reg_base_addr fed91000 ver 1:0 cap d2008c20660462 ecap f010da [ 0.028950] IOAPIC id 8 under DRHD base 0xfed91000 IOMMU 1 [ 0.536212] DMAR: No ATSR found [ 0.536229] IOMMU 0 0xfed90000: using Queued invalidation [ 0.536230] IOMMU 1 0xfed91000: using Queued invalidation [ 0.536231] IOMMU: Setting RMRR: [ 0.536241] IOMMU: Setting identity map for device 0000:00:02.0 [0xbf000000 - 0xcf1fffff] [ 0.537490] IOMMU: Setting identity map for device 0000:00:14.0 [0xbdea8000 - 0xbdeb6fff] [ 0.537512] IOMMU: Setting identity map for device 0000:00:1a.0 [0xbdea8000 - 0xbdeb6fff] [ 0.537530] IOMMU: Setting identity map for device 0000:00:1d.0 [0xbdea8000 - 0xbdeb6fff] [ 0.537543] IOMMU: Prepare 0-16MiB unity mapping for LPC [ 0.537549] IOMMU: Setting identity map for device 0000:00:1f.0 [0x0 - 0xffffff] [ 2.182790] [drm] DMAR active, disabling use of stolen memory Install the VM Open virt-manager GUI and follow the guide to setup.\nSome settings should be tweaked specifically:\nOverview: Change Firmware to UEFI CPUs: Change vCPU allocation to the maximal host CPUs. In this case, it\u0026rsquo;s 8 Unselect Copy host CPU configuration and change Model to host-passthrough Select Manually set CPU topology. Change Sockets to 1, Cores to 4, Threads to 2 (Physical core 4 * threads for each core 2) Disk: Change Disk bus to VirtIO Display Spice: You don\u0026rsquo;t really need it so remove it Video: Change to None PCI: Add your discrete graphic card as well as anything with it (audio controller etc.) USB: Mouse, keyboards, game controllers etc. After saving the settins, the installation should start but don\u0026rsquo;t install Windows yet. Instead, force power if off. Open VM settings in XML view, add following content to prevent Nvidia driver installer discovering the VM environment.\n\u0026lt;features\u0026gt; ... \u0026lt;hyperv\u0026gt; ... \u0026lt;vendor_id state=\u0026#39;on\u0026#39; value=\u0026#39;1234567890ab\u0026#39;/\u0026gt; ... \u0026lt;/hyperv\u0026gt; ... \u0026lt;kvm\u0026gt; \u0026lt;hidden state=\u0026#39;on\u0026#39;\u0026gt; \u0026lt;/kvm\u0026gt; ... \u0026lt;/features\u0026gt; Alternatively, this has the same effect.\nNOTE: win11 is the VM name you\u0026rsquo;ve just created.\n$ sudo virshpatcher --error43 --vender-id 1234567890ab win11 Install virtio drivers In the Windows VM, download the virtio driver and install it.\nNOTE: Check ArchWiki QEMU for more info\nPost installation If you don\u0026rsquo;t want to switch monitors you can try Looking Glass which allows you redirect VM display output to a emulated monitor.\nReference [QEMU install script ArchWiki QEMU ArchWiki OVMF Looking Glass Virtio driver\n","permalink":"https://peromage.github.io/p/setup-a-gaming-vm/","tags":["gaming","kvm","qemu","gpu_passthrough"],"title":"Setup A Gaming VM"},{"categories":["tech"],"contents":"Google Photo sucks.\nTroubles When exporting photos from Google Photo, a bunch of JSON files come with your photos. Those JSON files contain metadata which is supposed to be stored with your photo files. If you simple import those photo files into another photo manager you will most likely not get a chronological view. Obviously, Google does on purpose so that you will not leave it easily. However, there is a workaround that is able to merge those metadata into your photos.\nRestore the Metadate Get exiftool: https://github.com/exiftool/exiftool Export your Google Photos and extract the downloaded compressed files into a folder Save the following content to fix-args.txt # Usage: exiftool -@ fix-args.txt \u0026lt;takeout_dir\u0026gt; -r -d %s -tagsFromFile %d/%F.json -ext * --ext json -overwrite_original -progress -GPSAltitude\u0026lt;GeoDataAltitude -GPSLatitude\u0026lt;GeoDataLatitude -GPSLongitude\u0026lt;GeoDataLongitude -DateTimeOriginal\u0026lt;PhotoTakenTimeTimestamp -ModifyDate\u0026lt;PhotoLastModifiedTimeTimestamp -CreateDate\u0026lt;CreationTimeTimestamp -GPSAltitudeRef\u0026lt;GeoDataAltitude -GPSLatitudeRef\u0026lt;GeoDataLatitude -GPSLongitudeRef\u0026lt;GeoDataLongitude Execute $ exiftool -@ fix-args.txt \u0026lt;takeout_dir\u0026gt; Delete JSON files and import your photos to somewhere else This argument file contains the fields that are meaningful to me. If you need to merge additional fields you can append them to the last. For details, check the man page of exiftool.\n","permalink":"https://peromage.github.io/p/fix-metadata-in-google-photo-takeout/","tags":["google_photo"],"title":"Fix Metadata in Google Photo Takeout"},{"categories":["linux"],"contents":"This note is written for my personal convenience.\nServer Setup Installation Use system package manager to install shadowsocks-libev. In this case, for Arch Linux it is pacman.\nThere is also a Python package which can be installed by pip but it seems not to be maintained for a long time.\n$ sudo pacman -S shadowsocks-libev Shadowsocks Server Configuration Config file is located at /etc/shadowsocks/myserver.json. On FreeBSD it is /usr/local/etc/shadowsocks/myserver.json\nThe file name can vary.\n{ \u0026#34;server\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;server_port\u0026#34;: 8388, \u0026#34;password\u0026#34;: \u0026#34;mypassword\u0026#34;, \u0026#34;timeout\u0026#34;: 300, \u0026#34;method\u0026#34;: \u0026#34;chacha20-ietf-poly1305\u0026#34;, \u0026#34;fast_open\u0026#34;: false, \u0026#34;workers\u0026#34;: 1, \u0026#34;nameserver\u0026#34;: \u0026#34;8.8.8.8\u0026#34; } Note: For server, \u0026quot;local_address\u0026quot;: \u0026quot;127.0.0.1\u0026quot; and \u0026quot;local_port\u0026quot;: 1080 would cause problems so don\u0026rsquo;t them.\nStart the Server as A System Service The server can be started in the background but it\u0026rsquo;s not persistent after reboot.\n$ ss-server -c /etc/shadowsocks/myserver.json \u0026amp; Use systemd to make it run automatically.\nNote: The config file name has to be placed after @.\n$ sudo systemctl enable shadowsocks-libev-server@myserver $ sudo systemctl start shadowsocks-libev-server@myserver Client Helper SS Access Key Generation Script (Bash Script) This script will prompt you to input parameters that are in the config file to generate a base64 encoded link.\n#!/usr/bin/bash # Usage: this_script.sh read -p \u0026#39;Method: \u0026#39; -r ss_method read -p \u0026#39;Password: \u0026#39; -r ss_password read -p \u0026#39;Server IP: \u0026#39; -r ss_server_ip read -p \u0026#39;Server Port: \u0026#39; -r ss_server_port echo \u0026#34;ss://\u0026#34; $(printf \u0026#34;${ss_method}:${ss_password}@${ss_server_ip}:${ss_server_port}\u0026#34; | base64) SS Access Key Generation Script (JavaScript) This approch requires Node.js but it can parse config file automatically.\n// Usage: node this_script.js \u0026lt;config_file\u0026gt; let argv = process.argv.slice(2); if (argv.length \u0026lt; 1) { console.log(\u0026#34;nothing\u0026#34;); return; } const fs = require(\u0026#39;fs\u0026#39;); let config_file = argv[0]; let config_json = JSON.parse(fs.readFileSync(config_file)); let ss_url = \u0026#34;ss://\u0026#34; + btoa(`${config_json[\u0026#39;method\u0026#39;]}:${config_json[\u0026#39;password\u0026#39;]}@${config_json[\u0026#39;server\u0026#39;][0]}:${config_json[\u0026#39;server_port\u0026#39;]}`); console.log(ss_url); ","permalink":"https://peromage.github.io/p/shadowsocks-quick-setup/","tags":["shadowsocks","proxy"],"title":"Shadowsocks Quick Setup"},{"categories":["linux"],"contents":"This is a quick note of gpg-agent setup for SSH.\nQuick Setup Import your GPG authentication key. Enable SSH support for gpg-agent. $ echo enable-ssh-support \u0026gt;\u0026gt; $HOME/.gnupg/gpg-agent.conf Get the authentication keygrip. $ gpg -k --with-keygrip Add the authentication key to the keychain (replace KEYGRIP with the value obtained from the previous step) $ echo KEYGRIP \u0026gt;\u0026gt; $HOME/.gnupg/sshcontrol Add the following init code to .bashrc unset SSH_AGENT_PID export SSH_AUTH_SOCK=\u0026#34;$(gpgconf --list-dirs agent-ssh-socket)\u0026#34; export GPG_TTY=\u0026#34;$(tty)\u0026#34; gpg-connect-agent updatestartuptty /bye \u0026gt; /dev/null Kill any running ssh-agent and gpg-agent, and then open a new Bash session. Misc Export SSH Public Keys $ gpg --export-ssh-key \u0026lt;uid/fingerprint\u0026gt; ","permalink":"https://peromage.github.io/p/ssh-over-gpg-agent/","tags":["ssh","gpg"],"title":"SSH Over GPG Agent"},{"categories":["tech"],"contents":"Story Recently I\u0026rsquo;ve realized a fact that I always have needs to keep a multi-boot USB in my pocket for either Linux or Windows installation. There are a lot tools out there already but I don\u0026rsquo;t really like them. At least, I mean, they are too flashy to me. A beautiful boot menu seems not to be attractive. What I need is just a simple and practical maybe a little ugly boot device. It should be minimalist. More importantly, it has to be easy to setup with the tools on the system already and maintainable. No funky scripts.\nOld Solution - Clunky I\u0026rsquo;ve been using this solution for a very long time. Setup is pretty straight forward.\nThe partition scheme used on the USB drive is like (GPT):\nPartition Size Filesystem Note /dev/sda1 100 GB NTFS Data partition /dev/sda2 512 MB FAT EFI partition /dev/sda3 1 MB No filesystem BIOS boot partition used by GRUB /dev/sda4 8 GB NTFS Windows ISO files /dev/sda5 2 GB FAT Arch Linux ISO files So the idea is having a big data partition at the front for better access, then installing GRUB files on the second EFI partition with both EFI and BIOS support (Implemented by the third BIOS boot partition. The partition order doesn\u0026rsquo;t matter). Finally, create dedicated partitions to contain the extracted files from installation ISOs.\nWhen the USB drive is plugged in, I can use grub command line to chainload the EFI file that is located in the ISO partition, or the VBR if it\u0026rsquo;s booted with legacy mode.\nWell, it\u0026rsquo;s usable but I still feel that it is too much for a small USB drive - too many partitions. If I plug the drive in for just data exchange, there would be a a bunch of partitions mounted and the notification is quite annoying. So I started thinking that there must be a simpler way to do it.\nNew Solution - Much Better Partitioning The goal is simplicity so the new partition scheme is like this:\nPartition Size Filesystem Note /dev/sda1 100 GB NTFS Data partition /dev/sda2 512 MB FAT EFI partition /dev/sda3 1 MB No filesystem BIOS boot partition used by GRUB (Optional) The third BIOS boot partition is not really necessary since most of computers nowadays are using UEFI. If you really need the legacy compatibility, you can create one. I\u0026rsquo;ll keep it for now.\nInstalling GRUB Typical GRUB insallation but install for both EFI and BIOS.\n$ sudo mount /dev/sda2 /mnt $ sudo grub-install --target=x86_64-efi --efi-directory=/mnt --boot-directory=/mnt --removable $ sudo grub-install --target=i386-pc --boot-directory=/mnt /dev/sda Don\u0026rsquo;t forget to create a GRUB menu config file. Otherwise GRUB will boot into its command line interface (If you know what you\u0026rsquo;re doing). It\u0026rsquo;s a good idea to put a editable config file in the data partition since it will be the most used partition. However, GRUB reads the file in the EFI partition by default: (esp)/grub/grub.cfg. We can tell GRUB to read out custom config file after that.\n# (esp)/grub/grub.cfg search --set=root --file /boot.cfg configfile /boot.cfg Thus we are done with the EFI partition. All the menu configuration will go into boot.cfg in the data partition.\nLinux Installer Most of modern Linux distros support booting from a loop device. That is to say, we don\u0026rsquo;t have to extract the content of ISO files. Using GRUB loopback command can easily mount a ISO and boot from there. But chainloading the EFI or VBF is not possible. Based on the GRUB manual:\nGRUB is able to read from an image (be it one of CD or HDD) stored on any of its accessible storages (refer to see loopback command). However the OS itself should be able to find its root. This usually involves running a userspace program running before the real root is discovered.\nEFI bootloader usually will fail to find the root device by this method. However, we can manually load the kernel and ramdisk in which we can specify the root device by ourselves.\nLoad Linux ISO I\u0026rsquo;m using Arch Linux here for example.\nPut the ISO file to (data)/images/archlinux-2022.01.01-x86_64.iso. Mount ISO. We need to find the kernel loading parameters. In the file (arch)/syslinux/archiso_sys-linux.cfg we would see # Copy to RAM boot option LABEL arch64ram TEXT HELP Boot the Arch Linux install medium on BIOS with Copy-to-RAM option It allows you to install Arch Linux or perform system maintenance. ENDTEXT MENU LABEL Arch Linux install medium (x86_64, BIOS, Copy to RAM) LINUX /arch/boot/x86_64/vmlinuz-linux INITRD /arch/boot/intel-ucode.img,/arch/boot/amd-ucode.img,/arch/boot/x86_64/initramfs-linux.img APPEND archisobasedir=arch archisolabel=ARCH_202201 copytoram This is a syslinux config file. Parameters after APPEND are the ones that we\u0026rsquo;re looking for.\nThen add the following content to (data)/boot.cfg. When copying the initrd parameters, don\u0026rsquo;t forget to remove commas.\nmenuentry \u0026#34;Archiso 202201 RAM\u0026#34; { search --set=root --file /boot.cfg loopback loop /images/archlinux-2022.01.01-x86_64.iso set root=(loop) linux /arch/boot/x86_64/vmlinuz-linux archisobasedir=arch archisolabel=ARCH_202201 copytoram initrd /arch/boot/intel-ucode.img /arch/boot/amd-ucode.img /arch/boot/x86_64/initramfs-linux.img } Then the Linux installer is done. If we need more distros, the process is similar.\nWindows Installer I prefer to use NTFS as my data partition\u0026rsquo;s file system because it works on both Linux and Windows, and supports big files. Also I usually just keep one copy of Windows installer so for Windows, I can simply dump the ISO content to the data partition\u0026rsquo;s root. I don\u0026rsquo;t mind the extra a few folders there. Plus some of them can be safely deleted. Then chainloading from GRUB is possible.\nIn (data)/boot.cfg\nmenuentry \u0026#34;Windows 10 Installer\u0026#34; { search --set=root --file /boot.cfg chainloader /efi/boot/bootx64.efi } Windows PE Alternatively, I can directly boot from a small WinPE image and use dism command to extract install.wim to the target without accepting the annoying Windows partition scheme (You know what I\u0026rsquo;m talking about).\nTo create a PE image we need a Windows environment and a CMD window with admin privilege.\nCreate a virtual disk to contain PE files. Assigned with volume letter P:\\.\n\u0026gt; diskpart DISKPART\u0026gt; create vdisk file=c:\\winpe.vhd maximum=2000 type=fixed DISKPART\u0026gt; select vdisk file=c:\\winpe.vhd DISKPART\u0026gt; attach vdisk DISKPART\u0026gt; convert mbr DISKPART\u0026gt; create partition primary DISKPART\u0026gt; format fs=ntfs quick DISKPART\u0026gt; assign letter=p DISKPART\u0026gt; exit Then mount the Windows installer ISO. Assuming the assigned volume is G:\\.\n\u0026gt; dism /apply-image /imagefile:g:\\sources\\boot.wim /index:1 /applydir:p:\\ \u0026gt; dism /image:p:\\ /set-targetpath:x:\\ \u0026gt; dism /image:p:\\ /set-inputlocale:en-us \u0026gt; dism /image:p:\\ /set-userlocale:en-us Assign EFI partition with volume letter E:\\.\nBefore creating the bootloader for Windows PE, we need to backup our GRUB EFI file (Windows PE bootloader will overwrite it). Rename E:\\EFI to E:\\EFI-grub.\nCreate Windows PE bootloader.\n\u0026gt; bcdboot p:\\Windows /l en-us /s e: /f uefi Then merge both E:\\EFI and E:\\EFI-grub. If it prompts overwriting E:\\EFI\\Boot\\bootx64.efi, confirm with yes.\nThen add following content to (data)/boot.cfg.\nmenuentry \u0026#34;Windows PE\u0026#34; { search --set=root --file /boot.cfg chainloader /EFI/Microsoft/Boot/bootmgfw.efi } Loading Any ISO Some ISO is capable to be loaded directly into memory. The size of the ISO file is critical. Generally it should not exceed the physical memory. This can be done by memdisk from syslinux.\nCopy the memdisk into the EFI partition.\n$ sudo cp /usr/lib/syslinux/bios/memdisk (esp)/memdisk Then put the following content to (data)/boot.cfg. For example, loading a Windows PE ISO.\nmenuentry \u0026#34;Windows PE ISO\u0026#34; { search --set=root --file /boot.cfg linux16 memdisk iso ro initrd16 /images/winpe.iso } The End Finally I\u0026rsquo;m very satisfied with this new USB drive. Yay!\n","permalink":"https://peromage.github.io/p/minimalists-multi-boot-usb-drive/","tags":["multi_boot","usb_drive"],"title":"Minimalist's Multi-boot USB Drive"},{"categories":["emacs"],"contents":"YouTube has been pushing me a lot Emacs related contents. This is weird since mostly I watch Vim videos only. But probably this is also a great opportunity to try Emacs again.\nI have tried Emacs half year ago. I looked a lot Elisp programming fundamentals and tried a few Emacs configurations from others including Doom Emacs. However, it didn\u0026rsquo;t last long since I found that I didn\u0026rsquo;t have enough time to configure this Emacs setup as good as the Vim setup that I was using. Also using other\u0026rsquo;s configurations makes things complicated for me. They have too many packages included and I don\u0026rsquo;t know what they are.\nAfter watching a bunch of Emacs videos I decided to pick it up this time, with vanilla Emacs starting from scratch. The reason why I make my mind this time is because I found Emacs can perfectly and elegantly solve some problems that pain my ass:\nMore convenient package management. High quality packages. Easier file management in shell environment within the editor (Dired) No third party dependencies like Node.js and Python. The two major plugs that I\u0026rsquo;m using in Vim are Coc and Leaderf. They require Node.js and Python to work. Since Elisp is power enough, Emacs can handle this easily by itself. Server-client architecture. I can even replace Tmux with Emacs now. NeoVim has the similar concept but it cannot match what Emacs has. Graphical interface in X mode. This makes Emacs be able to display rich contents. Org mode. It looks great to organize todo list and take notes without switching to other applications. Evil mode. No need to worry about missing Vim\u0026rsquo;s features. Magit. Looks way better and nicer than fugitive. Elisp. Elisp is fun 😉. The migration is going slowly. Right now my main setup is still Vim + Tmux. There is a little curve learning from vanilla edition of Emacs, but It\u0026rsquo;s not a big deal compared with the first time when I started learning Vim 🙂.\nIn the end, dont\u0026rsquo;t give me wrong. Vim and Emacs both are great text editor. For me, Vim is more like a spirit, a concept. Once you\u0026rsquo;ve learned its high-efficiency key maps, you can use it everywhere. Even though I switch to Emacs I still use Vim mode together with Emacs\u0026rsquo; powerful extendability. Why not?\n","permalink":"https://peromage.github.io/p/moving-from-vim-to-emacs/","tags":["vim","emacs","text_editor"],"title":"Moving From Vim to Emacs"},{"categories":["tech"],"contents":"Background Previously I wrote a post for this dual-boot scenario. It is a little outdated. In the past year I mostly worked in the Linux environment on my old laptop, so the Windows seems not to be a necessity which occupies a dedicated partition. However, sometimes it is still needed. That is why I started thinking to improve this setup even further.\nStarting from Windows 7, Windows supports boots from a VHD file which makes it so much easier to manage. Also you are able to create differencing disks which are pretty much like snapshots.\nFor this new configuration, my plan is to use BIOS + GPT disk table + Native Linux + Native Windows booting from VHD + GRUB as the bootloader.\nPartitioning To make GPT works with BIOS. It is required to have a small partition flagged with EF02.\nThe partition scheme looks like this:\nDevice Start End Sectors Size Type /dev/sda1 34 2047 2014 1007K BIOS Boot /dev/sda2 2048 1026047 1024000 500M EFI System /dev/sda3 1026048 206546943 205520896 98G Linux Filesystem /dev/sda4 206546944 835692543 629145600 300G Linux Filesystem /dev/sda5 835692544 1465149134 629456591 300.1G Microsoft Basic Data Installing Linux Any Linux distro would work. I chose Manjaro KDE this time because I found that the Pop OS made my laptop really hot sometimes (Yeah KDE is prettier).\nThis part should be easy. The GRUB files is going into that EFI partition. For details, check GRUB wiki.\nPreparing to Install Windows I\u0026rsquo;m not going to use the standard Windwos installer since I want to install it into a VHD file. To make it work we need a Windows PE environment.\nPreparing Images Any Windows PE (Windows 7 and above) would work. The PE ISO image is going to /boot/wepe.iso.\nAlso a Windows ISO image is needed. For example a Windows 7 ISO named windows7.iso will be put in the Windows data partition.\nAdding Windows PE to GRUB Boot into Linux. Download Windows PE ISO file and move it to the EFI partition (EXT4 partitions might be problematic).\nTo load this ISO image, memdisk tool from syslinux is required. Steps as below on Arch based distro:\n# Installing syslinux $ sudo pacman -S syslinux # Copying memdisk to the boot partition $ sudo cp /usr/lib/syslinux/bios/memdisk /boot/memdisk # Adding Windows PE entry to GRUB. 1DB1-9C31 is the boot partition\u0026#39;s UUID $ sudo cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;/etc/grub.d/40_custom menuentry \u0026#34;WePE x64\u0026#34; { search --set=root --no-floppy --fs-uuid 1DB1-9C31 linux16 /memdisk iso ro initrd16 /wepe.iso } EOF # Updating GRUB entries $ sudo grub-mkconfig -o /boot/grub/grub.cfg Installing Windows to a VHD File After adding Windows PE to the bootloader entries, it is time to switch the working environment.\nRestart the PC, then keep pression shift key until the GRUB menu shows up. Now navigate to the Windows PE entry and get in there.\nCreating a VHD File for Windows To create a VHD file, open a command line window and enter diskpart\n# Create a VHD file assuming the NTFS data partition is assigned with D: DISKPART\u0026gt; create vdisk file=d:\\windows7.vhd maximum=64000 type=fixed DISKPART\u0026gt; select vdisk file=d:\\windows7.vhd DISKPART\u0026gt; attach vdisk # Disk table type doesn\u0026#39;t matter but using MBR for better compatibility DISKPART\u0026gt; convert mbr # Create the system partition and assign it with C: DISKPART\u0026gt; create partition primary DISKPART\u0026gt; format fs=ntfs quick DISKPART\u0026gt; assign letter=c DISKPART\u0026gt; exit Now the Windows image can be dumped into this VHD file.\nExtracting Windows Image Mount the Windows ISO image to E: volume and open a command line window\n# Get the image index. For example the desired version\u0026#39;s index is 1 \u0026gt; dism /get-wiminfo /wimfile=e:\\sources\\install.wim # Extract the image. Where E: is the Windows ISO and C: is the VHD file \u0026gt; dism /apply-image /imagefile:e:\\sources\\install.wim /index:1 /applydir:c:\\ Fixing the Windows Bootloader Stay in Windows PE. Don\u0026rsquo;t restart the PC. We still need to fix the bootloader for Windows.\nNormally Windows cannot be booted with a GPT+MBR setup. And also loading the whole Windows VHD file through memdisk is not possible because it\u0026rsquo;s too large to load into memory. To fix the boot issue a bridge is needed between Windows and GRUB.\nLuckily a small VHD image can still be loaded by memdisk.\nThe idea is: GRUB -\u0026gt; MS Bootmgr VHD -\u0026gt; Windows VHD\nCreating a Dedicated Bootloader Image for Windows It is same with the process creating a VHD file for Windows system but this time it is a smaller file (32 MB).\n# Create a small bootmgr VHD file in the data partition DISKPART\u0026gt; create vdisk file=d:\\bootmgr.vhd maximum=32 type=fixed DISKPART\u0026gt; select vdisk file=d:\\bootmgr.vhd DISKPART\u0026gt; attach vdisk DISKPART\u0026gt; convert mbr DISKPART\u0026gt; create partition primary DISKPART\u0026gt; format fs=ntfs quick DISKPART\u0026gt; assign letter=f DISKPART\u0026gt; exit Now the bootmgr VHD is mounted at F:. Then write the boot record and create boot configuration files.\n\u0026gt; bootsect /nt60 f: /mbr \u0026gt; bcdboot c:\\Windows /l en-us /s f: /f bios Fixing the BCD Entry At this point it should be working according to the Microsoft\u0026rsquo;s document. In fact it is not.\nLet\u0026rsquo;s check the BCD entries, in a command window:\n\u0026gt; bcdedit /store f:\\Boot\\BCD /enum Windows Boot Manager -------------------- identifier {bootmgr} device partition=F: description Windows Boot Manager locale en-us inherit {globalsettings} default {default} resumeobject {fcd67427-e033-11eb-8826-cdf90e3873d0} displayorder {default} toolsdisplayorder {memdiag} timeout 30 Windows Boot Loader ------------------- identifier {default} device partition=C: path \\Windows\\system32\\winload.exe description Windows 7 locale en-us inherit {bootloadersettings} osdevice partition=C: systemroot \\Windows resumeobject {fcd67427-e033-11eb-8826-cdf90e3873d0} nx OptIn detecthal Yes The device and osdevice seems to be right but once the Windows VHD is unmounted it becomes unknown. According to this BCDEdit notes, BCD entry records the partition\u0026rsquo;s information such as UUID to find the correct partition during bootup. In this case the partition can\u0026rsquo;t be found until the VHD file is mounted. But this VHD file is not mounted automatically.\nThus we need to correct this and let Bootmgr locate the VHD file properly.\nIn a command line window:\n# The identifier must match the one which is showing above \u0026gt; bcdedit /store C:\\Boot\\BCD /set {default} device vhd=[D:]\\windows7.vhd \u0026gt; bcdedit /store C:\\Boot\\BCD /set {default} osdevice vhd=[D:]\\windows7.vhd If we check the BCD entry again it doesn\u0026rsquo;t change. But if we unmount the Windows VHD it will become:\n\u0026gt; bcdedit /store f:\\Boot\\BCD /enum Windows Boot Manager -------------------- identifier {bootmgr} device partition=E: description Windows Boot Manager locale en-us inherit {globalsettings} default {default} resumeobject {fcd67427-e033-11eb-8826-cdf90e3873d0} displayorder {default} toolsdisplayorder {memdiag} timeout 30 Windows Boot Loader ------------------- identifier {default} device vhd=[C:]\\windows7.vhd path \\Windows\\system32\\winload.exe description Windows 7 locale en-us inherit {bootloadersettings} osdevice vhd=[C:]\\windows7.vhd systemroot \\Windows resumeobject {fcd67427-e033-11eb-8826-cdf90e3873d0} nx OptIn detecthal Yes The volume letter doesn\u0026rsquo;t matter, it changes dynamically. Now bootmgr is able to locate the VHD file correctly.\nAdding Windows to GRUB Restart PC and get into Linux.\nModify the GRUB config file to load bootmgr\n# Adding Windows (bootmgr) entry to GRUB. 1DB1-9C31 is the boot partition\u0026#39;s UUID $ sudo cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;/etc/grub.d/40_custom menuentry \u0026#34;Windows 7\u0026#34; { search --set=root --no-floppy --fs-uuid 1DB1-9C31 linux16 /memdisk harddisk initrd16 /bootmgr.vhd } EOF # Updating GRUB entries $ sudo grub-mkconfig -o /boot/grub/grub.cfg Now we can restart PC. Keep pressing shift on bootup to go to the GRUB menu. Select Windows entry to boot Windows.\nFixing Windows Initialization Error During the first time bootup, Windows might have an error showing\nWindows could not complete the installation. To install Windows on this computer, restart the installation. To solve this error:\nPress SHIFT + F10 to bring up the command prompt. Execute C:\\windows\\system32\\oobe\\msoobe. Wait for a while and the setup window will show up. Complete the setup and restart. Creating a Differencing Disk A differencing disk can be used for quick recoveries.\nTo create it, restart into the Windows PE environment. In a command line window:\n# Use the original VHD as base \u0026gt; move d:\\windows7.vhd d:\\windows7_base.vhd # Create a differencing disk based on the original one # The name of the new differencing disk has to be the name that was recorded in the BCD \u0026gt; diskpart DISKPART\u0026gt; creat vdisk file=d:\\windows7.vhd parent=d:\\windows7_base.vhd Then all changes made in the future will go into the differencing disk. If system goes wrong one day, simply deleting the the differencing disk and creating a new one would quickly recover from the crysis.\nNOTE: After creating the differencing disk, the base VHD is not supposed to be modified.\nReferences GRUB wiki BIOS + GPT + GRUB + Linux + Windows 折腾笔记 在 VHD 中安装 Windows 7 Hack Bootmgr to boot Windows in BIOS to GPT Boot to a virtual hard disk: Add a VHDX or VHD to the boot menu BCDEdit notes 100% Solved:Windows could not complete the installation\n","permalink":"https://peromage.github.io/p/dual-booting-windows-vhd-and-native-linux-on-a-bios-gpt-pc/","tags":["dual_boot","grub","linux","windows"],"title":"Dual-booting Windows VHD and Native Linux on a BIOS+GPT PC"},{"categories":["tech"],"contents":"因为最近弄自己的博客，涉及到了版本库嵌套的问题。记下来也算是给自己一个备忘。\n为什么有这样的需求 版本库嵌套很好理解，就是在一个 Git 仓库里面包含了其他的 Git 仓库。通常有这样的需求往往涉及到协同开发。比如这里有一个插件单独的 Git 仓库姑且叫“Plugin”。现在我创建了一个自己的项目，其中需要用到这个“Plugin”插件。通常比较笨的办法就是把插件库源码拖下来，复制到自己的项目里。但是这样当插件库更新的时候，插件源码更新往往比较麻烦。而且如果在使用的过程中修改了插件的源码，也不便于插件单独的版本控制，更别说为插件库贡献代码了。但如果插件单独以 Git 仓库存在于我的项目目录中，以上的问题就解决了。\n在 Git 里面提供了两种方式实现上述需求，那就是 Subtree 和 Submodule。\nSubmodule Submodule 是 Git 里面最早提供的一种方法。顾名思义“子模块”。\n添加子模块 执行\n$ git submodule add \u0026lt;repo\u0026gt; \u0026lt;module_path\u0026gt; 此时运行 git status 可以看到子模块对应的文件夹和一个叫做 .gitmodules 文件被添加进了暂存区。其中 .gitmodules 是用于记录子模块相关信息的。之后主项目里面的操作照常提交就可以了。\n修改子模块 但如果在开发的途中修改了子模块的代码，需要单独到子模块对应的根目录里面进行子模块单独的提交操作。在主项目里面虽然可以看到子模块有变更，但是无法看到具体的更改操作，而是将其看作一个模块整体。一旦子模块产生了新的提交，主项目里面可以看到子模块的 HEAD 变化，从而主项目也应当产生一个新的提交以记录对应关系。 换句话说，主项目就是靠着记录子模块 HEAD 值来判断依赖的。子模块的代码最后将不会进入主项目的版本库里面（只有 HEAD 值）。\n现在子模块有了新的提交，为了将服务器上的代码更新，我们只需要进入子模块对应的更目录执行 push 操作就可以了。\n更新子模块 此时子模块上游有了新的代码，我们需要将其整合到当前的项目中。有两种方法。\n在主项目根目录下运行\n$ git submodule foreach git pull 或者切换到子模块的根目录下面\n$ git pull 克隆项目 克隆主项目的时候子模块并不会拉取到本地，如果进入对应的目录会发现是空的。 此时应当\n$ git submodule init 保持最新\n$ git submodule update 或者可以直接一条命令搞定\n$ git clone --recursive \u0026lt;repo\u0026gt; 删除子模块 Git 中没有提供直接删除的命令，需要手动完成删除操作。\n反向初始化子模块\n$ git submodule deinit --force \u0026lt;module_path\u0026gt; 或者直接删掉 .git/config 里相关信息\n移除子模块\n$ git rm \u0026lt;module_path\u0026gt; 如果暂存区还有\n$ git rm --cached \u0026lt;module_path\u0026gt; 子模块的坑 提交的坑 假设有 A B 两个人同时在开发一个项目，这个项目里面也包含了一个子模块。此时 A 修改了业务代码，同时修改了一个子模块里面的一个 bug 。A 将这次修改提交，主项目的提交里面指向了子模块新的 HEAD1 ，然后把主项目的版本库 push 到了服务器，但是没有 push 子模块。B 此时 pull 了主项目，然后 update 子模块，被告知找不到子模块的 HEAD1 。因为指向 HEAD1 的提交还在 A 本地机器上。 这就是子模块提交的坑。在多个模块存在的时候操作非常繁琐。\n初始化的坑 在执行 git submodule init ， git submodule update 之后，此时修改子模块可能出现 HEAD 处于游离状态的的提示。如果不注意极有可能出现丢失提交的可能。 解决办法，在以上两条命令之后执行一次检出\n$ git checkout \u0026lt;branch\u0026gt; Subtree 添加子项目 首先添加子项目对应的远程服务器\n$ git remote add \u0026lt;subrepo_name\u0026gt; \u0026lt;subrepo_remote\u0026gt; 拉取一下\n$ git fetch \u0026lt;subrepo_name\u0026gt; 添加子项目到父项目里面\n$ git subtree add --squash --prefix=\u0026lt;subrepo_path\u0026gt; \u0026lt;subrepo_name\u0026gt; \u0026lt;branch\u0026gt; 参数 --squash 作用在于合并子项目所有提交为一个，并 merge 到父项目的历史中，这样只会出现两个提交记录，避免子项目的提交历史污染父项目。更多讨论可以看这里。\n修改子项目 添加完毕之后照常修改提交各种操作，父项目能够跟踪子项目里面的所有变更。子项目被当做一个正常的子文件夹处理。\n如果现在修改了子项目里的一个 bug 并且想要反馈给上游，可以这样操作\n$ git subtree push --prefix=\u0026lt;subrepo_path\u0026gt; \u0026lt;subrepo_name\u0026gt; \u0026lt;bug_fixed\u0026gt; 这个操作可以将父项目里所有涉及子项目修改的提交检出。这样在远程仓库里面会出现一个叫做 bug_fixed 的分支。\n或者也可以这样操作\n$ git subtree split --prefix=\u0026lt;subrepo_path\u0026gt; --branch \u0026lt;new_branch_name\u0026gt; 这个操作跟上面一样将父项目里所有涉及子项目修改的提交检出，并且把子项目的根文件夹设为整个项目的根文件夹，然后检出为父项目的一个新的分支。\n然后推送给上游\n$ git push \u0026lt;subrepo_remote\u0026gt; \u0026lt;new_branch_name\u0026gt;:\u0026lt;bug_fixed\u0026gt; 之后删除对应本地分支就可以了。\n更新子项目 拉取非常方便\n$ git subtree pull --prefix=\u0026lt;subrepo_path\u0026gt; \u0026lt;subrepo_name\u0026gt; \u0026lt;branch\u0026gt; 删除子项目 因为子项目在父项目里面就是被当做一个普通的文件夹处理的，所以直接移除文件夹并提交就可以了。\nSubmodule vs. Subtree Git 官方推荐使用新的 Subtree ，事实证明的确比 Submodule 方便不少。Subtree 不会产生额外的文件，而且子项目的代码包含在父项目里面，不会出现前面提到的坑的问题。具体应用上的对比可以参考这篇文章。Subtree 对于代码迭代较快的项目尤为适合。\n但也不是说 Submodule 一无是处， Submodule 在我感觉最大的意义在于可以隔离子项目的业务代码，并且记录严格的依赖关系。对于一些子模块更新较慢的项目还是比较适合的。\n参考 subtree_usage subtree_squash\n","permalink":"https://peromage.github.io/p/git%E4%B8%AD%E7%9A%84subtree%E5%92%8Csubmodule/","tags":["git"],"title":"Git中的Subtree和Submodule"},{"categories":["tech"],"contents":"0x00 情况简述 由于开发需要 Linux 环境，所以将老的那台笔记本改造成了双系统。 这台电脑的基本情况是这样的，64GB 固态硬盘 + 720GB 机械硬盘（实际可用空间有折损，这里为了表示方便），Windows 10 已经安装到了固态硬盘上。由于主板较老，只能支持 BIOS。巨硬又说过 Windows 只能支持 BIOS + MBR，所以第一块主位（Master）上的固态硬盘就只能采用 MBR 分区表，分成了两个区，500MB 用作启动分区，剩下的部分全部划给了系统分区。 但是 Linux 表示没有巨硬这种尿性，所以为什么不使用更先进的 GPT 分区表？因此从位（Slave）上的机械硬盘被我分成了这个样子：\n大小 挂载点 文件系统 备注 10 MB None No File System BIOS 启动分区 500 MB /boot EXT4 引导 100 GB / EXT4 系统 199.5GB /home EXT4 用户 420 GB None NTFS Windows 数据 BIOS 启动分区 1MB 足以，我只是考虑到后续扩展问题。之后在第二块硬盘上安装了 Arch Linux。\n0x01 有啥好折腾的？ 双系统安装好以后相安无事，BIOS 默认从主位固态硬盘启动。也就是说开机不进行任何操作的话，默认进入的是 Windows 10。只有在开机的时候使用 BIOS 的 Fast Boot 功能，选择从第二块硬盘启动才能进入 Arch Linux。换句话说两个系统彼此都是透明的。 但是作为一个强迫症和完美主义者，万一我想进入 Linux，但是开机的时候错过了，岂不是要重启一次才行？或者万一我又反悔想进入 Windows 又要重启一次？这怎么能忍，所以才有了这次的折腾……\n0x02 在 GRUB 中添加引导菜单 对于 GRUB （注：这里所说的 GRUB 指的是 GRUB 2 而不是 GRUB Legacy） 引导的 Linux 来说，切换到 Windows 的 bootmgr 是一件很容易的事情，最新版的 GRUB 可以直接启动 bootmgr 而不需要之前的 chainloading 模式。 进入 Arch Linux，以 root 权限编辑 /etc/grub.d/40_custom ，加入以下菜单：\nmenuentry \u0026#34;Switch to Microsoft Boot Manager\u0026#34; { insmod part_msdos insmod ntfs insmod search_fs_uuid insmod ntldr search --fs-uuid --set=root 69B235F6749E84CE ntldr /bootmgr } insmod 是用于加载必要的模块以便 GRUB 识别并正确启动 Windows。值得注意的是， search 一行指定的 UUID 与 Linux 下 lsblk -f 看到的 UUID 是不一样的，需要使用\n$ sudo grub-probe --target=fs_uuid -d /dev/sda1 来获取 GRUB 下对应的分区 UUID。这个例子中，Windows 启动分区是 sda1 。UUID 是唯一的，勿照搬。\n当然也可以使用传统的 chainloading 模式：\nmenuentry \u0026#34;Switch to Microsoft Boot Manager\u0026#34; { insmod part_msdos insmod ntfs insmod search_fs_uuid search --fs-uuid --set=root 69B235F6749E84CE chainloader +1 } 保存以后，执行\n$ sudo grub-mkconfig -o /boot/grub/grub.cfg 以便更新启动菜单。\n不推荐直接编辑 /boot/grub/grub.cfg ，因为上述命令会覆盖这个文件，不便于自定义菜单的管理。 这样就可以直接跳转到 bootmgr ，让它去启动 Windows。\n0x03 BCD 寻思 BCD 是Windows Vista 之后使用的一种启动管理器。有个非常蛋疼的问题就在于，BCD 并不支持 EXT4 分区格式，所以没有办法读到 GRUB。查阅了相关资料，给出的解决办法就是，将 /boot 分区格式化成 FAT32 的文件系统。难道我还得再折腾一次文件系统？直觉告诉我一定还有其他的办法。 既然 BCD 没办法直接读 EXT4 分区里面的东西，我们可以曲线救国。BCD 里面提供了一种实模式启动的方式，允许读取一个包含了启动代码的文件。所以一种解决办法就是 BCD → MBR → VBR → Bootloader 。由于 GPT 磁盘的第一个扇区被划分成了 Protective MBR，用于兼容 BIOS，所以在 Linux 使用：\n$ sudo dd if=/dev/sdb of=/mnt/reserved/grub.bin bs=512 count=1 可以将第二块硬盘的第一扇区里面的启动代码导出到一个文件，然后使用 BCD 加载这个文件就可以启动 GRUB了。 果真如此？ 事实是，这种方法可行，但是并不适用我的情况，因为这是建立在 Windows 和 Linux 安装在同一块硬盘上的情形。 grub.bin 并不能够跨分区寻找 VBR。难道只能作罢？肯定不可能，不然就没有这篇文章了。 查阅了若干文档之后，得知 GRUB 提供了一个 叫做 lnxboot.img 文件，可以将 GRUB 启动阶段模拟成一个可以启动的 Linux 内核，然后挂载 core.img 里面必要的模块，从而顺利启动 GRUB。那么将之前的思路修改成 BCD → VBR → Bootloader 就行了，即既然 MBR 不能跨分区以及识别 GPT，那么我们就换成一个可以胜任的不就行了。\n0x04 制作启动镜像 进入 Arch Linux。虽然在 /boot/grub/i386-pc/ 目录下有一个用于启动的 core.img 文件，这个文件里面指定的模块路径是相对路径，使用它启动依然会显示错误，需要指定绝对路径以保证万无一失。那么我们就来手动生成一个，顺便集成一些我们需要的模块。 注意，启动镜像稍后会被放在 Windows 的启动分区下面（BCD 的启动分区），所以还需要知道模块所在分区的位置。在 GRUB 中表示磁盘的方式有所不同，如 (hd0,msdos1) 表示第一块磁盘，使用 MBR 分区表，第一个分区。 (hd1,gpt2) 表示第二块磁盘，使用 GPT分区表，第二个分区。括号不可省，磁盘和分区的起始数字不一样。\n使用 grub-probe 来获取 /boot 分区信息。这个例子得到的是 hd1,gpt2 ：\n$ sudo grub-probe --target=bios_hints /boot 生成 core.img ：\n$ sudo grub-mkimage --output=/tmp/core.img --prefix=\\(hd1,gpt2\\)/grub --format=i386-pc biosdisk part_msdos part_gpt ext2 注意像我这样 /boot 单独分区，prefix 就不需要写成 \\\\(hd1,gpt2\\\\)/boot/grub ，毕竟已经在 /boot 里面了嘛。默认没有 GPT 支持，所以还需要添加 GPT 模块。\n生成启动镜像： 按照 GRUB 的帮助文档， lnxboot.img 需要放在 core.img 之前，由 lnxboot.img 来加载 core.img 。所幸 BCD 可以一次读取大于一个扇区（512B）的内容，所以将这两个文件合并一下即可：\n$ sudo cat /usr/lib/grub/i386-pc/lnxboot.img /tmp/core.img \u0026gt; /tmp/grub4bcd.img 然后将 grub4bcd.img 放到 Windows 启动分区根目录下面就可以了。注意内核默认只能以只读模式挂载 NFTS 文件系统，需要安装扩展包才能读写：\n$ sudo pacman -S ntfs-3g 然后挂载（安装了上述扩展包之后甚至不用指定参数）：\n$ sudo mount /dev/sda1 /mnt/reserved 现在就可以顺利地将启动镜像复制到 Windows 启动分区下面了。\n0x05 在 BCD 中添加引导菜单 重启进入 Windows 10。以管理员权限打开命令行。\n添加入口：\n\u0026gt; bcdedit /create /d \u0026#34;Switch to GRUB\u0026#34; /application bootsector 会返回一串 UUID，复制下来。之后 UUID 的地方我用 {ID} 表示，用刚才得到的替换即可。\n设置启动分区：\n\u0026gt; bcdedit /set {ID} device boot 设置启动文件：\n\u0026gt; bcdedit /set {ID} path /grub4bcd.img 将入口添加进启动菜单：\n\u0026gt; bcdedit /displayorder {ID} /addlast 关闭 Metro 启动菜单（不关闭的话切换时会重启，建议关闭）：\n\u0026gt; bcdedit /set {default} bootmenupolicy legacy 最后关闭 Windows 10 的 Hybrid 开机功能，否则可能会导致 Windows 丢失数据：\n\u0026gt; powercfg /h off 0x06 后记 现在终于可以愉快地切换两个引导菜单了。其实使用 GRUB 来管理两个系统是较为简单的办法。 更为简单的办法是，先装 Windows 然后装 Ubuntu，后者会自动搞定这些麻烦事。╮(╯_╰)╭\n0x07 参考资料 https://www.gnu.org/software/grub/manual/grub.html#Images http://askubuntu.com/questions/180033/how-to-add-different-drive-ubuntu-to-bcd-manually https://wiki.archlinux.org/index.php/Talk:Dual_boot_with_Windows https://wiki.archlinux.org/index.php/Dual_boot_with_Windows\n","permalink":"https://peromage.github.io/p/windows-linux%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E6%89%8B%E8%AE%B0/","tags":["dual_boot","windows","grub","linux"],"title":"Windows+Linux双系统引导手记"}]