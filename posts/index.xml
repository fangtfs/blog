<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on undefined behavior</title><link>https://peromage.github.io/posts/</link><description>Recent content in Posts on undefined behavior</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Mar 2023 23:17:00 +0000</lastBuildDate><atom:link href="https://peromage.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Different Ways to Write a Major Mode</title><link>https://peromage.github.io/p/different-ways-to-write-a-major-mode/</link><pubDate>Thu, 16 Mar 2023 23:17:00 +0000</pubDate><guid>https://peromage.github.io/p/different-ways-to-write-a-major-mode/</guid><description>This post mainly helps myself remember how to quickly write a major mode. My memory is getting worse. So sad. :(
Use define-derived-mode Doc: https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html
This perhaps the most common way to write a major mode.
Most of the times I derive from fundamental-mode, or nil if the parent mode is not needed (a brand new mode).
;; With a parent mode (define-derived-mode foo-mode fundamental-mode &amp;#34;Foo&amp;#34; (do something)) ;; Or nothing (define-derived-mode foo-mode nil &amp;#34;Foo&amp;#34; (do something)) Here is the common pattern that I use.</description></item><item><title>LSP Setup for Java</title><link>https://peromage.github.io/p/lsp-setup-for-java/</link><pubDate>Sat, 18 Feb 2023 17:04:00 +0000</pubDate><guid>https://peromage.github.io/p/lsp-setup-for-java/</guid><description>Update on &amp;lt;2023-06-07 Wed&amp;gt; Found a much easier way to configure this and tried again with the update-to-date lsp-java and it worked magically. Can&amp;rsquo;t recall why I had configuration issues before.
Simply it would be:
Make sure JDK 17 is installed (According to the requirement of lsp-java). Create a lib folder and put .jar files into it (or symlinks). See this issue. Run lsp-restart-workspace. Voila! Now LSP works as you would expect :).</description></item><item><title>File-based Blog Management with ox-hugo</title><link>https://peromage.github.io/p/file-based-blog-management-with-ox-hugo/</link><pubDate>Tue, 15 Nov 2022 09:58:00 +0000</pubDate><guid>https://peromage.github.io/p/file-based-blog-management-with-ox-hugo/</guid><description>Background I previously wrote a post about managing blog posts with ox-hugo in org mode. I used to follow the recommendation to keep posts under org subtrees. As posts grew, I found that the opening speed is quite slow even I didn&amp;rsquo;t have many pictures inserted. Although managing the entire site within one file does have some convenience, the slowness is something I can&amp;rsquo;t bear. Also I feel it a</description></item><item><title>Use lisp-data Files in Emacs</title><link>https://peromage.github.io/p/use-lisp-data-files-in-emacs/</link><pubDate>Mon, 14 Nov 2022 10:57:00 +0000</pubDate><guid>https://peromage.github.io/p/use-lisp-data-files-in-emacs/</guid><description>I found that there were few posts mentioning about using lisp-data files. However, it seems to be used widely in various packages.
Emacs manumal has a very detailed description of how to read and write lisp objects. In this post I&amp;rsquo;ll mainly demonstrate one specific use case.
Read from file The biggest challenge is to parse file content to Lisp lists. After a quick search with describe-function, read function is able to perfectly handle it in this case.</description></item><item><title>Arch Linux on Laptop</title><link>https://peromage.github.io/p/arch-linux-on-laptop/</link><pubDate>Tue, 08 Nov 2022 22:45:00 +0000</pubDate><guid>https://peromage.github.io/p/arch-linux-on-laptop/</guid><description>I recently got my new laptop and I found that some additional tweaks need to be made for laptops. Thus, this post is to have a record in case I forget when I have to reinstall the system.
Some basic setup Unlike desktop, laptops have to be secure so encrytion is a must.
Details of how-to can be found on Arch wiki. I&amp;rsquo;m not going to go through that here. However, I&amp;rsquo;ll note down some considerations and things that need to pay attention to.</description></item><item><title>Windows Rescure Quick Reference</title><link>https://peromage.github.io/p/windows-rescure-quick-reference/</link><pubDate>Wed, 19 Oct 2022 00:01:00 +0000</pubDate><guid>https://peromage.github.io/p/windows-rescure-quick-reference/</guid><description>Though I&amp;rsquo;ve written posts about dual-booting Windows and Linux and multi-booting a USB drive, I have to go back and dig useful information out each time when I forget something.
After breaking my dual-boot setup once again (forgot to backup boot partition), I decided to create this post for a quick reference.
This reference assumes system is boot from UEFI and Windows is installed on a dedicated partition.
Setup A USB With System Images Forget the previous multi-boot USB post.</description></item><item><title>VNC Quick Guide</title><link>https://peromage.github.io/p/vnc-quick-guide/</link><pubDate>Wed, 15 Jun 2022 17:40:00 +0000</pubDate><guid>https://peromage.github.io/p/vnc-quick-guide/</guid><description>I found that every time when I try to setup VNC for remote access I always have troubles configuring it. I believe this is due to some conceptions which can be easily confusing. So this post serves both notes and reminder for myself.
Choose a VNC Server Generally I use TigerVNC. It&amp;rsquo;s a fork of TightVNC and the performance is pretty good. Also, it&amp;rsquo;s easy to configure. However, when it comes to installation there are two types of servers: standalone and scraping.</description></item><item><title>Use Git Worktree to Work with Multiple Checkout at the Same Time</title><link>https://peromage.github.io/p/use-git-worktree-to-work-with-multiple-checkout-at-the-same-time/</link><pubDate>Mon, 06 Jun 2022 00:30:00 +0000</pubDate><guid>https://peromage.github.io/p/use-git-worktree-to-work-with-multiple-checkout-at-the-same-time/</guid><description>Troubles When working with a complicated project where you have to compare different history versions side by side, it soon becomes frustrating frequently checking out refs.
The old stupid way is to clone multiple repos and checkout to the specific revisions. When the project is big this might be a trouble because you&amp;rsquo;re basically duplicating files.
Savior Git provides a convenience sub-command worktree to checkout a specific ref in another directory without duplicating files.</description></item><item><title>Autoloading in Emacs</title><link>https://peromage.github.io/p/autoloading-in-emacs/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://peromage.github.io/p/autoloading-in-emacs/</guid><description>Autoloading is a neat feature in Emacs. It speeds up Emacs by lazy load the files. But it could be a little confusing if you&amp;rsquo;re switching from Vim.
Myth - Not Working as Expected If you have used Vim you know in Vim you can put your library files to the load path variable and Vim autoloads them whenever one of the functions/variables is used. Initially I thought this is the same in Emacs but with a little effort to put the magic autoload comments before the function/variable definition.</description></item><item><title>Use Org Mode to Manage My Blog</title><link>https://peromage.github.io/p/use-org-mode-to-manage-my-blog/</link><pubDate>Sun, 05 Jun 2022 23:00:00 +0000</pubDate><guid>https://peromage.github.io/p/use-org-mode-to-manage-my-blog/</guid><description>I&amp;rsquo;ve been using Emacs since last year but until recent I started using org-mode seriously. After spending a couple of days reading and watching all kinds of org tutorial as well as using it for documentation, I realized that people who invented this must geniuses.
Org document seems similar with Markdown: they are text markup format. However, Org provides far more capabilities to store metadata and greater editing experience together with Emacs&amp;rsquo; org-mode.</description></item><item><title>Initialize std::array at Compile Time</title><link>https://peromage.github.io/p/initialize-stdarray-at-compile-time/</link><pubDate>Wed, 16 Mar 2022 10:25:00 +0000</pubDate><guid>https://peromage.github.io/p/initialize-stdarray-at-compile-time/</guid><description>Background I&amp;rsquo;ve been working on optimization for some C++ code recently. One of the part is to initialize some data at compile time. Consider we have a C style enum definition:
typedef enum Foo { AAA = 0, BBB, CCC } Foo_t; We want to have an array of the enum with undefined initial values 999 because by default initialization the values would be 0&amp;rsquo;s. However, std::array can only be initialized by initializer list, which is said:</description></item><item><title>My Common Windows VM Setup</title><link>https://peromage.github.io/p/my-common-windows-vm-setup/</link><pubDate>Sun, 13 Mar 2022 17:47:00 +0000</pubDate><guid>https://peromage.github.io/p/my-common-windows-vm-setup/</guid><description>Before Starting This post mainly discusses VM setup for Windows since I&amp;rsquo;ve been using Windows as a secondary OS for apps or games that cannot run on Linux.
This post discusses setup on Arch Linux.
This post assumes the CPU and motherboard support VT-d and IOMMU features. Detailed prerequisites can be found on this page.
Install Hypervisor Follow Arch wiki to install and setup:
QEMU Libvirt Virt-Manager OVMF Install Windows VM Before Installation Download the latest Windows 10 ISO from Microsoft.</description></item><item><title>Fix Metadata in Google Photo Takeout</title><link>https://peromage.github.io/p/fix-metadata-in-google-photo-takeout/</link><pubDate>Sun, 13 Mar 2022 00:12:00 +0000</pubDate><guid>https://peromage.github.io/p/fix-metadata-in-google-photo-takeout/</guid><description>Google Photo sucks.
Troubles When exporting photos from Google Photo, a bunch of JSON files come with your photos. Those JSON files contain metadata which is supposed to be stored with your photo files. If you simple import those photo files into another photo manager you will most likely not get a chronological view. Obviously, Google does on purpose so that you will not leave it easily. However, there is a workaround that is able to merge those metadata into your photos.</description></item><item><title>Shadowsocks Quick Setup</title><link>https://peromage.github.io/p/shadowsocks-quick-setup/</link><pubDate>Sun, 13 Mar 2022 00:03:00 +0000</pubDate><guid>https://peromage.github.io/p/shadowsocks-quick-setup/</guid><description>This note is written for my personal convenience.
Server Setup Installation Use system package manager to install shadowsocks-libev. In this case, for Arch Linux it is pacman.
There is also a Python package which can be installed by pip but it seems not to be maintained for a long time.
$ sudo pacman -S shadowsocks-libev Shadowsocks Server Configuration Config file is located at /etc/shadowsocks/myserver.json. On FreeBSD it is /usr/local/etc/shadowsocks/myserver.json
The file name can vary.</description></item><item><title>SSH Over GPG Agent</title><link>https://peromage.github.io/p/ssh-over-gpg-agent/</link><pubDate>Sun, 13 Mar 2022 00:02:00 +0000</pubDate><guid>https://peromage.github.io/p/ssh-over-gpg-agent/</guid><description>This is a quick note of gpg-agent setup for SSH.
Quick Setup Import your GPG authentication key. Enable SSH support for gpg-agent. $ echo enable-ssh-support &amp;gt;&amp;gt; $HOME/.gnupg/gpg-agent.conf Get the authentication keygrip. $ gpg -k --with-keygrip Add the authentication key to the keychain (replace KEYGRIP with the value obtained from the previous step) $ echo KEYGRIP &amp;gt;&amp;gt; $HOME/.gnupg/sshcontrol Add the following init code to .bashrc unset SSH_AGENT_PID export SSH_AUTH_SOCK=&amp;#34;$(gpgconf --list-dirs agent-ssh-socket)&amp;#34; export GPG_TTY=&amp;#34;$(tty)&amp;#34; gpg-connect-agent updatestartuptty /bye &amp;gt; /dev/null Kill any running ssh-agent and gpg-agent, and then open a new Bash session.</description></item><item><title>Minimalist's Multi-boot USB Drive</title><link>https://peromage.github.io/p/minimalists-multi-boot-usb-drive/</link><pubDate>Wed, 26 Jan 2022 20:34:00 +0000</pubDate><guid>https://peromage.github.io/p/minimalists-multi-boot-usb-drive/</guid><description>Story Recently I&amp;rsquo;ve realized a fact that I always have needs to keep a multi-boot USB in my pocket for either Linux or Windows installation. There are a lot tools out there already but I don&amp;rsquo;t really like them. At least, I mean, they are too flashy to me. A beautiful boot menu seems not to be attractive. What I need is just a simple and practical maybe a little ugly boot device.</description></item><item><title>Moving From Vim to Emacs</title><link>https://peromage.github.io/p/moving-from-vim-to-emacs/</link><pubDate>Sat, 14 Aug 2021 10:29:00 +0000</pubDate><guid>https://peromage.github.io/p/moving-from-vim-to-emacs/</guid><description>YouTube has been pushing me a lot Emacs related contents. This is weird since mostly I watch Vim videos only. But probably this is also a great opportunity to try Emacs again.
I have tried Emacs half year ago. I looked a lot Elisp programming fundamentals and tried a few Emacs configurations from others including Doom Emacs. However, it didn&amp;rsquo;t last long since I found that I didn&amp;rsquo;t have enough time to configure this Emacs setup as good as the Vim setup that I was using.</description></item><item><title>Dual-booting Windows VHD and Native Linux on a BIOS+GPT PC</title><link>https://peromage.github.io/p/dual-booting-windows-vhd-and-native-linux-on-a-bios-gpt-pc/</link><pubDate>Fri, 09 Jul 2021 16:40:00 +0000</pubDate><guid>https://peromage.github.io/p/dual-booting-windows-vhd-and-native-linux-on-a-bios-gpt-pc/</guid><description>Background Previously I wrote a post for this dual-boot scenario. It is a little outdated. In the past year I mostly worked in the Linux environment on my old laptop, so the Windows seems not to be a necessity which occupies a dedicated partition. However, sometimes it is still needed. That is why I started thinking to improve this setup even further. Starting from Windows 7, Windows supports boots from</description></item><item><title>Git中的Subtree和Submodule</title><link>https://peromage.github.io/p/git%E4%B8%AD%E7%9A%84subtree%E5%92%8Csubmodule/</link><pubDate>Fri, 07 Apr 2017 20:53:00 +0000</pubDate><guid>https://peromage.github.io/p/git%E4%B8%AD%E7%9A%84subtree%E5%92%8Csubmodule/</guid><description>因为最近弄自己的博客，涉及到了版本库嵌套的问题。记下来也算是给自己一个备忘。 为什么有这样的需求 版本库嵌套很好理解，就是在一个 Git 仓库里面包含了</description></item><item><title>Windows+Linux双系统引导手记</title><link>https://peromage.github.io/p/windows-linux%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E6%89%8B%E8%AE%B0/</link><pubDate>Wed, 05 Apr 2017 19:26:00 +0000</pubDate><guid>https://peromage.github.io/p/windows-linux%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E6%89%8B%E8%AE%B0/</guid><description>0x00 情况简述 由于开发需要 Linux 环境，所以将老的那台笔记本改造成了双系统。 这台电脑的基本情况是这样的，64GB 固态硬盘 + 720GB 机械硬盘（实际可用空间有折</description></item></channel></rss>