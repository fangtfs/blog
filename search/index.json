[{"content":"I found that every time when I try to setup VNC for remote access I always have troubles configuring it. I believe this is due to some conceptions which can be easily confusing. So this post serves both notes and reminder for myself.\nChoose a VNC Server Generally I use TigerVNC. It\u0026rsquo;s a fork of TightVNC and the performance is pretty good. Also, it\u0026rsquo;s easy to configure. However, when it comes to installation there are two types of servers: standalone and scraping.\nThe difference is:\nStandalone: It creates a new X server when the client is connected. Independent from the local X server. Scraping: It mirrors the local X server. Pretty much like screen sharing. Usually they are shipped with individual packages. To install, for example, on Ubuntu\n1 2 $ sudo apt install tigervnc-standalone-server $ sudo apt install tigervnc-scraping-server Standalone Server Configuring a standalone server is fairly easy. You would only need three things: client password, server config and server startup script. They are all located under $HOME/.vnc/.\nCreate the password file. 1 $ vncpasswd Create the server config file ($HOME/.vnc/config). A minimal configuration is shown as following. 1 2 3 geometry=1366x768 alwaysshared localhost Create the server startup script ($HOME/.vnc/xstartup). This is also a minimal configuration. 1 2 3 4 #!/bin/sh unset DBUS_SESSION_BUS_ADDRESS vncconfig -iconic \u0026amp; dbus-launch --exit-with-session /usr/bin/gnome-session --session=ubuntu Be aware that the last line dbus-launch is important on some distros that are shipped with default desktop environment. Without it the VNC server could not be started correctly. This is because the newly launched desktop environment tries to reuse the existing D-Bus but it\u0026rsquo;s occupied by the local X server already. dbus-launch makes sure it runs in its own little world. See dbus-launch\u0026rsquo;s man page for details.\nStart the server. Make sure the display port is not used by anyone else. 1 $ vncserver :1 Connect from the client. On the remote PC: 1 $ ssh -L 5901:localhost:5901 -t user@ip The TCP port depends on the display port used to start the VNC server. The equation is like: TCP_PORT = 5900 + DISPLAY_PORT. Usually the :0 is taken by local X server.\nUse any VNC client to connect to localhost:5901.\nScraping Server Configuring a scraping server is slightly different from the standalone server but it\u0026rsquo;s not hard.\nCreate the password file. Same with the standalone server. 1 $ vncpasswd Start the server. This is where it\u0026rsquo;s different from the standalone one. Since it replicates the local X server it doesn\u0026rsquo;t need the configuration. 1 $ x0vncserver -rfbauth $HOME/.vnc/passwd Don\u0026rsquo;t forget to specify the password file or you\u0026rsquo;ll not be able to connect to it.\nConnect from the client. Same with the standalone server. On the remote PC: 1 $ ssh -L 5900:localhost:5900 -t user@ip Local X server already uses display port :0. Then use any VNC client to connect to localhost:5900.\nSynonyms of TigerVNC I was confused by the TigerVNC since there are similar commands. It turned out they are the same.\nvncserver -\u0026gt; tigervncserver vncconfig -\u0026gt; tigervncconfig vncpasswd -\u0026gt; tigervncpasswd ","date":"2022-06-15T17:40:00Z","permalink":"https://peromage.github.io/p/vnc-quick-guide/","title":"VNC Quick Guide"},{"content":"Troubles When working with a complicated project where you have to compare different history versions side by side, it soon becomes frustrating frequently checking out refs.\nThe old stupid way is to clone multiple repos and checkout to the specific revisions. When the project is big this might be a trouble because you\u0026rsquo;re basically duplicating files.\nSavior Git provides a convenience sub-command worktree to checkout a specific ref in another directory without duplicating files.\nAdd a New Checkout 1 $ git worktree add ../foo-ref-1 \u0026lt;ref\u0026gt; Of course you can add as many checkouts as you want.\nRemove a Checkout When the checkout is no longer needed, it can be deleted from this command.\n1 $ git worktree remove --force ../foo-ref-1 If there are uncommitted changes git will prevent you from deleting the directory. In this case --force flag is needed.\n","date":"2022-06-06T00:30:00Z","permalink":"https://peromage.github.io/p/use-git-worktree-to-work-with-multiple-checkout-at-the-same-time/","title":"Use Git Worktree to Work with Multiple Checkout at the Same Time"},{"content":"Autoloading is a neat feature in Emacs. It speeds up Emacs by lazy load the files. But it could be a little confusing if you\u0026rsquo;re switching from Vim.\nMyth - Not Working as Expected If you have used Vim you know in Vim you can put your library files to the load path variable and Vim autoloads them whenever one of the functions/variables is used. Initially I thought this is the same in Emacs but with a little effort to put the magic autoload comments before the function/variable definition. It turned out I was wrong. When I called my functions Emacs could not find them until I explicitly require them. This is obviously not my intention.\nMake It Work After carefully reading the document, I got that the magic autoload comment is just a autoload cookie that guides Emacs to generate the real autoload code. In one word, I have to define the function/variable autoload definition anyways. But with the cookies it simplifies the process.\nAdd magic comment ;;;###autoload before the desired function/variable definition. M-x update-file-autoloads command on the library file which contains the definitions that need to be autoloaded. Store that generated autoload definition file with a different name. Require that autoload definition file in the init.el. That\u0026rsquo;s the process to autoload the custom library. The downside is the update-file-autoloads command has to be called every time the library file is updated.\nAlternative way is to use package-install-from-buffer to install the library file as a package. package.el does the dirty work for you, takes care of autoload definition generation and loading automatically.\nReference https://emacs.stackexchange.com/questions/8023/how-to-use-autoload\n","date":"2022-06-06T00:00:00Z","permalink":"https://peromage.github.io/p/autoloading-in-emacs/","title":"Autoloading in Emacs"},{"content":"I\u0026rsquo;ve been using Emacs since last year but until recent I started using org-mode seriously. After spending a couple of days reading and watching all kinds of org tutorial as well as using it for documentation, I realized that people who invented this must geniuses.\nOrg document seems similar with Markdown: they are text markup format. However, Org provides far more capabilities to store metadata and greater editing experience together with Emacs\u0026rsquo; org-mode.\nMotivation I used to use Markdown to write my blog articles and use Hugo to generate static files.\nThe workflow is pretty much like:\nCreate a new Markdown with header by either snippet template from text editor or Hugo command. Write the article. Set last modified time upon finished. Commit and push then let GitHub CI to generate static files automatically. It looks typical but later on I found it was really frustrating to manage my articles:\nI always forgot to update the last modified time. Tags and categories were set in the header each file. It\u0026rsquo;s difficult check existing tags and categories and make them consistent in the new articles. For example, I always forgot whether a tag or category was capitalized or dash separated. Painful to browse. Because of those troubles I gradually lost interests writing articles until I found org-mode. So I started planning to manage my articles with it.\nChoose the Right Way By checking Hugo\u0026rsquo;s documents, I found that it supports Org backend with go-org. However it seems like just another Markdown method but in Org syntax. Apparently it doesn\u0026rsquo;t use the full Org capabilities.\nLater I found ox-hugo which is an Org backend in Emacs used for Org file export. The idea is to write articles in Org syntax with metadata and whatever you like to do in org-mode and then export to Markdown files through ox-hugo. Finally feed the Markdown files to the Hugo engine. The killer feature is that it supports exporting from subtrees, which means you can manage all my articles in one file categorize them with ease (by the first level outline). And since all the articles are in the same visible file, they can be refiled and move around with org-mode key bindings. Also all tags are visible and can be applied very easily. It gives you a lot flexibility to manage the articles in this way.\nAt the time when this article is read, it\u0026rsquo;s been written in org-mode already. I even use the same file to manage other pages of my blog like about, archives and search pages. You can checkout my original Org file here to figure out how they are defined.\nUpdate CI to Build Static Files on Pushing Since all the articles are managed by the Org file there is no point to keep the old Markdown files. I need to make GitHub CI export the Org file for me so I don\u0026rsquo;t have to do it locally.\nThe problem is to setup Emacs on the job runner. Luckily there are people doing this already by providing a GitHub action. Thanks Steve Purcell and the people who worked on this!\nNow with the Emacs setup ready, one problem left is to export from Org files to Markdown. The idea is pretty straight forward: install ox-hugo from MELPA and export through it. A simple shell command should do the job.\n1 2 3 4 5 6 7 8 emacs -nw --batch --eval \\ \u0026#39;(progn (package-initialize) (add-to-list (quote package-archives) (quote (\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;))) (package-refresh-contents) (package-install (quote ox-hugo)) (find-file \u0026#34;myblog/blog.org\u0026#34;) (org-hugo-export-wim-to-md :all))\u0026#39; After that, feed the generated Markdown files to Hugo engine. No difference from the typical Hugo workflow.\nSee here for my job runner script and workflow configuration.\nFix the Last Modified Date By doing this workflow all the files are always generated so their last modified date are constantly changed (with #+hugo_auto_set_lastmod: t in the header). ox-hugo seems not to have a proper solution to calculate the diff between changes (could be hard though). The best way to solve this is to add either a :LOGBOOK: or a EXPORT_HUGO_LASTMOD property to the subtree. Or even simpler to use TODO and DONE workflow since it generates :LOGBOOK: automatically. When any one of them specified ox-hugo will the value from it instead of generating a new date.\nSince manually changing the modification time in EXPORT_HUGO_LASTMOD sucks and it\u0026rsquo;s the same solution back in the Markdown style, this time I decided to use \u0026ldquo;Org\u0026rdquo; way to fix this problem. By looking at the document, :LOGBOOK: has the highest priority among other options and also has a synergy with todo workflow. That\u0026rsquo;s cool. I can treat my article writing like any other tasks.\nBut I don\u0026rsquo;t quite like the default keywords TODO and DONE since they doesn\u0026rsquo;t sound semantic to the articles. So I added a header to my blog Org file: #+seq_todo: DRAFT(d) | PUBLISHED(p!).\nThen I found another problem that whenever I change the state from DRAFT to PUBLISHED there is always a CLOSED time property added to the article. This is because I have (setq org-log-done 'time) in my Emacs configuration file. It duplicates :LOGBOOK: since it has already logged the transition time and I don\u0026rsquo;t want to change my Emacs configuration specific for this file. So I added another header to my blog Org file: #+startup: nologdone and also make sure the state transition records are always put into the drawer: #+startup: logdrawer.\nOkay now I should be able to start a new article with DRAFT prefix and then use C-c C-t to change it to PUBLISHED whenever I\u0026rsquo;m done writing. However things are still not going as I expected. Remember the date precedence page? The first transition to PUBLISHED state record is recognized as the creation date. Only the second or later records to PUBLISHED state will be read as the last modified date. That\u0026rsquo;s dumb. To fix this, I added a new todo item and now it\u0026rsquo;s like: #+seq_todo: DRAFT(d) | CREATED(c!) PUBLISHED(p!).\nNow my blog header is like:\n1 2 3 4 5 6 7 8 9 #+author: Fang Deng #+startup: show2levels #+startup: nologdone #+startup: logdrawer #+seq_todo: DRAFT(d) | CREATED(c!) PUBLISHED(p!) #+options: d:t #+hugo_base_dir: ../ #+hugo_section: blog #+hugo_auto_set_lastmod: t Don\u0026rsquo;t forget the #+options: d:t. ox-hugo will not export :LOGBOOK: without it.\nFinally a sweet snippet file to save my life.\n1 2 3 4 5 6 7 8 9 10 11 12 # -*- mode: snippet -*- # name: Hugo new article # key: hugonew # -- ** DRAFT ${1:TITLE} :PROPERTIES: :EXPORT_FILE_NAME: ${1:$(replace-regexp-in-string \u0026#34;[^A-Za-z0-9._-]\u0026#34; \u0026#34;\u0026#34; (replace-regexp-in-string \u0026#34; \u0026#34; \u0026#34;-\u0026#34; (downcase yas-text)))} :END: :LOGBOOK: - State \u0026#34;CREATED\u0026#34; from [`(string-trim (format-time-string (cdr org-time-stamp-formats)) \u0026#34;\u0026lt;\u0026#34; \u0026#34;\u0026gt;\u0026#34;)`] :END: $0 Now a new article will come with its creation time. Whenever the article is done, C-c C-t to mark it PUBLISHED which will be the last modified time. If the article is modified in the future, simply C-c C-t again to add another PUBLISHED state and the last modified time will be refreshed on export. Now I have a neat log book to record my changes. No more manually editing suckers!\n","date":"2022-06-05T23:00:00Z","permalink":"https://peromage.github.io/p/use-org-mode-to-manage-my-blog/","title":"Use Org Mode to Manage My Blog"},{"content":"Background I\u0026rsquo;ve been working on optimization for some C++ code recently. One of the part is to initialize some data at compile time. Consider we have a C style enum definition:\n1 2 3 4 5 typedef enum Foo { AAA = 0, BBB, CCC } Foo_t; We want to have an array of the enum with undefined initial values 999 because by default initialization the values would be 0\u0026rsquo;s. However, std::array can only be initialized by initializer list, which is said:\n1 2 3 4 // Partial initialization constexpr std::array\u0026lt;Foo_t, 5\u0026gt; array {static_cast\u0026lt;Foo_t\u0026gt;(999), static_cast\u0026lt;Foo_t\u0026gt;(999)}; // Results in int equivalent: {999, 999, 0, 0, 0} If there are a hundred of elements then you have to write all of them down in the list.\nYou can, of course, initialize it in a loop but this sacrifices runtime performance.\n1 2 3 4 5 6 7 // Runtime initialization std::array\u0026lt;Foo_t, 5\u0026gt; array {}; for (auto\u0026amp; i : array) { i = static_cast\u0026lt;Foo_t\u0026gt;(999); } // Results in int equivalent: {999, 999, 999, 999, 999} Generating code by templates We can use recursive deduction of templates to generate our code. There is a limit that you can only do 1024 times of recursion but in my case it\u0026rsquo;s enough.\nThe idea is to count the size to zero and use variadic argument to increase the number of arguments on each recursion. Finally the size of the array will be passed to the bottom and the variadic argument gets expanded.\nIt\u0026rsquo;s a pretty simple trick.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 template\u0026lt;std::size_t N, std::size_t M, typename T, typename... U\u0026gt; struct ARR_IMPL { static constexpr auto arr = ARR_IMPL\u0026lt;N, M-1, T, T, U...\u0026gt;::arr; }; template\u0026lt;std::size_t N, typename T, typename... U\u0026gt; struct ARR_IMPL\u0026lt;N, 0, T, U...\u0026gt; { static constexpr std::array\u0026lt;T, N\u0026gt; arr {static_cast\u0026lt;U\u0026gt;(999)...}; }; template\u0026lt;std::size_t N, typename T\u0026gt; struct ARR { static constexpr auto arr = ARR_IMPL\u0026lt;N, N-1, T, T\u0026gt;::arr; }; constexpr auto array1 = ARR\u0026lt;5, Foo_t\u0026gt;::arr; constexpr auto array2 = ARR\u0026lt;100, Foo_t\u0026gt;::arr; // array1 results in int equivalent: {999, 999, 999, 999, 999} // array2 results in int equivalent: {999, 999, 999, 999, 999, ...} ","date":"2022-03-16T10:25:00Z","permalink":"https://peromage.github.io/p/initialize-stdarray-at-compile-time/","title":"Initialize std::array at Compile Time"},{"content":"Before starting First thing first. I\u0026rsquo;ve been rarely using Windows over years except for working and gaming. Linux community grows fast and there are a lot alternatives available. On the contrary, Windows gets crapy every year (Office 365 is still good IMO) so there is no reason to run this huge spyware all the time.\nModern PCs are strong enough to run a VM. Besides most of PCs have both integrated and descret graphic cards. This setup is perfect for gaming VM which requires PCI passthrough.\nIn this post, I\u0026rsquo;m not going to explain everything because the ArchWiki is clear enough already. This is just a quick guide for the setup.\nNOTE: Avoid Intel K series CPUs which usually don\u0026rsquo;t have integrated graphic card.\nGet started Identify your PC is qualified To get high graphic performance, your CPU and motherboard must support VT-d and IOMMU respectively.\nIf not, you can stop here and choose the traditional way to dual-boot Linux and Windows.\nNOTE: you can check PCI passthrough via OVMF prerequisite section for more information.\nInstall QEMU I wrote a script to handle this automatically so just run this script before hands.\nNOTE: I\u0026rsquo;m using Arch Linux.\nIdentify discrete graphic card In a terminal:\n1 2 3 4 5 6 7 8 9 10 $ lspci -nnk 01:00.0 VGA compatible controller [0300]: NVIDIA Corporation GM204 [GeForce GTX 970] [10de:13c2] (rev a1) Subsystem: Gigabyte Technology Co., Ltd Device [1458:367a] Kernel driver in use: nouveau Kernel modules: nouveau 01:00.1 Audio device [0403]: NVIDIA Corporation GM204 High Definition Audio Controller [10de:0fbb] (rev a1) Subsystem: Gigabyte Technology Co., Ltd Device [1458:367a] Kernel driver in use: snd_hda_intel Kernel modules: snd_hda_intel Take a note of the device IDs. In this example I have a Nvidia GTX970 graphic card along with a audio controller. They belong to the same group (domain) you have to take them all.\nIn this case I got 1458:367a and 1458:367a. These are the PCI devices that will be passed through to the VM. Other PCI devices can be passed too.\nModify kernel parameter Then we\u0026rsquo;re going to turn IOMMU on and prevent host Linux loading PCI devices that we want to pass-through to the VM.\nThe kernel parameter passing could be different depending on the bootloader you use. In this example, I use grub.\nOpen /etc/default/grub with your favorite text editor. You have to add intel_iommu=on to the kernel parameter along with vfio-pci.ids=10de:13c2,10de:0fbb which contains the device IDs you got from the previous step.\n1 2 3 4 5 6 7 # /etc/default/grub # Change this line GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;loglevel=3 quiet\u0026#34; # To GRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;loglevel=3 quiet intel_iommu=on vfio-pci.ids=10de:13c2,10de:0fbb\u0026#34; Then update the bootloader config file.\n1 $ sudo grub-mkconfig -o /boot/grub/grub.cfg The most tricky part is done. Restart the PC now.\nNOTE: You can check dmesg after reboot to verify IOMMU is turned on successfully.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 $ sudo dmesg | grep -i -e DMAR -e IOMMU [ 0.000000] ACPI: DMAR 0x00000000BDCB1CB0 0000B8 (v01 INTEL BDW 00000001 INTL 00000001) [ 0.000000] Intel-IOMMU: enabled [ 0.028879] dmar: IOMMU 0: reg_base_addr fed90000 ver 1:0 cap c0000020660462 ecap f0101a [ 0.028883] dmar: IOMMU 1: reg_base_addr fed91000 ver 1:0 cap d2008c20660462 ecap f010da [ 0.028950] IOAPIC id 8 under DRHD base 0xfed91000 IOMMU 1 [ 0.536212] DMAR: No ATSR found [ 0.536229] IOMMU 0 0xfed90000: using Queued invalidation [ 0.536230] IOMMU 1 0xfed91000: using Queued invalidation [ 0.536231] IOMMU: Setting RMRR: [ 0.536241] IOMMU: Setting identity map for device 0000:00:02.0 [0xbf000000 - 0xcf1fffff] [ 0.537490] IOMMU: Setting identity map for device 0000:00:14.0 [0xbdea8000 - 0xbdeb6fff] [ 0.537512] IOMMU: Setting identity map for device 0000:00:1a.0 [0xbdea8000 - 0xbdeb6fff] [ 0.537530] IOMMU: Setting identity map for device 0000:00:1d.0 [0xbdea8000 - 0xbdeb6fff] [ 0.537543] IOMMU: Prepare 0-16MiB unity mapping for LPC [ 0.537549] IOMMU: Setting identity map for device 0000:00:1f.0 [0x0 - 0xffffff] [ 2.182790] [drm] DMAR active, disabling use of stolen memory Install the VM Open virt-manager GUI and follow the guide to setup.\nSome settings should be tweaked specifically:\nOverview: Change Firmware to UEFI CPUs: Change vCPU allocation to the maximal host CPUs. In this case, it\u0026rsquo;s 8 Unselect Copy host CPU configuration and change Model to host-passthrough Select Manually set CPU topology. Change Sockets to 1, Cores to 4, Threads to 2 (Physical core 4 * threads for each core 2) Disk: Change Disk bus to VirtIO Display Spice: You don\u0026rsquo;t really need it so remove it Video: Change to None PCI: Add your discrete graphic card as well as anything with it (audio controller etc.) USB: Mouse, keyboards, game controllers etc. After saving the settins, the installation should start but don\u0026rsquo;t install Windows yet. Instead, force power if off. Open VM settings in XML view, add following content to prevent Nvidia driver installer discovering the VM environment.\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;features\u0026gt; ... \u0026lt;hyperv\u0026gt; ... \u0026lt;vendor_id state=\u0026#39;on\u0026#39; value=\u0026#39;1234567890ab\u0026#39;/\u0026gt; ... \u0026lt;/hyperv\u0026gt; ... \u0026lt;kvm\u0026gt; \u0026lt;hidden state=\u0026#39;on\u0026#39;\u0026gt; \u0026lt;/kvm\u0026gt; ... \u0026lt;/features\u0026gt; Alternatively, this has the same effect.\nNOTE: win11 is the VM name you\u0026rsquo;ve just created.\n1 $ sudo virshpatcher --error43 --vender-id 1234567890ab win11 Install virtio drivers In the Windows VM, download the virtio driver and install it.\nNOTE: Check ArchWiki QEMU for more info\nPost installation If you don\u0026rsquo;t want to switch monitors you can try Looking Glass which allows you redirect VM display output to a emulated monitor.\nReference [QEMU install script ArchWiki QEMU ArchWiki OVMF Looking Glass Virtio driver\n","date":"2022-03-13T17:47:00Z","permalink":"https://peromage.github.io/p/setup-a-gaming-vm/","title":"Setup A Gaming VM"},{"content":"Google Photo sucks.\nTroubles When exporting photos from Google Photo, a bunch of JSON files come with your photos. Those JSON files contain metadata which is supposed to be stored with your photo files. If you simple import those photo files into another photo manager you will most likely not get a chronological view. Obviously, Google does on purpose so that you will not leave it easily. However, there is a workaround that is able to merge those metadata into your photos.\nRestore the Metadate Get exiftool: https://github.com/exiftool/exiftool Export your Google Photos and extract the downloaded compressed files into a folder Save the following content to fix-args.txt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Usage: exiftool -@ fix-args.txt \u0026lt;takeout_dir\u0026gt; -r -d %s -tagsFromFile %d/%F.json -ext * --ext json -overwrite_original -progress -GPSAltitude\u0026lt;GeoDataAltitude -GPSLatitude\u0026lt;GeoDataLatitude -GPSLongitude\u0026lt;GeoDataLongitude -DateTimeOriginal\u0026lt;PhotoTakenTimeTimestamp -ModifyDate\u0026lt;PhotoLastModifiedTimeTimestamp -CreateDate\u0026lt;CreationTimeTimestamp -GPSAltitudeRef\u0026lt;GeoDataAltitude -GPSLatitudeRef\u0026lt;GeoDataLatitude -GPSLongitudeRef\u0026lt;GeoDataLongitude Execute 1 $ exiftool -@ fix-args.txt \u0026lt;takeout_dir\u0026gt; Delete JSON files and import your photos to somewhere else This argument file contains the fields that are meaningful to me. If you need to merge additional fields you can append them to the last. For details, check the man page of exiftool.\n","date":"2022-03-13T00:12:00Z","permalink":"https://peromage.github.io/p/fix-metadata-in-google-photo-takeout/","title":"Fix Metadata in Google Photo Takeout"},{"content":"This note is written for my personal convenience.\nServer Setup Installation Use system package manager to install shadowsocks-libev. In this case, for Arch Linux it is pacman.\nThere is also a Python package which can be installed by pip but it seems not to be maintained for a long time.\n1 $ sudo pacman -S shadowsocks-libev Shadowsocks Server Configuration Config file is located at /etc/shadowsocks/myserver.json. On FreeBSD it is /usr/local/etc/shadowsocks/myserver.json\nThe file name can vary.\n1 2 3 4 5 6 7 8 9 10 { \u0026#34;server\u0026#34;: \u0026#34;0.0.0.0\u0026#34;, \u0026#34;server_port\u0026#34;: 8388, \u0026#34;password\u0026#34;: \u0026#34;mypassword\u0026#34;, \u0026#34;timeout\u0026#34;: 300, \u0026#34;method\u0026#34;: \u0026#34;chacha20-ietf-poly1305\u0026#34;, \u0026#34;fast_open\u0026#34;: false, \u0026#34;workers\u0026#34;: 1, \u0026#34;nameserver\u0026#34;: \u0026#34;8.8.8.8\u0026#34; } Note: For server, \u0026quot;local_address\u0026quot;: \u0026quot;127.0.0.1\u0026quot; and \u0026quot;local_port\u0026quot;: 1080 would cause problems so don\u0026rsquo;t them.\nStart the Server as A System Service The server can be started in the background but it\u0026rsquo;s not persistent after reboot.\n1 $ ss-server -c /etc/shadowsocks/myserver.json \u0026amp; Use systemd to make it run automatically.\nNote: The config file name has to be placed after @.\n1 2 $ sudo systemctl enable shadowsocks-libev-server@myserver $ sudo systemctl start shadowsocks-libev-server@myserver Client Helper SS Access Key Generation Script (Bash Script) This script will prompt you to input parameters that are in the config file to generate a base64 encoded link.\n1 2 3 4 5 6 7 #!/usr/bin/bash # Usage: this_script.sh read -p \u0026#39;Method: \u0026#39; -r ss_method read -p \u0026#39;Password: \u0026#39; -r ss_password read -p \u0026#39;Server IP: \u0026#39; -r ss_server_ip read -p \u0026#39;Server Port: \u0026#39; -r ss_server_port echo \u0026#34;ss://\u0026#34; $(printf \u0026#34;${ss_method}:${ss_password}@${ss_server_ip}:${ss_server_port}\u0026#34; | base64) SS Access Key Generation Script (JavaScript) This approch requires Node.js but it can parse config file automatically.\n1 2 3 4 5 6 7 8 9 10 11 12 13 // Usage: node this_script.js \u0026lt;config_file\u0026gt; let argv = process.argv.slice(2); if (argv.length \u0026lt; 1) { console.log(\u0026#34;nothing\u0026#34;); return; } const fs = require(\u0026#39;fs\u0026#39;); let config_file = argv[0]; let config_json = JSON.parse(fs.readFileSync(config_file)); let ss_url = \u0026#34;ss://\u0026#34; + btoa(`${config_json[\u0026#39;method\u0026#39;]}:${config_json[\u0026#39;password\u0026#39;]}@${config_json[\u0026#39;server\u0026#39;][0]}:${config_json[\u0026#39;server_port\u0026#39;]}`); console.log(ss_url); ","date":"2022-03-13T00:03:00Z","permalink":"https://peromage.github.io/p/shadowsocks-quick-setup/","title":"Shadowsocks Quick Setup"},{"content":"This is a quick note of gpg-agent setup for SSH.\nQuick Setup Import your GPG authentication key. Enable SSH support for gpg-agent. 1 $ echo enable-ssh-support \u0026gt;\u0026gt; $HOME/.gnupg/gpg-agent.conf Get the authentication keygrip. 1 $ gpg -k --with-keygrip Add the authentication key to the keychain (replace KEYGRIP with the value obtained from the previous step) 1 $ echo KEYGRIP \u0026gt;\u0026gt; $HOME/.gnupg/sshcontrol Add the following init code to .bashrc 1 2 3 4 unset SSH_AGENT_PID export SSH_AUTH_SOCK=\u0026#34;$(gpgconf --list-dirs agent-ssh-socket)\u0026#34; export GPG_TTY=\u0026#34;$(tty)\u0026#34; gpg-connect-agent updatestartuptty /bye \u0026gt; /dev/null Kill any running ssh-agent and gpg-agent, and then open a new Bash session. Misc Export SSH Public Keys 1 $ gpg --export-ssh-key \u0026lt;uid/fingerprint\u0026gt; ","date":"2022-03-13T00:02:00Z","permalink":"https://peromage.github.io/p/ssh-over-gpg-agent/","title":"SSH Over GPG Agent"},{"content":"Story Recently I\u0026rsquo;ve realized a fact that I always have needs to keep a multi-boot USB in my pocket for either Linux or Windows installation. There are a lot tools out there already but I don\u0026rsquo;t really like them. At least, I mean, they are too flashy to me. A beautiful boot menu seems not to be attractive. What I need is just a simple and practical maybe a little ugly boot device. It should be minimalist. More importantly, it has to be easy to setup with the tools on the system already and maintainable. No funky scripts.\nOld Solution - Clunky I\u0026rsquo;ve been using this solution for a very long time. Setup is pretty straight forward.\nThe partition scheme used on the USB drive is like (GPT):\nPartition Size Filesystem Note /dev/sda1 100 GB NTFS Data partition /dev/sda2 512 MB FAT EFI partition /dev/sda3 1 MB No filesystem BIOS boot partition used by GRUB /dev/sda4 8 GB NTFS Windows ISO files /dev/sda5 2 GB FAT Arch Linux ISO files So the idea is having a big data partition at the front for better access, then installing GRUB files on the second EFI partition with both EFI and BIOS support (Implemented by the third BIOS boot partition. The partition order doesn\u0026rsquo;t matter). Finally, create dedicated partitions to contain the extracted files from installation ISOs.\nWhen the USB drive is plugged in, I can use grub command line to chainload the EFI file that is located in the ISO partition, or the VBR if it\u0026rsquo;s booted with legacy mode.\nWell, it\u0026rsquo;s usable but I still feel that it is too much for a small USB drive - too many partitions. If I plug the drive in for just data exchange, there would be a a bunch of partitions mounted and the notification is quite annoying. So I started thinking that there must be a simpler way to do it.\nNew Solution - Much Better Partitioning The goal is simplicity so the new partition scheme is like this:\nPartition Size Filesystem Note /dev/sda1 100 GB NTFS Data partition /dev/sda2 512 MB FAT EFI partition /dev/sda3 1 MB No filesystem BIOS boot partition used by GRUB (Optional) The third BIOS boot partition is not really necessary since most of computers nowadays are using UEFI. If you really need the legacy compatibility, you can create one. I\u0026rsquo;ll keep it for now.\nInstalling GRUB Typical GRUB insallation but install for both EFI and BIOS.\n1 2 3 $ sudo mount /dev/sda2 /mnt $ sudo grub-install --target=x86_64-efi --efi-directory=/mnt --boot-directory=/mnt --removable $ sudo grub-install --target=i386-pc --boot-directory=/mnt /dev/sda Don\u0026rsquo;t forget to create a GRUB menu config file. Otherwise GRUB will boot into its command line interface (If you know what you\u0026rsquo;re doing). It\u0026rsquo;s a good idea to put a editable config file in the data partition since it will be the most used partition. However, GRUB reads the file in the EFI partition by default: (esp)/grub/grub.cfg. We can tell GRUB to read out custom config file after that.\n1 2 3 4 # (esp)/grub/grub.cfg search --set=root --file /boot.cfg configfile /boot.cfg Thus we are done with the EFI partition. All the menu configuration will go into boot.cfg in the data partition.\nLinux Installer Most of modern Linux distros support booting from a loop device. That is to say, we don\u0026rsquo;t have to extract the content of ISO files. Using GRUB loopback command can easily mount a ISO and boot from there. But chainloading the EFI or VBF is not possible. Based on the GRUB manual:\nGRUB is able to read from an image (be it one of CD or HDD) stored on any of its accessible storages (refer to see loopback command). However the OS itself should be able to find its root. This usually involves running a userspace program running before the real root is discovered.\nEFI bootloader usually will fail to find the root device by this method. However, we can manually load the kernel and ramdisk in which we can specify the root device by ourselves.\nLoad Linux ISO I\u0026rsquo;m using Arch Linux here for example.\nPut the ISO file to (data)/images/archlinux-2022.01.01-x86_64.iso. Mount ISO. We need to find the kernel loading parameters. In the file (arch)/syslinux/archiso_sys-linux.cfg we would see 1 2 3 4 5 6 7 8 9 10 # Copy to RAM boot option LABEL arch64ram TEXT HELP Boot the Arch Linux install medium on BIOS with Copy-to-RAM option It allows you to install Arch Linux or perform system maintenance. ENDTEXT MENU LABEL Arch Linux install medium (x86_64, BIOS, Copy to RAM) LINUX /arch/boot/x86_64/vmlinuz-linux INITRD /arch/boot/intel-ucode.img,/arch/boot/amd-ucode.img,/arch/boot/x86_64/initramfs-linux.img APPEND archisobasedir=arch archisolabel=ARCH_202201 copytoram This is a syslinux config file. Parameters after APPEND are the ones that we\u0026rsquo;re looking for.\nThen add the following content to (data)/boot.cfg. When copying the initrd parameters, don\u0026rsquo;t forget to remove commas.\n1 2 3 4 5 6 7 menuentry \u0026#34;Archiso 202201 RAM\u0026#34; { search --set=root --file /boot.cfg loopback loop /images/archlinux-2022.01.01-x86_64.iso set root=(loop) linux /arch/boot/x86_64/vmlinuz-linux archisobasedir=arch archisolabel=ARCH_202201 copytoram initrd /arch/boot/intel-ucode.img /arch/boot/amd-ucode.img /arch/boot/x86_64/initramfs-linux.img } Then the Linux installer is done. If we need more distros, the process is similar.\nWindows Installer I prefer to use NTFS as my data partition\u0026rsquo;s file system because it works on both Linux and Windows, and supports big files. Also I usually just keep one copy of Windows installer so for Windows, I can simply dump the ISO content to the data partition\u0026rsquo;s root. I don\u0026rsquo;t mind the extra a few folders there. Plus some of them can be safely deleted. Then chainloading from GRUB is possible.\nIn (data)/boot.cfg\n1 2 3 4 menuentry \u0026#34;Windows 10 Installer\u0026#34; { search --set=root --file /boot.cfg chainloader /efi/boot/bootx64.efi } Windows PE Alternatively, I can directly boot from a small WinPE image and use dism command to extract install.wim to the target without accepting the annoying Windows partition scheme (You know what I\u0026rsquo;m talking about).\nTo create a PE image we need a Windows environment and a CMD window with admin privilege.\nCreate a virtual disk to contain PE files. Assigned with volume letter P:\\.\n1 2 3 4 5 6 7 8 9 \u0026gt; diskpart DISKPART\u0026gt; create vdisk file=c:\\winpe.vhd maximum=2000 type=fixed DISKPART\u0026gt; select vdisk file=c:\\winpe.vhd DISKPART\u0026gt; attach vdisk DISKPART\u0026gt; convert mbr DISKPART\u0026gt; create partition primary DISKPART\u0026gt; format fs=ntfs quick DISKPART\u0026gt; assign letter=p DISKPART\u0026gt; exit Then mount the Windows installer ISO. Assuming the assigned volume is G:\\.\n1 2 3 4 \u0026gt; dism /apply-image /imagefile:g:\\sources\\boot.wim /index:1 /applydir:p:\\ \u0026gt; dism /image:p:\\ /set-targetpath:x:\\ \u0026gt; dism /image:p:\\ /set-inputlocale:en-us \u0026gt; dism /image:p:\\ /set-userlocale:en-us Assign EFI partition with volume letter E:\\.\nBefore creating the bootloader for Windows PE, we need to backup our GRUB EFI file (Windows PE bootloader will overwrite it). Rename E:\\EFI to E:\\EFI-grub.\nCreate Windows PE bootloader.\n1 \u0026gt; bcdboot p:\\Windows /l en-us /s e: /f uefi Then merge both E:\\EFI and E:\\EFI-grub. If it prompts overwriting E:\\EFI\\Boot\\bootx64.efi, confirm with yes.\nThen add following content to (data)/boot.cfg.\n1 2 3 4 menuentry \u0026#34;Windows PE\u0026#34; { search --set=root --file /boot.cfg chainloader /EFI/Microsoft/Boot/bootmgfw.efi } Loading Any ISO Some ISO is capable to be loaded directly into memory. The size of the ISO file is critical. Generally it should not exceed the physical memory. This can be done by memdisk from syslinux.\nCopy the memdisk into the EFI partition.\n1 $ sudo cp /usr/lib/syslinux/bios/memdisk (esp)/memdisk Then put the following content to (data)/boot.cfg. For example, loading a Windows PE ISO.\n1 2 3 4 5 menuentry \u0026#34;Windows PE ISO\u0026#34; { search --set=root --file /boot.cfg linux16 memdisk iso ro initrd16 /images/winpe.iso } The End Finally I\u0026rsquo;m very satisfied with this new USB drive. Yay!\n","date":"2022-01-26T20:34:00Z","permalink":"https://peromage.github.io/p/minimalists-multi-boot-usb-drive/","title":"Minimalist's Multi-boot USB Drive"},{"content":"YouTube has been pushing me a lot Emacs related contents. This is weird since mostly I watch Vim videos only. But probably this is also a great opportunity to try Emacs again.\nI have tried Emacs half year ago. I looked a lot Elisp programming fundamentals and tried a few Emacs configurations from others including Doom Emacs. However, it didn\u0026rsquo;t last long since I found that I didn\u0026rsquo;t have enough time to configure this Emacs setup as good as the Vim setup that I was using. Also using other\u0026rsquo;s configurations makes things complicated for me. They have too many packages included and I don\u0026rsquo;t know what they are.\nAfter watching a bunch of Emacs videos I decided to pick it up this time, with vanilla Emacs starting from scratch. The reason why I make my mind this time is because I found Emacs can perfectly and elegantly solve some problems that pain my ass:\nMore convenient package management. High quality packages. Easier file management in shell environment within the editor (Dired) No third party dependencies like Node.js and Python. The two major plugs that I\u0026rsquo;m using in Vim are Coc and Leaderf. They require Node.js and Python to work. Since Elisp is power enough, Emacs can handle this easily by itself. Server-client architecture. I can even replace Tmux with Emacs now. NeoVim has the similar concept but it cannot match what Emacs has. Graphical interface in X mode. This makes Emacs be able to display rich contents. Org mode. It looks great to organize todo list and take notes without switching to other applications. Evil mode. No need to worry about missing Vim\u0026rsquo;s features. Magit. Looks way better and nicer than fugitive. Elisp. Elisp is fun 😉. The migration is going slowly. Right now my main setup is still Vim + Tmux. There is a little curve learning from vanilla edition of Emacs, but It\u0026rsquo;s not a big deal compared with the first time when I started learning Vim 🙂.\nIn the end, dont\u0026rsquo;t give me wrong. Vim and Emacs both are great text editor. For me, Vim is more like a spirit, a concept. Once you\u0026rsquo;ve learned its high-efficiency key maps, you can use it everywhere. Even though I switch to Emacs I still use Vim mode together with Emacs\u0026rsquo; powerful extendability. Why not?\n","date":"2021-08-14T10:29:00Z","permalink":"https://peromage.github.io/p/moving-from-vim-to-emacs/","title":"Moving From Vim to Emacs"},{"content":"Background Previously I wrote a post for this dual-boot scenario. It is a little outdated. In the past year I mostly worked in the Linux environment on my old laptop, so the Windows seems not to be a necessity which occupies a dedicated partition. However, sometimes it is still needed. That is why I started thinking to improve this setup even further.\nStarting from Windows 7, Windows supports boots from a VHD file which makes it so much easier to manage. Also you are able to create differencing disks which are pretty much like snapshots.\nFor this new configuration, my plan is to use BIOS + GPT disk table + Native Linux + Native Windows booting from VHD + GRUB as the bootloader.\nPartitioning To make GPT works with BIOS. It is required to have a small partition flagged with EF02.\nThe partition scheme looks like this:\nDevice Start End Sectors Size Type /dev/sda1 34 2047 2014 1007K BIOS Boot /dev/sda2 2048 1026047 1024000 500M EFI System /dev/sda3 1026048 206546943 205520896 98G Linux Filesystem /dev/sda4 206546944 835692543 629145600 300G Linux Filesystem /dev/sda5 835692544 1465149134 629456591 300.1G Microsoft Basic Data Installing Linux Any Linux distro would work. I chose Manjaro KDE this time because I found that the Pop OS made my laptop really hot sometimes (Yeah KDE is prettier).\nThis part should be easy. The GRUB files is going into that EFI partition. For details, check GRUB wiki.\nPreparing to Install Windows I\u0026rsquo;m not going to use the standard Windwos installer since I want to install it into a VHD file. To make it work we need a Windows PE environment.\nPreparing Images Any Windows PE (Windows 7 and above) would work. The PE ISO image is going to /boot/wepe.iso.\nAlso a Windows ISO image is needed. For example a Windows 7 ISO named windows7.iso will be put in the Windows data partition.\nAdding Windows PE to GRUB Boot into Linux. Download Windows PE ISO file and move it to the EFI partition (EXT4 partitions might be problematic).\nTo load this ISO image, memdisk tool from syslinux is required. Steps as below on Arch based distro:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # Installing syslinux $ sudo pacman -S syslinux # Copying memdisk to the boot partition $ sudo cp /usr/lib/syslinux/bios/memdisk /boot/memdisk # Adding Windows PE entry to GRUB. 1DB1-9C31 is the boot partition\u0026#39;s UUID $ sudo cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;/etc/grub.d/40_custom menuentry \u0026#34;WePE x64\u0026#34; { search --set=root --no-floppy --fs-uuid 1DB1-9C31 linux16 /memdisk iso ro initrd16 /wepe.iso } EOF # Updating GRUB entries $ sudo grub-mkconfig -o /boot/grub/grub.cfg Installing Windows to a VHD File After adding Windows PE to the bootloader entries, it is time to switch the working environment.\nRestart the PC, then keep pression shift key until the GRUB menu shows up. Now navigate to the Windows PE entry and get in there.\nCreating a VHD File for Windows To create a VHD file, open a command line window and enter diskpart\n1 2 3 4 5 6 7 8 9 10 11 12 13 # Create a VHD file assuming the NTFS data partition is assigned with D: DISKPART\u0026gt; create vdisk file=d:\\windows7.vhd maximum=64000 type=fixed DISKPART\u0026gt; select vdisk file=d:\\windows7.vhd DISKPART\u0026gt; attach vdisk # Disk table type doesn\u0026#39;t matter but using MBR for better compatibility DISKPART\u0026gt; convert mbr # Create the system partition and assign it with C: DISKPART\u0026gt; create partition primary DISKPART\u0026gt; format fs=ntfs quick DISKPART\u0026gt; assign letter=c DISKPART\u0026gt; exit Now the Windows image can be dumped into this VHD file.\nExtracting Windows Image Mount the Windows ISO image to E: volume and open a command line window\n1 2 3 4 5 # Get the image index. For example the desired version\u0026#39;s index is 1 \u0026gt; dism /get-wiminfo /wimfile=e:\\sources\\install.wim # Extract the image. Where E: is the Windows ISO and C: is the VHD file \u0026gt; dism /apply-image /imagefile:e:\\sources\\install.wim /index:1 /applydir:c:\\ Fixing the Windows Bootloader Stay in Windows PE. Don\u0026rsquo;t restart the PC. We still need to fix the bootloader for Windows.\nNormally Windows cannot be booted with a GPT+MBR setup. And also loading the whole Windows VHD file through memdisk is not possible because it\u0026rsquo;s too large to load into memory. To fix the boot issue a bridge is needed between Windows and GRUB.\nLuckily a small VHD image can still be loaded by memdisk.\nThe idea is: GRUB -\u0026gt; MS Bootmgr VHD -\u0026gt; Windows VHD\nCreating a Dedicated Bootloader Image for Windows It is same with the process creating a VHD file for Windows system but this time it is a smaller file (32 MB).\n1 2 3 4 5 6 7 8 9 # Create a small bootmgr VHD file in the data partition DISKPART\u0026gt; create vdisk file=d:\\bootmgr.vhd maximum=32 type=fixed DISKPART\u0026gt; select vdisk file=d:\\bootmgr.vhd DISKPART\u0026gt; attach vdisk DISKPART\u0026gt; convert mbr DISKPART\u0026gt; create partition primary DISKPART\u0026gt; format fs=ntfs quick DISKPART\u0026gt; assign letter=f DISKPART\u0026gt; exit Now the bootmgr VHD is mounted at F:. Then write the boot record and create boot configuration files.\n1 2 \u0026gt; bootsect /nt60 f: /mbr \u0026gt; bcdboot c:\\Windows /l en-us /s f: /f bios Fixing the BCD Entry At this point it should be working according to the Microsoft\u0026rsquo;s document. In fact it is not.\nLet\u0026rsquo;s check the BCD entries, in a command window:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026gt; bcdedit /store f:\\Boot\\BCD /enum Windows Boot Manager -------------------- identifier {bootmgr} device partition=F: description Windows Boot Manager locale en-us inherit {globalsettings} default {default} resumeobject {fcd67427-e033-11eb-8826-cdf90e3873d0} displayorder {default} toolsdisplayorder {memdiag} timeout 30 Windows Boot Loader ------------------- identifier {default} device partition=C: path \\Windows\\system32\\winload.exe description Windows 7 locale en-us inherit {bootloadersettings} osdevice partition=C: systemroot \\Windows resumeobject {fcd67427-e033-11eb-8826-cdf90e3873d0} nx OptIn detecthal Yes The device and osdevice seems to be right but once the Windows VHD is unmounted it becomes unknown. According to this BCDEdit notes, BCD entry records the partition\u0026rsquo;s information such as UUID to find the correct partition during bootup. In this case the partition can\u0026rsquo;t be found until the VHD file is mounted. But this VHD file is not mounted automatically.\nThus we need to correct this and let Bootmgr locate the VHD file properly.\nIn a command line window:\n1 2 3 # The identifier must match the one which is showing above \u0026gt; bcdedit /store C:\\Boot\\BCD /set {default} device vhd=[D:]\\windows7.vhd \u0026gt; bcdedit /store C:\\Boot\\BCD /set {default} osdevice vhd=[D:]\\windows7.vhd If we check the BCD entry again it doesn\u0026rsquo;t change. But if we unmount the Windows VHD it will become:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026gt; bcdedit /store f:\\Boot\\BCD /enum Windows Boot Manager -------------------- identifier {bootmgr} device partition=E: description Windows Boot Manager locale en-us inherit {globalsettings} default {default} resumeobject {fcd67427-e033-11eb-8826-cdf90e3873d0} displayorder {default} toolsdisplayorder {memdiag} timeout 30 Windows Boot Loader ------------------- identifier {default} device vhd=[C:]\\windows7.vhd path \\Windows\\system32\\winload.exe description Windows 7 locale en-us inherit {bootloadersettings} osdevice vhd=[C:]\\windows7.vhd systemroot \\Windows resumeobject {fcd67427-e033-11eb-8826-cdf90e3873d0} nx OptIn detecthal Yes The volume letter doesn\u0026rsquo;t matter, it changes dynamically. Now bootmgr is able to locate the VHD file correctly.\nAdding Windows to GRUB Restart PC and get into Linux.\nModify the GRUB config file to load bootmgr\n1 2 3 4 5 6 7 8 9 10 11 # Adding Windows (bootmgr) entry to GRUB. 1DB1-9C31 is the boot partition\u0026#39;s UUID $ sudo cat \u0026lt;\u0026lt;EOF \u0026gt;\u0026gt;/etc/grub.d/40_custom menuentry \u0026#34;Windows 7\u0026#34; { search --set=root --no-floppy --fs-uuid 1DB1-9C31 linux16 /memdisk harddisk initrd16 /bootmgr.vhd } EOF # Updating GRUB entries $ sudo grub-mkconfig -o /boot/grub/grub.cfg Now we can restart PC. Keep pressing shift on bootup to go to the GRUB menu. Select Windows entry to boot Windows.\nFixing Windows Initialization Error During the first time bootup, Windows might have an error showing\n1 Windows could not complete the installation. To install Windows on this computer, restart the installation. To solve this error:\nPress SHIFT + F10 to bring up the command prompt. Execute C:\\windows\\system32\\oobe\\msoobe. Wait for a while and the setup window will show up. Complete the setup and restart. Creating a Differencing Disk A differencing disk can be used for quick recoveries.\nTo create it, restart into the Windows PE environment. In a command line window:\n1 2 3 4 5 6 7 # Use the original VHD as base \u0026gt; move d:\\windows7.vhd d:\\windows7_base.vhd # Create a differencing disk based on the original one # The name of the new differencing disk has to be the name that was recorded in the BCD \u0026gt; diskpart DISKPART\u0026gt; creat vdisk file=d:\\windows7.vhd parent=d:\\windows7_base.vhd Then all changes made in the future will go into the differencing disk. If system goes wrong one day, simply deleting the the differencing disk and creating a new one would quickly recover from the crysis.\nNOTE: After creating the differencing disk, the base VHD is not supposed to be modified.\nReferences GRUB wiki BIOS + GPT + GRUB + Linux + Windows 折腾笔记 在 VHD 中安装 Windows 7 Hack Bootmgr to boot Windows in BIOS to GPT Boot to a virtual hard disk: Add a VHDX or VHD to the boot menu BCDEdit notes 100% Solved:Windows could not complete the installation\n","date":"2021-07-09T16:40:00Z","permalink":"https://peromage.github.io/p/dual-booting-windows-vhd-and-native-linux-on-a-bios-gpt-pc/","title":"Dual-booting Windows VHD and Native Linux on a BIOS+GPT PC"}]