<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>emacs on undefined behavior</title><link>https://peromage.github.io/tags/emacs/</link><description>Recent content in emacs on undefined behavior</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Mar 2023 23:17:00 +0000</lastBuildDate><atom:link href="https://peromage.github.io/tags/emacs/index.xml" rel="self" type="application/rss+xml"/><item><title>Different Ways to Write a Major Mode</title><link>https://peromage.github.io/p/different-ways-to-write-a-major-mode/</link><pubDate>Thu, 16 Mar 2023 23:17:00 +0000</pubDate><guid>https://peromage.github.io/p/different-ways-to-write-a-major-mode/</guid><description>This post mainly helps myself remember how to quickly write a major mode. My memory is getting worse. So sad. :(
Use define-derived-mode Doc: https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html
This perhaps the most common way to write a major mode.
Most of the times I derive from fundamental-mode, or nil if the parent mode is not needed (a brand new mode).
;; With a parent mode (define-derived-mode foo-mode fundamental-mode &amp;#34;Foo&amp;#34; (do something)) ;; Or nothing (define-derived-mode foo-mode nil &amp;#34;Foo&amp;#34; (do something)) Here is the common pattern that I use.</description></item><item><title>LSP Setup for Java</title><link>https://peromage.github.io/p/lsp-setup-for-java/</link><pubDate>Sat, 18 Feb 2023 17:04:00 +0000</pubDate><guid>https://peromage.github.io/p/lsp-setup-for-java/</guid><description>Background As a Java newbie I found that Java setup is quite different from C++.
Initially I added lsp-java along with the existing lsp-mode I&amp;rsquo;ve been using. With zero configuration it seemed to work fine. Completion is well supported for Java built-in libraries. However, when I tried visiting some symbols from some other places in the project that I&amp;rsquo;m working on, say JUnit, things getting complicated.
In C++&amp;rsquo;s world, with clangd, I can easily write a compile_flags.</description></item><item><title>File-based Blog Management with ox-hugo</title><link>https://peromage.github.io/p/file-based-blog-management-with-ox-hugo/</link><pubDate>Tue, 15 Nov 2022 09:58:00 +0000</pubDate><guid>https://peromage.github.io/p/file-based-blog-management-with-ox-hugo/</guid><description>Background I previously wrote a post about managing blog posts with ox-hugo in org mode. I used to follow the recommendation to keep posts under org subtrees. As posts grew, I found that the opening speed is quite slow even I didn&amp;rsquo;t have many pictures inserted. Although managing the entire site within one file does have some convenience, the slowness is something I can&amp;rsquo;t bear. Also I feel it a</description></item><item><title>Use lisp-data Files in Emacs</title><link>https://peromage.github.io/p/use-lisp-data-files-in-emacs/</link><pubDate>Mon, 14 Nov 2022 10:57:00 +0000</pubDate><guid>https://peromage.github.io/p/use-lisp-data-files-in-emacs/</guid><description>I found that there were few posts mentioning about using lisp-data files. However, it seems to be used widely in various packages.
Emacs manumal has a very detailed description of how to read and write lisp objects. In this post I&amp;rsquo;ll mainly demonstrate one specific use case.
Read from file The biggest challenge is to parse file content to Lisp lists. After a quick search with describe-function, read function is able to perfectly handle it in this case.</description></item><item><title>Autoloading in Emacs</title><link>https://peromage.github.io/p/autoloading-in-emacs/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://peromage.github.io/p/autoloading-in-emacs/</guid><description>Autoloading is a neat feature in Emacs. It speeds up Emacs by lazy load the files. But it could be a little confusing if you&amp;rsquo;re switching from Vim.
Myth - Not Working as Expected If you have used Vim you know in Vim you can put your library files to the load path variable and Vim autoloads them whenever one of the functions/variables is used. Initially I thought this is the same in Emacs but with a little effort to put the magic autoload comments before the function/variable definition.</description></item><item><title>Use Org Mode to Manage My Blog</title><link>https://peromage.github.io/p/use-org-mode-to-manage-my-blog/</link><pubDate>Sun, 05 Jun 2022 23:00:00 +0000</pubDate><guid>https://peromage.github.io/p/use-org-mode-to-manage-my-blog/</guid><description>I&amp;rsquo;ve been using Emacs since last year but until recent I started using org-mode seriously. After spending a couple of days reading and watching all kinds of org tutorial as well as using it for documentation, I realized that people who invented this must geniuses.
Org document seems similar with Markdown: they are text markup format. However, Org provides far more capabilities to store metadata and greater editing experience together with Emacs&amp;rsquo; org-mode.</description></item><item><title>Moving From Vim to Emacs</title><link>https://peromage.github.io/p/moving-from-vim-to-emacs/</link><pubDate>Sat, 14 Aug 2021 10:29:00 +0000</pubDate><guid>https://peromage.github.io/p/moving-from-vim-to-emacs/</guid><description>YouTube has been pushing me a lot Emacs related contents. This is weird since mostly I watch Vim videos only. But probably this is also a great opportunity to try Emacs again.
I have tried Emacs half year ago. I looked a lot Elisp programming fundamentals and tried a few Emacs configurations from others including Doom Emacs. However, it didn&amp;rsquo;t last long since I found that I didn&amp;rsquo;t have enough time to configure this Emacs setup as good as the Vim setup that I was using.</description></item></channel></rss>