<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>org on Fang's Blog</title><link>https://peromage.github.io/tags/org/</link><description>Recent content in org on Fang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://peromage.github.io/tags/org/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Org Mode to Manage My Blog</title><link>https://peromage.github.io/blog/use-org-mode-to-manage-my-blog/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/use-org-mode-to-manage-my-blog/</guid><description>&lt;p>I&amp;rsquo;ve been using Emacs since last year but until recent I started using &lt;code>org-mode&lt;/code> seriously. After spending a couple of days reading and watching all kinds of org tutorial as well as using it for documentation, I realized that people who invented this must geniuses.&lt;/p>
&lt;p>Org document seems similar with markdown: they are text markup format. However, Org provides far more capabilities to store metadata and greater editing experience together with Emacs&amp;rsquo; &lt;code>org-mode&lt;/code>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>I used to use markdown to write my blog articles and use &lt;em>Hugo&lt;/em> to generate static files.&lt;/p>
&lt;p>The workflow is pretty much like:&lt;/p>
&lt;ol>
&lt;li>Create a new markdown with header by either snippet template from text editor or Hugo command.&lt;/li>
&lt;li>Write the article.&lt;/li>
&lt;li>Set last modified time upon finished.&lt;/li>
&lt;li>Commit and push then let GitHub CI to generate static files automatically.&lt;/li>
&lt;/ol>
&lt;p>It looks typical but later on I found it was really frustrating to manage my articles:&lt;/p>
&lt;ol>
&lt;li>I always forgot to update the last modified time.&lt;/li>
&lt;li>Tags and categories were set in the header each file. It&amp;rsquo;s difficult check existing tags and categories and make them consistent in the new articles. For example, I always forgot whether a tag or category was capitalized or dash separated.&lt;/li>
&lt;li>Painful to browse.&lt;/li>
&lt;/ol>
&lt;p>Because of those troubles I gradually lost interests writing articles until I found &lt;code>org-mode&lt;/code>. So I started planning to manage my articles with it.&lt;/p>
&lt;h2 id="choose-the-right-way">Choose the Right Way&lt;/h2>
&lt;p>By checking Hugo&amp;rsquo;s documents, I found that it supports Org backend with &lt;a class="link" href="https://github.com/niklasfasching/go-org" target="_blank" rel="noopener"
>go-org&lt;/a>. However it seems like just another markdown method but in Org syntax. Apparently it doesn&amp;rsquo;t use the full Org capabilities.&lt;/p>
&lt;p>Later I found &lt;a class="link" href="https://ox-hugo.scripter.co/" target="_blank" rel="noopener"
>ox-hugo&lt;/a> which is an Org backend in Emacs used for Org file export. The idea is to write articles in Org syntax with metadata and whatever you like to do in &lt;code>org-mode&lt;/code> and then export to markdown files through &lt;code>ox-hugo&lt;/code>. Finally feed the markdown files to the Hugo engine. The killer feature is that it supports exporting from subtrees, which means you can manage all my articles in one file categorize them with ease (by the first level outline). And since all the articles are in the same visible file, they can be refiled and move around with &lt;code>org-mode&lt;/code> key bindings. Also all tags are visible and can be applied very easily. It gives you a lot flexibility to manage the articles in this way.&lt;/p>
&lt;p>At the time when this article is read, it&amp;rsquo;s been written in &lt;code>org-mode&lt;/code> already. I even use the same file to manage other pages of my blog like about, archives and search pages. You can checkout my original Org file &lt;a class="link" href="https://github.com/peromage/peromage.github.io/blob/master/myblog/blog.org" target="_blank" rel="noopener"
>here&lt;/a> to figure out how they are defined.&lt;/p>
&lt;h2 id="update-ci-to-build-static-files-on-pushing">Update CI to Build Static Files on Pushing&lt;/h2>
&lt;p>Since all the articles are managed by the Org file there is no point to keep the old markdown files. I need to make GitHub CI export the Org file for me so I don&amp;rsquo;t have to do it locally.&lt;/p>
&lt;p>The problem is to setup Emacs on the job runner. Luckily there are people doing this already by providing a GitHub &lt;a class="link" href="https://github.com/marketplace/actions/set-up-emacs" target="_blank" rel="noopener"
>action&lt;/a>. Then the rest problem is to export.&lt;/p>
&lt;p>I wrote a &lt;a class="link" href="https://github.com/peromage/peromage.github.io/blob/master/org-export.sh" target="_blank" rel="noopener"
>shell script&lt;/a> and put it to the blog repo root so the job runner can execute it when Emacs is ready.&lt;/p>
&lt;p>The idea is simple: install &lt;code>ox-hugo&lt;/code> from MELPA and use it to export the Org file. After that, just same with the typical Hugo &lt;a class="link" href="https://github.com/peromage/peromage.github.io/blob/master/.github/workflows/gh-pages.yml" target="_blank" rel="noopener"
>workflow&lt;/a>.&lt;/p>
&lt;h2 id="a-little-glitch">A Little Glitch&lt;/h2>
&lt;p>By doing this workflow all the files are always generated so their last modified date are changed every time. To solve this, either add a &lt;code>:LOGBOOK:&lt;/code> or &lt;code>EXPORT_HUGO_LASTMOD&lt;/code> property to the subtree. Further more simply use &lt;em>TODO&lt;/em> and &lt;em>DONE&lt;/em> workflow since it generates &lt;code>:LOGBOOK:&lt;/code> automatically. &lt;code>ox-hugo&lt;/code> has a clear &lt;a class="link" href="https://ox-hugo.scripter.co/doc/org-meta-data-to-hugo-front-matter/#front-matter-precedence" target="_blank" rel="noopener"
>explanation&lt;/a> about how it picks up those date information. But in my case, I don&amp;rsquo;t really bother it so I stay as it is.&lt;/p></description></item></channel></rss>