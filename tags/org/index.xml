<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>org on Fang's Blog</title><link>https://peromage.github.io/tags/org/</link><description>Recent content in org on Fang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 05 Jun 2022 23:00:00 +0000</lastBuildDate><atom:link href="https://peromage.github.io/tags/org/index.xml" rel="self" type="application/rss+xml"/><item><title>Use Org Mode to Manage My Blog</title><link>https://peromage.github.io/blog/use-org-mode-to-manage-my-blog/</link><pubDate>Sun, 05 Jun 2022 23:00:00 +0000</pubDate><guid>https://peromage.github.io/blog/use-org-mode-to-manage-my-blog/</guid><description>&lt;p>I&amp;rsquo;ve been using Emacs since last year but until recent I started using &lt;code>org-mode&lt;/code> seriously. After spending a couple of days reading and watching all kinds of org tutorial as well as using it for documentation, I realized that people who invented this must geniuses.&lt;/p>
&lt;p>Org document seems similar with Markdown: they are text markup format. However, Org provides far more capabilities to store metadata and greater editing experience together with Emacs&amp;rsquo; &lt;code>org-mode&lt;/code>.&lt;/p>
&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>I used to use Markdown to write my blog articles and use &lt;em>Hugo&lt;/em> to generate static files.&lt;/p>
&lt;p>The workflow is pretty much like:&lt;/p>
&lt;ol>
&lt;li>Create a new Markdown with header by either snippet template from text editor or Hugo command.&lt;/li>
&lt;li>Write the article.&lt;/li>
&lt;li>Set last modified time upon finished.&lt;/li>
&lt;li>Commit and push then let GitHub CI to generate static files automatically.&lt;/li>
&lt;/ol>
&lt;p>It looks typical but later on I found it was really frustrating to manage my articles:&lt;/p>
&lt;ol>
&lt;li>I always forgot to update the last modified time.&lt;/li>
&lt;li>Tags and categories were set in the header each file. It&amp;rsquo;s difficult check existing tags and categories and make them consistent in the new articles. For example, I always forgot whether a tag or category was capitalized or dash separated.&lt;/li>
&lt;li>Painful to browse.&lt;/li>
&lt;/ol>
&lt;p>Because of those troubles I gradually lost interests writing articles until I found &lt;code>org-mode&lt;/code>. So I started planning to manage my articles with it.&lt;/p>
&lt;h2 id="choose-the-right-way">Choose the Right Way&lt;/h2>
&lt;p>By checking Hugo&amp;rsquo;s documents, I found that it supports Org backend with &lt;a class="link" href="https://github.com/niklasfasching/go-org" target="_blank" rel="noopener"
>go-org&lt;/a>. However it seems like just another Markdown method but in Org syntax. Apparently it doesn&amp;rsquo;t use the full Org capabilities.&lt;/p>
&lt;p>Later I found &lt;a class="link" href="https://ox-hugo.scripter.co/" target="_blank" rel="noopener"
>ox-hugo&lt;/a> which is an Org backend in Emacs used for Org file export. The idea is to write articles in Org syntax with metadata and whatever you like to do in &lt;code>org-mode&lt;/code> and then export to Markdown files through &lt;code>ox-hugo&lt;/code>. Finally feed the Markdown files to the Hugo engine. The killer feature is that it supports exporting from subtrees, which means you can manage all my articles in one file categorize them with ease (by the first level outline). And since all the articles are in the same visible file, they can be refiled and move around with &lt;code>org-mode&lt;/code> key bindings. Also all tags are visible and can be applied very easily. It gives you a lot flexibility to manage the articles in this way.&lt;/p>
&lt;p>At the time when this article is read, it&amp;rsquo;s been written in &lt;code>org-mode&lt;/code> already. I even use the same file to manage other pages of my blog like about, archives and search pages. You can checkout my original Org file &lt;a class="link" href="https://github.com/peromage/peromage.github.io/blob/master/myblog/blog.org" target="_blank" rel="noopener"
>here&lt;/a> to figure out how they are defined.&lt;/p>
&lt;h2 id="update-ci-to-build-static-files-on-pushing">Update CI to Build Static Files on Pushing&lt;/h2>
&lt;p>Since all the articles are managed by the Org file there is no point to keep the old Markdown files. I need to make GitHub CI export the Org file for me so I don&amp;rsquo;t have to do it locally.&lt;/p>
&lt;p>The problem is to setup Emacs on the job runner. Luckily there are people doing this already by providing a GitHub &lt;a class="link" href="https://github.com/marketplace/actions/set-up-emacs" target="_blank" rel="noopener"
>action&lt;/a>. Thanks Steve Purcell and the people who worked on this!&lt;/p>
&lt;p>Now with the Emacs setup ready, one problem left is to export from Org files to Markdown. The idea is pretty straight forward: install &lt;code>ox-hugo&lt;/code> from MELPA and export through it. A simple shell command should do the job.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">emacs -nw --batch --eval &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="s1">&amp;#39;(progn
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> (package-initialize)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> (add-to-list (quote package-archives) (quote (&amp;#34;melpa&amp;#34; . &amp;#34;https://melpa.org/packages/&amp;#34;)))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> (package-refresh-contents)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> (package-install (quote ox-hugo))
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> (find-file &amp;#34;myblog/blog.org&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> (org-hugo-export-wim-to-md :all))&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>After that, feed the generated Markdown files to Hugo engine. No difference from the typical Hugo &lt;a class="link" href="https://gohugo.io/hosting-and-deployment/hosting-on-github/" target="_blank" rel="noopener"
>workflow&lt;/a>.&lt;/p>
&lt;p>See here for my &lt;a class="link" href="https://github.com/peromage/peromage.github.io/blob/master/org-export.sh" target="_blank" rel="noopener"
>job runner script&lt;/a> and &lt;a class="link" href="https://github.com/peromage/peromage.github.io/blob/master/.github/workflows/gh-pages.yml" target="_blank" rel="noopener"
>workflow configuration&lt;/a>.&lt;/p>
&lt;h2 id="fix-the-last-modified-date">Fix the Last Modified Date&lt;/h2>
&lt;p>By doing this workflow all the files are always generated so their last modified date are constantly changed (with &lt;code>#+hugo_auto_set_lastmod: t&lt;/code> in the header). &lt;code>ox-hugo&lt;/code> seems not to have a proper solution to calculate the diff between changes (could be hard though). The best way to solve this is to add either a &lt;code>:LOGBOOK:&lt;/code> or a &lt;code>EXPORT_HUGO_LASTMOD&lt;/code> property to the subtree. Or even simpler to use &lt;em>TODO&lt;/em> and &lt;em>DONE&lt;/em> workflow since it generates &lt;code>:LOGBOOK:&lt;/code> automatically. When any one of them specified &lt;code>ox-hugo&lt;/code> will the value from it &lt;a class="link" href="https://ox-hugo.scripter.co/doc/dates/#last-modified" target="_blank" rel="noopener"
>instead of generating a new date&lt;/a>.&lt;/p>
&lt;p>Since manually changing the modification time in &lt;code>EXPORT_HUGO_LASTMOD&lt;/code> sucks and it&amp;rsquo;s the same solution back in the Markdown style, this time I decided to use &amp;ldquo;Org&amp;rdquo; way to fix this problem. By looking at the document, &lt;code>:LOGBOOK:&lt;/code> has &lt;a class="link" href="https://ox-hugo.scripter.co/doc/org-meta-data-to-hugo-front-matter/#front-matter-precedence" target="_blank" rel="noopener"
>the highest priority&lt;/a> among other options and also has a synergy with todo workflow. That&amp;rsquo;s cool. I can treat my article writing like any other tasks.&lt;/p>
&lt;p>But I don&amp;rsquo;t quite like the default keywords &lt;em>TODO&lt;/em> and &lt;em>DONE&lt;/em> since they doesn&amp;rsquo;t sound semantic to the articles. So I added a header to my blog Org file: &lt;code>#+seq_todo: DRAFT(d) | PUBLISHED(p!)&lt;/code>.&lt;/p>
&lt;p>Then I found another problem that whenever I change the state from &lt;em>DRAFT&lt;/em> to &lt;em>PUBLISHED&lt;/em> there is always a &lt;code>CLOSED&lt;/code> time property added to the article. This is because I have &lt;code>(setq org-log-done 'time)&lt;/code> in my Emacs configuration file. It duplicates &lt;code>:LOGBOOK:&lt;/code> since it has already logged the transition time and I don&amp;rsquo;t want to change my Emacs configuration specific for this file. So I added another header to my blog Org file: &lt;code>#+startup: nologdone&lt;/code> and also make sure the state transition records are always put into the drawer: &lt;code>#+startup: logdrawer&lt;/code>.&lt;/p>
&lt;p>Okay now I should be able to start a new article with &lt;em>DRAFT&lt;/em> prefix and then use &lt;code>C-c C-t&lt;/code> to change it to &lt;em>PUBLISHED&lt;/em> whenever I&amp;rsquo;m done writing. However things are still not going as I expected. Remember the &lt;a class="link" href="https://ox-hugo.scripter.co/doc/org-meta-data-to-hugo-front-matter/#front-matter-precedence" target="_blank" rel="noopener"
>date precedence&lt;/a> page? The first transition to &lt;em>PUBLISHED&lt;/em> state record is recognized as the creation date. Only the second or later records to &lt;em>PUBLISHED&lt;/em> state will be read as the last modified date. That&amp;rsquo;s dumb. To fix this, I added a new todo item and now it&amp;rsquo;s like: &lt;code>#+seq_todo: DRAFT(d) | CREATED(c!) PUBLISHED(p!)&lt;/code>.&lt;/p>
&lt;p>Now my blog header is like:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">#+author: Fang Deng
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#+startup: show2levels
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#+startup: nologdone
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#+startup: logdrawer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#+seq_todo: DRAFT(d) | CREATED(c!) PUBLISHED(p!)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#+options: d:t
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#+hugo_base_dir: ../
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#+hugo_section: blog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#+hugo_auto_set_lastmod: t
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Don&amp;rsquo;t forget the &lt;code>#+options: d:t&lt;/code>. &lt;code>ox-hugo&lt;/code> will not export &lt;code>:LOGBOOK:&lt;/code> without it.&lt;/p>
&lt;p>Finally a sweet snippet file to save my life.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># -*- mode: snippet -*-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># name: Hugo new article
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># key: hugonew
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># --
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">** DRAFT ${1:TITLE}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:PROPERTIES:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:EXPORT_FILE_NAME: ${1:$(replace-regexp-in-string &amp;#34;[^A-Za-z0-9._-]&amp;#34; &amp;#34;&amp;#34; (replace-regexp-in-string &amp;#34; &amp;#34; &amp;#34;-&amp;#34; (downcase yas-text)))}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:END:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:LOGBOOK:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- State &amp;#34;CREATED&amp;#34; from [`(string-trim (format-time-string (cdr org-time-stamp-formats)) &amp;#34;&amp;lt;&amp;#34; &amp;#34;&amp;gt;&amp;#34;)`]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:END:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Now a new article will come with its creation time. Whenever the article is done, &lt;code>C-c C-t&lt;/code> to mark it &lt;em>PUBLISHED&lt;/em> which will be the last modified time. If the article is modified in the future, simply &lt;code>C-c C-t&lt;/code> again to add another &lt;em>PUBLISHED&lt;/em> state and the last modified time will be refreshed on export. Now I have a neat log book to record my changes. No more manually editing suckers!&lt;/p></description></item></channel></rss>