<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>中文 on Peromage&#39;s Blog</title>
    <link>https://peromage.github.io/tags/%E4%B8%AD%E6%96%87/</link>
    <description>Recent content in 中文 on Peromage&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Apr 2017 20:53:53 +0000</lastBuildDate><atom:link href="https://peromage.github.io/tags/%E4%B8%AD%E6%96%87/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git 中的 Subtree 和 Submodule</title>
      <link>https://peromage.github.io/p/git-%E4%B8%AD%E7%9A%84-subtree-%E5%92%8C-submodule/</link>
      <pubDate>Fri, 07 Apr 2017 20:53:53 +0000</pubDate>
      
      <guid>https://peromage.github.io/p/git-%E4%B8%AD%E7%9A%84-subtree-%E5%92%8C-submodule/</guid>
      <description>因为最近弄自己的博客，涉及到了版本库嵌套的问题。记下来也算是给自己一个备忘。
为什么有这样的需求 版本库嵌套很好理解，就是在一个 Git 仓库里面包含了其他的 Git 仓库。通常有这样的需求往往涉及到协同开发。比如这里有一个插件单独的 Git 仓库姑且叫“Plugin”。现在我创建了一个自己的项目，其中需要用到这个“Plugin”插件。通常比较笨的办法就是把插件库源码拖下来，复制到自己的项目里。但是这样当插件库更新的时候，插件源码更新往往比较麻烦。而且如果在使用的过程中修改了插件的源码，也不便于插件单独的版本控制，更别说为插件库贡献代码了。但如果插件单独以 Git 仓库存在于我的项目目录中，以上的问题就解决了。
在 Git 里面提供了两种方式实现上述需求，那就是 Subtree 和 Submodule。
Submodule Submodule 是 Git 里面最早提供的一种方法。顾名思义“子模块”。
添加子模块 执行
git submodule add &amp;lt;repo&amp;gt; &amp;lt;module_path&amp;gt;
此时运行 git status 可以看到子模块对应的文件夹和一个叫做 .gitmodules 文件被添加进了暂存区。其中*.gitmodules*是用于记录子模块相关信息的。之后主项目里面的操作照常提交就可以了。
修改子模块 但如果在开发的途中修改了子模块的代码，需要单独到子模块对应的根目录里面进行子模块单独的提交操作。在主项目里面虽然可以看到子模块有变更，但是无法看到具体的更改操作，而是将其看作一个模块整体。一旦子模块产生了新的提交，主项目里面可以看到子模块的 HEAD 变化，从而主项目也应当产生一个新的提交以记录对应关系。
换句话说，主项目就是靠着记录子模块 HEAD 值来判断依赖的。子模块的代码最后将不会进入主项目的版本库里面（只有 HEAD 值）
现在子模块有了新的提交，为了将服务器上的代码更新，我们只需要进入子模块对应的更目录执行 push 操作就可以了。
更新子模块 此时子模块上游有了新的代码，我们需要将其整合到当前的项目中。有两种方法。
在主项目根目录下运行
git submodule foreach git pull
或者切换到子模块的根目录下面 git pull
克隆项目 克隆主项目的时候子模块并不会拉取到本地，如果进入对应的目录会发现是空的。
此时应当
git submodule init
保持最新
git submodule update
或者可以直接一条命令搞定
git clone --recursive &amp;lt;repo&amp;gt;</description>
    </item>
    
    <item>
      <title>Windows &#43; Linux 双系统引导手记</title>
      <link>https://peromage.github.io/p/windows-linux-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E6%89%8B%E8%AE%B0/</link>
      <pubDate>Wed, 05 Apr 2017 19:26:41 +0000</pubDate>
      
      <guid>https://peromage.github.io/p/windows-linux-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E6%89%8B%E8%AE%B0/</guid>
      <description>0x00 情况简述 由于开发需要 Linux 环境，所以将老的那台笔记本改造成了双系统。
这台电脑的基本情况是这样的，64GB 固态硬盘 + 720GB 机械硬盘（实际可用空间有折损，这里为了表示方便），Windows 10 已经安装到了固态硬盘上。由于主板较老，只能支持 BIOS。巨硬又说过 Windows 只能支持 BIOS + MBR，所以第一块主位（Master）上的固态硬盘就只能采用 MBR 分区表，分成了两个区，500MB 用作启动分区，剩下的部分全部划给了系统分区。
但是 Linux 表示没有巨硬这种尿性，所以为什么不使用更先进的 GPT 分区表？因此从位（Slave）上的机械硬盘被我分成了这个样子：
10MB BIOS 启动分区（No File System） + 500MB /boot 启动挂载点（EXT4） + 100GB / 根挂载点（EXT4） + 199.5GB /home 用户目录挂载点（EXT4） + 420GB Windows 数据分区（NTFS）。
BIOS 启动分区 1MB 足以，我只是考虑到后续扩展问题。之后在第二块硬盘上安装了 Arch Linux。
0x01 有啥好折腾的？ 双系统安装好以后相安无事，BIOS 默认从主位固态硬盘启动。也就是说开机不进行任何操作的话，默认进入的是 Windows 10。只有在开机的时候使用 BIOS 的 Fast Boot 功能，选择从第二块硬盘启动才能进入 Arch Linux。换句话说两个系统彼此都是透明的。 但是作为一个强迫症和完美主义者，万一我想进入 Linux，但是开机的时候错过了，岂不是要重启一次才行？或者万一我又反悔想进入 Windows 又要重启一次？这怎么能忍，所以才有了这次的折腾……</description>
    </item>
    
  </channel>
</rss>
