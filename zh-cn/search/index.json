[{"content":"因为最近弄自己的博客，涉及到了版本库嵌套的问题。记下来也算是给自己一个备忘。\n为什么有这样的需求 版本库嵌套很好理解，就是在一个 Git 仓库里面包含了其他的 Git 仓库。通常有这样的需求往往涉及到协同开发。比如这里有一个插件单独的 Git 仓库姑且叫“Plugin”。现在我创建了一个自己的项目，其中需要用到这个“Plugin”插件。通常比较笨的办法就是把插件库源码拖下来，复制到自己的项目里。但是这样当插件库更新的时候，插件源码更新往往比较麻烦。而且如果在使用的过程中修改了插件的源码，也不便于插件单独的版本控制，更别说为插件库贡献代码了。但如果插件单独以 Git 仓库存在于我的项目目录中，以上的问题就解决了。\n在 Git 里面提供了两种方式实现上述需求，那就是 Subtree 和 Submodule。\nSubmodule Submodule 是 Git 里面最早提供的一种方法。顾名思义“子模块”。\n添加子模块 执行\n1 $ git submodule add \u0026lt;repo\u0026gt; \u0026lt;module_path\u0026gt; 此时运行 git status 可以看到子模块对应的文件夹和一个叫做 .gitmodules 文件被添加进了暂存区。其中 .gitmodules 是用于记录子模块相关信息的。之后主项目里面的操作照常提交就可以了。\n修改子模块 但如果在开发的途中修改了子模块的代码，需要单独到子模块对应的根目录里面进行子模块单独的提交操作。在主项目里面虽然可以看到子模块有变更，但是无法看到具体的更改操作，而是将其看作一个模块整体。一旦子模块产生了新的提交，主项目里面可以看到子模块的 HEAD 变化，从而主项目也应当产生一个新的提交以记录对应关系。 换句话说，主项目就是靠着记录子模块 HEAD 值来判断依赖的。子模块的代码最后将不会进入主项目的版本库里面（只有 HEAD 值）。\n现在子模块有了新的提交，为了将服务器上的代码更新，我们只需要进入子模块对应的更目录执行 push 操作就可以了。\n更新子模块 此时子模块上游有了新的代码，我们需要将其整合到当前的项目中。有两种方法。\n在主项目根目录下运行\n1 $ git submodule foreach git pull 或者切换到子模块的根目录下面\n1 $ git pull 克隆项目 克隆主项目的时候子模块并不会拉取到本地，如果进入对应的目录会发现是空的。 此时应当\n1 $ git submodule init 保持最新\n1 $ git submodule update 或者可以直接一条命令搞定\n1 $ git clone --recursive \u0026lt;repo\u0026gt; 删除子模块 Git 中没有提供直接删除的命令，需要手动完成删除操作。\n反向初始化子模块\n1 $ git submodule deinit --force \u0026lt;module_path\u0026gt; 或者直接删掉 .git/config 里相关信息\n移除子模块\n1 $ git rm \u0026lt;module_path\u0026gt; 如果暂存区还有\n1 $ git rm --cached \u0026lt;module_path\u0026gt; 子模块的坑 提交的坑 假设有 A B 两个人同时在开发一个项目，这个项目里面也包含了一个子模块。此时 A 修改了业务代码，同时修改了一个子模块里面的一个 bug 。A 将这次修改提交，主项目的提交里面指向了子模块新的 HEAD1 ，然后把主项目的版本库 push 到了服务器，但是没有 push 子模块。B 此时 pull 了主项目，然后 update 子模块，被告知找不到子模块的 HEAD1 。因为指向 HEAD1 的提交还在 A 本地机器上。 这就是子模块提交的坑。在多个模块存在的时候操作非常繁琐。\n初始化的坑 在执行 git submodule init ， git submodule update 之后，此时修改子模块可能出现 HEAD 处于游离状态的的提示。如果不注意极有可能出现丢失提交的可能。 解决办法，在以上两条命令之后执行一次检出\n1 $ git checkout \u0026lt;branch\u0026gt; Subtree 添加子项目 首先添加子项目对应的远程服务器\n1 $ git remote add \u0026lt;subrepo_name\u0026gt; \u0026lt;subrepo_remote\u0026gt; 拉取一下\n1 $ git fetch \u0026lt;subrepo_name\u0026gt; 添加子项目到父项目里面\n1 $ git subtree add --squash --prefix=\u0026lt;subrepo_path\u0026gt; \u0026lt;subrepo_name\u0026gt; \u0026lt;branch\u0026gt; 参数 --squash 作用在于合并子项目所有提交为一个，并 merge 到父项目的历史中，这样只会出现两个提交记录，避免子项目的提交历史污染父项目。更多讨论可以看这里。\n修改子项目 添加完毕之后照常修改提交各种操作，父项目能够跟踪子项目里面的所有变更。子项目被当做一个正常的子文件夹处理。\n如果现在修改了子项目里的一个 bug 并且想要反馈给上游，可以这样操作\n1 $ git subtree push --prefix=\u0026lt;subrepo_path\u0026gt; \u0026lt;subrepo_name\u0026gt; \u0026lt;bug_fixed\u0026gt; 这个操作可以将父项目里所有涉及子项目修改的提交检出。这样在远程仓库里面会出现一个叫做 bug_fixed 的分支。\n或者也可以这样操作\n1 $ git subtree split --prefix=\u0026lt;subrepo_path\u0026gt; --branch \u0026lt;new_branch_name\u0026gt; 这个操作跟上面一样将父项目里所有涉及子项目修改的提交检出，并且把子项目的根文件夹设为整个项目的根文件夹，然后检出为父项目的一个新的分支。\n然后推送给上游\n1 $ git push \u0026lt;subrepo_remote\u0026gt; \u0026lt;new_branch_name\u0026gt;:\u0026lt;bug_fixed\u0026gt; 之后删除对应本地分支就可以了。\n更新子项目 拉取非常方便\n1 $ git subtree pull --prefix=\u0026lt;subrepo_path\u0026gt; \u0026lt;subrepo_name\u0026gt; \u0026lt;branch\u0026gt; 删除子项目 因为子项目在父项目里面就是被当做一个普通的文件夹处理的，所以直接移除文件夹并提交就可以了。\nSubmodule vs. Subtree Git 官方推荐使用新的 Subtree ，事实证明的确比 Submodule 方便不少。Subtree 不会产生额外的文件，而且子项目的代码包含在父项目里面，不会出现前面提到的坑的问题。具体应用上的对比可以参考这篇文章。Subtree 对于代码迭代较快的项目尤为适合。\n但也不是说 Submodule 一无是处， Submodule 在我感觉最大的意义在于可以隔离子项目的业务代码，并且记录严格的依赖关系。对于一些子模块更新较慢的项目还是比较适合的。\n参考 subtree_usage subtree_squash\n","date":"2017-04-07T20:53:00Z","permalink":"https://peromage.github.io/zh-cn/p/git%E4%B8%AD%E7%9A%84subtree%E5%92%8Csubmodule/","title":"Git中的Subtree和Submodule"},{"content":"0x00 情况简述 由于开发需要 Linux 环境，所以将老的那台笔记本改造成了双系统。 这台电脑的基本情况是这样的，64GB 固态硬盘 + 720GB 机械硬盘（实际可用空间有折损，这里为了表示方便），Windows 10 已经安装到了固态硬盘上。由于主板较老，只能支持 BIOS。巨硬又说过 Windows 只能支持 BIOS + MBR，所以第一块主位（Master）上的固态硬盘就只能采用 MBR 分区表，分成了两个区，500MB 用作启动分区，剩下的部分全部划给了系统分区。 但是 Linux 表示没有巨硬这种尿性，所以为什么不使用更先进的 GPT 分区表？因此从位（Slave）上的机械硬盘被我分成了这个样子：\n大小 挂载点 文件系统 备注 10 MB None No File System BIOS 启动分区 500 MB /boot EXT4 引导 100 GB / EXT4 系统 199.5GB /home EXT4 用户 420 GB None NTFS Windows 数据 BIOS 启动分区 1MB 足以，我只是考虑到后续扩展问题。之后在第二块硬盘上安装了 Arch Linux。\n0x01 有啥好折腾的？ 双系统安装好以后相安无事，BIOS 默认从主位固态硬盘启动。也就是说开机不进行任何操作的话，默认进入的是 Windows 10。只有在开机的时候使用 BIOS 的 Fast Boot 功能，选择从第二块硬盘启动才能进入 Arch Linux。换句话说两个系统彼此都是透明的。 但是作为一个强迫症和完美主义者，万一我想进入 Linux，但是开机的时候错过了，岂不是要重启一次才行？或者万一我又反悔想进入 Windows 又要重启一次？这怎么能忍，所以才有了这次的折腾……\n0x02 在 GRUB 中添加引导菜单 对于 GRUB （注：这里所说的 GRUB 指的是 GRUB 2 而不是 GRUB Legacy） 引导的 Linux 来说，切换到 Windows 的 bootmgr 是一件很容易的事情，最新版的 GRUB 可以直接启动 bootmgr 而不需要之前的 chainloading 模式。 进入 Arch Linux，以 root 权限编辑 /etc/grub.d/40_custom ，加入以下菜单：\n1 2 3 4 5 6 7 8 menuentry \u0026#34;Switch to Microsoft Boot Manager\u0026#34; { insmod part_msdos insmod ntfs insmod search_fs_uuid insmod ntldr search --fs-uuid --set=root 69B235F6749E84CE ntldr /bootmgr } insmod 是用于加载必要的模块以便 GRUB 识别并正确启动 Windows。值得注意的是， search 一行指定的 UUID 与 Linux 下 lsblk -f 看到的 UUID 是不一样的，需要使用\n1 $ sudo grub-probe --target=fs_uuid -d /dev/sda1 来获取 GRUB 下对应的分区 UUID。这个例子中，Windows 启动分区是 sda1 。UUID 是唯一的，勿照搬。\n当然也可以使用传统的 chainloading 模式：\n1 2 3 4 5 6 7 menuentry \u0026#34;Switch to Microsoft Boot Manager\u0026#34; { insmod part_msdos insmod ntfs insmod search_fs_uuid search --fs-uuid --set=root 69B235F6749E84CE chainloader +1 } 保存以后，执行\n1 $ sudo grub-mkconfig -o /boot/grub/grub.cfg 以便更新启动菜单。\n不推荐直接编辑 /boot/grub/grub.cfg ，因为上述命令会覆盖这个文件，不便于自定义菜单的管理。 这样就可以直接跳转到 bootmgr ，让它去启动 Windows。\n0x03 BCD 寻思 BCD 是Windows Vista 之后使用的一种启动管理器。有个非常蛋疼的问题就在于，BCD 并不支持 EXT4 分区格式，所以没有办法读到 GRUB。查阅了相关资料，给出的解决办法就是，将 /boot 分区格式化成 FAT32 的文件系统。难道我还得再折腾一次文件系统？直觉告诉我一定还有其他的办法。 既然 BCD 没办法直接读 EXT4 分区里面的东西，我们可以曲线救国。BCD 里面提供了一种实模式启动的方式，允许读取一个包含了启动代码的文件。所以一种解决办法就是 BCD → MBR → VBR → Bootloader 。由于 GPT 磁盘的第一个扇区被划分成了 Protective MBR，用于兼容 BIOS，所以在 Linux 使用：\n1 $ sudo dd if=/dev/sdb of=/mnt/reserved/grub.bin bs=512 count=1 可以将第二块硬盘的第一扇区里面的启动代码导出到一个文件，然后使用 BCD 加载这个文件就可以启动 GRUB了。 果真如此？ 事实是，这种方法可行，但是并不适用我的情况，因为这是建立在 Windows 和 Linux 安装在同一块硬盘上的情形。 grub.bin 并不能够跨分区寻找 VBR。难道只能作罢？肯定不可能，不然就没有这篇文章了。 查阅了若干文档之后，得知 GRUB 提供了一个 叫做 lnxboot.img 文件，可以将 GRUB 启动阶段模拟成一个可以启动的 Linux 内核，然后挂载 core.img 里面必要的模块，从而顺利启动 GRUB。那么将之前的思路修改成 BCD → VBR → Bootloader 就行了，即既然 MBR 不能跨分区以及识别 GPT，那么我们就换成一个可以胜任的不就行了。\n0x04 制作启动镜像 进入 Arch Linux。虽然在 /boot/grub/i386-pc/ 目录下有一个用于启动的 core.img 文件，这个文件里面指定的模块路径是相对路径，使用它启动依然会显示错误，需要指定绝对路径以保证万无一失。那么我们就来手动生成一个，顺便集成一些我们需要的模块。 注意，启动镜像稍后会被放在 Windows 的启动分区下面（BCD 的启动分区），所以还需要知道模块所在分区的位置。在 GRUB 中表示磁盘的方式有所不同，如 (hd0,msdos1) 表示第一块磁盘，使用 MBR 分区表，第一个分区。 (hd1,gpt2) 表示第二块磁盘，使用 GPT分区表，第二个分区。括号不可省，磁盘和分区的起始数字不一样。\n使用 grub-probe 来获取 /boot 分区信息。这个例子得到的是 hd1,gpt2 ：\n1 $ sudo grub-probe --target=bios_hints /boot 生成 core.img ：\n1 $ sudo grub-mkimage --output=/tmp/core.img --prefix=\\(hd1,gpt2\\)/grub --format=i386-pc biosdisk part_msdos part_gpt ext2 注意像我这样 /boot 单独分区，prefix 就不需要写成 \\\\(hd1,gpt2\\\\)/boot/grub ，毕竟已经在 /boot 里面了嘛。默认没有 GPT 支持，所以还需要添加 GPT 模块。\n生成启动镜像： 按照 GRUB 的帮助文档， lnxboot.img 需要放在 core.img 之前，由 lnxboot.img 来加载 core.img 。所幸 BCD 可以一次读取大于一个扇区（512B）的内容，所以将这两个文件合并一下即可：\n1 $ sudo cat /usr/lib/grub/i386-pc/lnxboot.img /tmp/core.img \u0026gt; /tmp/grub4bcd.img 然后将 grub4bcd.img 放到 Windows 启动分区根目录下面就可以了。注意内核默认只能以只读模式挂载 NFTS 文件系统，需要安装扩展包才能读写：\n1 $ sudo pacman -S ntfs-3g 然后挂载（安装了上述扩展包之后甚至不用指定参数）：\n1 $ sudo mount /dev/sda1 /mnt/reserved 现在就可以顺利地将启动镜像复制到 Windows 启动分区下面了。\n0x05 在 BCD 中添加引导菜单 重启进入 Windows 10。以管理员权限打开命令行。\n添加入口：\n1 \u0026gt; bcdedit /create /d \u0026#34;Switch to GRUB\u0026#34; /application bootsector 会返回一串 UUID，复制下来。之后 UUID 的地方我用 {ID} 表示，用刚才得到的替换即可。\n设置启动分区：\n1 \u0026gt; bcdedit /set {ID} device boot 设置启动文件：\n1 \u0026gt; bcdedit /set {ID} path /grub4bcd.img 将入口添加进启动菜单：\n1 \u0026gt; bcdedit /displayorder {ID} /addlast 关闭 Metro 启动菜单（不关闭的话切换时会重启，建议关闭）：\n1 \u0026gt; bcdedit /set {default} bootmenupolicy legacy 最后关闭 Windows 10 的 Hybrid 开机功能，否则可能会导致 Windows 丢失数据：\n1 \u0026gt; powercfg /h off 0x06 后记 现在终于可以愉快地切换两个引导菜单了。其实使用 GRUB 来管理两个系统是较为简单的办法。 更为简单的办法是，先装 Windows 然后装 Ubuntu，后者会自动搞定这些麻烦事。╮(╯_╰)╭\n0x07 参考资料 https://www.gnu.org/software/grub/manual/grub.html#Images http://askubuntu.com/questions/180033/how-to-add-different-drive-ubuntu-to-bcd-manually https://wiki.archlinux.org/index.php/Talk:Dual_boot_with_Windows https://wiki.archlinux.org/index.php/Dual_boot_with_Windows\n","date":"2017-04-05T19:26:00Z","permalink":"https://peromage.github.io/zh-cn/p/windows-linux%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%BC%95%E5%AF%BC%E6%89%8B%E8%AE%B0/","title":"Windows+Linux双系统引导手记"}]